# coding: utf-8

"""
    Cyclos 4.11.5 API

    The REST API for Cyclos 4.11.5  # noqa: E501

    OpenAPI spec version: 4.11.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class ContactInfoNew(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'email': 'str',
        'mobile_phone': 'str',
        'land_line_phone': 'str',
        'land_line_extension': 'str',
        'image': 'str',
        'address': 'str',
        'hidden': 'bool',
        'custom_values': 'dict(str, str)'
    }

    attribute_map = {
        'name': 'name',
        'email': 'email',
        'mobile_phone': 'mobilePhone',
        'land_line_phone': 'landLinePhone',
        'land_line_extension': 'landLineExtension',
        'image': 'image',
        'address': 'address',
        'hidden': 'hidden',
        'custom_values': 'customValues'
    }

    def __init__(self, name=None, email=None, mobile_phone=None, land_line_phone=None, land_line_extension=None, image=None, address=None, hidden=None, custom_values=None, _configuration=None):  # noqa: E501
        """ContactInfoNew - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._email = None
        self._mobile_phone = None
        self._land_line_phone = None
        self._land_line_extension = None
        self._image = None
        self._address = None
        self._hidden = None
        self._custom_values = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if email is not None:
            self.email = email
        if mobile_phone is not None:
            self.mobile_phone = mobile_phone
        if land_line_phone is not None:
            self.land_line_phone = land_line_phone
        if land_line_extension is not None:
            self.land_line_extension = land_line_extension
        if image is not None:
            self.image = image
        if address is not None:
            self.address = address
        if hidden is not None:
            self.hidden = hidden
        if custom_values is not None:
            self.custom_values = custom_values

    @property
    def name(self):
        """Gets the name of this ContactInfoNew.  # noqa: E501

        The address name  # noqa: E501

        :return: The name of this ContactInfoNew.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ContactInfoNew.

        The address name  # noqa: E501

        :param name: The name of this ContactInfoNew.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def email(self):
        """Gets the email of this ContactInfoNew.  # noqa: E501

        The e-mail for this additional contact information  # noqa: E501

        :return: The email of this ContactInfoNew.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this ContactInfoNew.

        The e-mail for this additional contact information  # noqa: E501

        :param email: The email of this ContactInfoNew.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def mobile_phone(self):
        """Gets the mobile_phone of this ContactInfoNew.  # noqa: E501

        The formatted mobile phone for this additional contact information   # noqa: E501

        :return: The mobile_phone of this ContactInfoNew.  # noqa: E501
        :rtype: str
        """
        return self._mobile_phone

    @mobile_phone.setter
    def mobile_phone(self, mobile_phone):
        """Sets the mobile_phone of this ContactInfoNew.

        The formatted mobile phone for this additional contact information   # noqa: E501

        :param mobile_phone: The mobile_phone of this ContactInfoNew.  # noqa: E501
        :type: str
        """

        self._mobile_phone = mobile_phone

    @property
    def land_line_phone(self):
        """Gets the land_line_phone of this ContactInfoNew.  # noqa: E501

        The formatted landline phone for this additional contact information   # noqa: E501

        :return: The land_line_phone of this ContactInfoNew.  # noqa: E501
        :rtype: str
        """
        return self._land_line_phone

    @land_line_phone.setter
    def land_line_phone(self, land_line_phone):
        """Sets the land_line_phone of this ContactInfoNew.

        The formatted landline phone for this additional contact information   # noqa: E501

        :param land_line_phone: The land_line_phone of this ContactInfoNew.  # noqa: E501
        :type: str
        """

        self._land_line_phone = land_line_phone

    @property
    def land_line_extension(self):
        """Gets the land_line_extension of this ContactInfoNew.  # noqa: E501

        The landline phone extension for this additional contact information   # noqa: E501

        :return: The land_line_extension of this ContactInfoNew.  # noqa: E501
        :rtype: str
        """
        return self._land_line_extension

    @land_line_extension.setter
    def land_line_extension(self, land_line_extension):
        """Sets the land_line_extension of this ContactInfoNew.

        The landline phone extension for this additional contact information   # noqa: E501

        :param land_line_extension: The land_line_extension of this ContactInfoNew.  # noqa: E501
        :type: str
        """

        self._land_line_extension = land_line_extension

    @property
    def image(self):
        """Gets the image of this ContactInfoNew.  # noqa: E501

        The identifier of either an uploaded temporary image, or an existing additional contact image.   # noqa: E501

        :return: The image of this ContactInfoNew.  # noqa: E501
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this ContactInfoNew.

        The identifier of either an uploaded temporary image, or an existing additional contact image.   # noqa: E501

        :param image: The image of this ContactInfoNew.  # noqa: E501
        :type: str
        """

        self._image = image

    @property
    def address(self):
        """Gets the address of this ContactInfoNew.  # noqa: E501

        The identifier for the user address to be used as address of this additional contact information   # noqa: E501

        :return: The address of this ContactInfoNew.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this ContactInfoNew.

        The identifier for the user address to be used as address of this additional contact information   # noqa: E501

        :param address: The address of this ContactInfoNew.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def hidden(self):
        """Gets the hidden of this ContactInfoNew.  # noqa: E501

        Whether this additional contact information should be hidden for other users   # noqa: E501

        :return: The hidden of this ContactInfoNew.  # noqa: E501
        :rtype: bool
        """
        return self._hidden

    @hidden.setter
    def hidden(self, hidden):
        """Sets the hidden of this ContactInfoNew.

        Whether this additional contact information should be hidden for other users   # noqa: E501

        :param hidden: The hidden of this ContactInfoNew.  # noqa: E501
        :type: bool
        """

        self._hidden = hidden

    @property
    def custom_values(self):
        """Gets the custom_values of this ContactInfoNew.  # noqa: E501

        Holds the custom field values, keyed by field internal name or id. The format of the value depends on the custom field type. Example: `{..., \"customValues\": {\"gender\": \"male\", \"birthDate\": \"1980-10-27\"}}`   # noqa: E501

        :return: The custom_values of this ContactInfoNew.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._custom_values

    @custom_values.setter
    def custom_values(self, custom_values):
        """Sets the custom_values of this ContactInfoNew.

        Holds the custom field values, keyed by field internal name or id. The format of the value depends on the custom field type. Example: `{..., \"customValues\": {\"gender\": \"male\", \"birthDate\": \"1980-10-27\"}}`   # noqa: E501

        :param custom_values: The custom_values of this ContactInfoNew.  # noqa: E501
        :type: dict(str, str)
        """

        self._custom_values = custom_values

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ContactInfoNew, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ContactInfoNew):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ContactInfoNew):
            return True

        return self.to_dict() != other.to_dict()
