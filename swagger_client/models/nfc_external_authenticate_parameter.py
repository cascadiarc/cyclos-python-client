# coding: utf-8

"""
    Cyclos 4.11.5 API

    The REST API for Cyclos 4.11.5  # noqa: E501

    OpenAPI spec version: 4.11.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class NfcExternalAuthenticateParameter(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'key': 'NfcTagKeyEnum',
        'tag_challenge': 'str',
        'user': 'str',
        'group': 'str',
        'as_member': 'bool'
    }

    attribute_map = {
        'key': 'key',
        'tag_challenge': 'tagChallenge',
        'user': 'user',
        'group': 'group',
        'as_member': 'asMember'
    }

    def __init__(self, key=None, tag_challenge=None, user=None, group=None, as_member=None, _configuration=None):  # noqa: E501
        """NfcExternalAuthenticateParameter - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._key = None
        self._tag_challenge = None
        self._user = None
        self._group = None
        self._as_member = None
        self.discriminator = None

        if key is not None:
            self.key = key
        if tag_challenge is not None:
            self.tag_challenge = tag_challenge
        if user is not None:
            self.user = user
        if group is not None:
            self.group = group
        if as_member is not None:
            self.as_member = as_member

    @property
    def key(self):
        """Gets the key of this NfcExternalAuthenticateParameter.  # noqa: E501

        The NFC key over which the authentication is performed. Defaults to `operational`.         Possible values are: * appMaster: The application master key. Not used for now (it could be used for application management). * operational: A key stored within the application that is used to guarantee the presence of the card in sensitive operations, such as receive payment (POS) or personalize the tag * piccMaster: The PICC master key, used to format the tag   # noqa: E501

        :return: The key of this NfcExternalAuthenticateParameter.  # noqa: E501
        :rtype: NfcTagKeyEnum
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this NfcExternalAuthenticateParameter.

        The NFC key over which the authentication is performed. Defaults to `operational`.         Possible values are: * appMaster: The application master key. Not used for now (it could be used for application management). * operational: A key stored within the application that is used to guarantee the presence of the card in sensitive operations, such as receive payment (POS) or personalize the tag * piccMaster: The PICC master key, used to format the tag   # noqa: E501

        :param key: The key of this NfcExternalAuthenticateParameter.  # noqa: E501
        :type: NfcTagKeyEnum
        """

        self._key = key

    @property
    def tag_challenge(self):
        """Gets the tag_challenge of this NfcExternalAuthenticateParameter.  # noqa: E501

        The challenge generated by the NFC tag, encoded as hex  # noqa: E501

        :return: The tag_challenge of this NfcExternalAuthenticateParameter.  # noqa: E501
        :rtype: str
        """
        return self._tag_challenge

    @tag_challenge.setter
    def tag_challenge(self, tag_challenge):
        """Sets the tag_challenge of this NfcExternalAuthenticateParameter.

        The challenge generated by the NFC tag, encoded as hex  # noqa: E501

        :param tag_challenge: The tag_challenge of this NfcExternalAuthenticateParameter.  # noqa: E501
        :type: str
        """

        self._tag_challenge = tag_challenge

    @property
    def user(self):
        """Gets the user of this NfcExternalAuthenticateParameter.  # noqa: E501

        If informed then it means we are requesting for external authentication  to personalize a tag for that user, also the `group` property will be  ignored.   # noqa: E501

        :return: The user of this NfcExternalAuthenticateParameter.  # noqa: E501
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this NfcExternalAuthenticateParameter.

        If informed then it means we are requesting for external authentication  to personalize a tag for that user, also the `group` property will be  ignored.   # noqa: E501

        :param user: The user of this NfcExternalAuthenticateParameter.  # noqa: E501
        :type: str
        """

        self._user = user

    @property
    def group(self):
        """Gets the group of this NfcExternalAuthenticateParameter.  # noqa: E501

        In case of registering a user and personalizing a tag at the same time we need to inform the group in which the user is registering.  # noqa: E501

        :return: The group of this NfcExternalAuthenticateParameter.  # noqa: E501
        :rtype: str
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this NfcExternalAuthenticateParameter.

        In case of registering a user and personalizing a tag at the same time we need to inform the group in which the user is registering.  # noqa: E501

        :param group: The group of this NfcExternalAuthenticateParameter.  # noqa: E501
        :type: str
        """

        self._group = group

    @property
    def as_member(self):
        """Gets the as_member of this NfcExternalAuthenticateParameter.  # noqa: E501

        Only valid if the logged user is a broker, for that case we need to  distinguish if the user registration is as member or as broker.  This option must be specified in conjunction with the `group` property.   # noqa: E501

        :return: The as_member of this NfcExternalAuthenticateParameter.  # noqa: E501
        :rtype: bool
        """
        return self._as_member

    @as_member.setter
    def as_member(self, as_member):
        """Sets the as_member of this NfcExternalAuthenticateParameter.

        Only valid if the logged user is a broker, for that case we need to  distinguish if the user registration is as member or as broker.  This option must be specified in conjunction with the `group` property.   # noqa: E501

        :param as_member: The as_member of this NfcExternalAuthenticateParameter.  # noqa: E501
        :type: bool
        """

        self._as_member = as_member

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NfcExternalAuthenticateParameter, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NfcExternalAuthenticateParameter):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, NfcExternalAuthenticateParameter):
            return True

        return self.to_dict() != other.to_dict()
