# coding: utf-8

"""
    Cyclos 4.11.5 API

    The REST API for Cyclos 4.11.5  # noqa: E501

    OpenAPI spec version: 4.11.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class NfcTokenPermissions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'EntityReference',
        'initialize': 'bool',
        'personalize': 'bool',
        'personalize_as_member': 'bool'
    }

    attribute_map = {
        'type': 'type',
        'initialize': 'initialize',
        'personalize': 'personalize',
        'personalize_as_member': 'personalizeAsMember'
    }

    def __init__(self, type=None, initialize=None, personalize=None, personalize_as_member=None, _configuration=None):  # noqa: E501
        """NfcTokenPermissions - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._type = None
        self._initialize = None
        self._personalize = None
        self._personalize_as_member = None
        self.discriminator = None

        if type is not None:
            self.type = type
        if initialize is not None:
            self.initialize = initialize
        if personalize is not None:
            self.personalize = personalize
        if personalize_as_member is not None:
            self.personalize_as_member = personalize_as_member

    @property
    def type(self):
        """Gets the type of this NfcTokenPermissions.  # noqa: E501

        The token type  # noqa: E501

        :return: The type of this NfcTokenPermissions.  # noqa: E501
        :rtype: EntityReference
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this NfcTokenPermissions.

        The token type  # noqa: E501

        :param type: The type of this NfcTokenPermissions.  # noqa: E501
        :type: EntityReference
        """

        self._type = type

    @property
    def initialize(self):
        """Gets the initialize of this NfcTokenPermissions.  # noqa: E501

        Can initialize tokens of this type?  # noqa: E501

        :return: The initialize of this NfcTokenPermissions.  # noqa: E501
        :rtype: bool
        """
        return self._initialize

    @initialize.setter
    def initialize(self, initialize):
        """Sets the initialize of this NfcTokenPermissions.

        Can initialize tokens of this type?  # noqa: E501

        :param initialize: The initialize of this NfcTokenPermissions.  # noqa: E501
        :type: bool
        """

        self._initialize = initialize

    @property
    def personalize(self):
        """Gets the personalize of this NfcTokenPermissions.  # noqa: E501

        Can personalize tokens of this type?  # noqa: E501

        :return: The personalize of this NfcTokenPermissions.  # noqa: E501
        :rtype: bool
        """
        return self._personalize

    @personalize.setter
    def personalize(self, personalize):
        """Sets the personalize of this NfcTokenPermissions.

        Can personalize tokens of this type?  # noqa: E501

        :param personalize: The personalize of this NfcTokenPermissions.  # noqa: E501
        :type: bool
        """

        self._personalize = personalize

    @property
    def personalize_as_member(self):
        """Gets the personalize_as_member of this NfcTokenPermissions.  # noqa: E501

        Can personalize tokens of this type as member? Only send if the authenticated user is a broker.    # noqa: E501

        :return: The personalize_as_member of this NfcTokenPermissions.  # noqa: E501
        :rtype: bool
        """
        return self._personalize_as_member

    @personalize_as_member.setter
    def personalize_as_member(self, personalize_as_member):
        """Sets the personalize_as_member of this NfcTokenPermissions.

        Can personalize tokens of this type as member? Only send if the authenticated user is a broker.    # noqa: E501

        :param personalize_as_member: The personalize_as_member of this NfcTokenPermissions.  # noqa: E501
        :type: bool
        """

        self._personalize_as_member = personalize_as_member

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NfcTokenPermissions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NfcTokenPermissions):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, NfcTokenPermissions):
            return True

        return self.to_dict() != other.to_dict()
