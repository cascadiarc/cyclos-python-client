# coding: utf-8

"""
    Cyclos 4.11.5 API

    The REST API for Cyclos 4.11.5  # noqa: E501

    OpenAPI spec version: 4.11.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class TransactionPreview(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'confirmation_message': 'str',
        'confirmation_password_input': 'PasswordInput',
        'payment_type': 'TransferType',
        'currency': 'Currency',
        'from_account': 'AccountWithOwner',
        'total_amount': 'BigDecimal',
        'custom_values': 'list[CustomFieldValue]'
    }

    attribute_map = {
        'confirmation_message': 'confirmationMessage',
        'confirmation_password_input': 'confirmationPasswordInput',
        'payment_type': 'paymentType',
        'currency': 'currency',
        'from_account': 'fromAccount',
        'total_amount': 'totalAmount',
        'custom_values': 'customValues'
    }

    def __init__(self, confirmation_message=None, confirmation_password_input=None, payment_type=None, currency=None, from_account=None, total_amount=None, custom_values=None, _configuration=None):  # noqa: E501
        """TransactionPreview - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._confirmation_message = None
        self._confirmation_password_input = None
        self._payment_type = None
        self._currency = None
        self._from_account = None
        self._total_amount = None
        self._custom_values = None
        self.discriminator = None

        if confirmation_message is not None:
            self.confirmation_message = confirmation_message
        if confirmation_password_input is not None:
            self.confirmation_password_input = confirmation_password_input
        if payment_type is not None:
            self.payment_type = payment_type
        if currency is not None:
            self.currency = currency
        if from_account is not None:
            self.from_account = from_account
        if total_amount is not None:
            self.total_amount = total_amount
        if custom_values is not None:
            self.custom_values = custom_values

    @property
    def confirmation_message(self):
        """Gets the confirmation_message of this TransactionPreview.  # noqa: E501

        If configured in the payment type, is a message to be shown to the user before confirming the transaction   # noqa: E501

        :return: The confirmation_message of this TransactionPreview.  # noqa: E501
        :rtype: str
        """
        return self._confirmation_message

    @confirmation_message.setter
    def confirmation_message(self, confirmation_message):
        """Sets the confirmation_message of this TransactionPreview.

        If configured in the payment type, is a message to be shown to the user before confirming the transaction   # noqa: E501

        :param confirmation_message: The confirmation_message of this TransactionPreview.  # noqa: E501
        :type: str
        """

        self._confirmation_message = confirmation_message

    @property
    def confirmation_password_input(self):
        """Gets the confirmation_password_input of this TransactionPreview.  # noqa: E501

        If a confirmation password is used, contains the definitions on how to request that password from the user. This confirmation password is required when performing sensible actions. Sometimes this is dynamic, for example, the confirmation might be configured to be used only once per session, or operations like payments may have a limit per day to be without confirmation (pinless).   # noqa: E501

        :return: The confirmation_password_input of this TransactionPreview.  # noqa: E501
        :rtype: PasswordInput
        """
        return self._confirmation_password_input

    @confirmation_password_input.setter
    def confirmation_password_input(self, confirmation_password_input):
        """Sets the confirmation_password_input of this TransactionPreview.

        If a confirmation password is used, contains the definitions on how to request that password from the user. This confirmation password is required when performing sensible actions. Sometimes this is dynamic, for example, the confirmation might be configured to be used only once per session, or operations like payments may have a limit per day to be without confirmation (pinless).   # noqa: E501

        :param confirmation_password_input: The confirmation_password_input of this TransactionPreview.  # noqa: E501
        :type: PasswordInput
        """

        self._confirmation_password_input = confirmation_password_input

    @property
    def payment_type(self):
        """Gets the payment_type of this TransactionPreview.  # noqa: E501

        The payment type reference  # noqa: E501

        :return: The payment_type of this TransactionPreview.  # noqa: E501
        :rtype: TransferType
        """
        return self._payment_type

    @payment_type.setter
    def payment_type(self, payment_type):
        """Sets the payment_type of this TransactionPreview.

        The payment type reference  # noqa: E501

        :param payment_type: The payment_type of this TransactionPreview.  # noqa: E501
        :type: TransferType
        """

        self._payment_type = payment_type

    @property
    def currency(self):
        """Gets the currency of this TransactionPreview.  # noqa: E501

        The currency of the payment  # noqa: E501

        :return: The currency of this TransactionPreview.  # noqa: E501
        :rtype: Currency
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this TransactionPreview.

        The currency of the payment  # noqa: E501

        :param currency: The currency of this TransactionPreview.  # noqa: E501
        :type: Currency
        """

        self._currency = currency

    @property
    def from_account(self):
        """Gets the from_account of this TransactionPreview.  # noqa: E501

        A reference to the origin account  # noqa: E501

        :return: The from_account of this TransactionPreview.  # noqa: E501
        :rtype: AccountWithOwner
        """
        return self._from_account

    @from_account.setter
    def from_account(self, from_account):
        """Sets the from_account of this TransactionPreview.

        A reference to the origin account  # noqa: E501

        :param from_account: The from_account of this TransactionPreview.  # noqa: E501
        :type: AccountWithOwner
        """

        self._from_account = from_account

    @property
    def total_amount(self):
        """Gets the total_amount of this TransactionPreview.  # noqa: E501

        The final amount charged to the payer including fees.  # noqa: E501

        :return: The total_amount of this TransactionPreview.  # noqa: E501
        :rtype: BigDecimal
        """
        return self._total_amount

    @total_amount.setter
    def total_amount(self, total_amount):
        """Sets the total_amount of this TransactionPreview.

        The final amount charged to the payer including fees.  # noqa: E501

        :param total_amount: The total_amount of this TransactionPreview.  # noqa: E501
        :type: BigDecimal
        """

        self._total_amount = total_amount

    @property
    def custom_values(self):
        """Gets the custom_values of this TransactionPreview.  # noqa: E501

        The list of custom field values, in a detailed view  # noqa: E501

        :return: The custom_values of this TransactionPreview.  # noqa: E501
        :rtype: list[CustomFieldValue]
        """
        return self._custom_values

    @custom_values.setter
    def custom_values(self, custom_values):
        """Sets the custom_values of this TransactionPreview.

        The list of custom field values, in a detailed view  # noqa: E501

        :param custom_values: The custom_values of this TransactionPreview.  # noqa: E501
        :type: list[CustomFieldValue]
        """

        self._custom_values = custom_values

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TransactionPreview, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TransactionPreview):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TransactionPreview):
            return True

        return self.to_dict() != other.to_dict()
