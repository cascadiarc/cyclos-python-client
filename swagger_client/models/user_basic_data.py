# coding: utf-8

"""
    Cyclos 4.11.5 API

    The REST API for Cyclos 4.11.5  # noqa: E501

    OpenAPI spec version: 4.11.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class UserBasicData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'email_required': 'bool',
        'profile_field_actions': 'dict(str, ProfileFieldActions)',
        'custom_fields': 'list[UserCustomFieldDetailed]'
    }

    attribute_map = {
        'email_required': 'emailRequired',
        'profile_field_actions': 'profileFieldActions',
        'custom_fields': 'customFields'
    }

    def __init__(self, email_required=None, profile_field_actions=None, custom_fields=None, _configuration=None):  # noqa: E501
        """UserBasicData - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._email_required = None
        self._profile_field_actions = None
        self._custom_fields = None
        self.discriminator = None

        if email_required is not None:
            self.email_required = email_required
        if profile_field_actions is not None:
            self.profile_field_actions = profile_field_actions
        if custom_fields is not None:
            self.custom_fields = custom_fields

    @property
    def email_required(self):
        """Gets the email_required of this UserBasicData.  # noqa: E501

        Indicates whether the e-mail is required  # noqa: E501

        :return: The email_required of this UserBasicData.  # noqa: E501
        :rtype: bool
        """
        return self._email_required

    @email_required.setter
    def email_required(self, email_required):
        """Sets the email_required of this UserBasicData.

        Indicates whether the e-mail is required  # noqa: E501

        :param email_required: The email_required of this UserBasicData.  # noqa: E501
        :type: bool
        """

        self._email_required = email_required

    @property
    def profile_field_actions(self):
        """Gets the profile_field_actions of this UserBasicData.  # noqa: E501

        An object, keyed by profile field internal name (either one of the basic profile fields or custom fields), containing other objects that defines the allowed actions over these profile fields   # noqa: E501

        :return: The profile_field_actions of this UserBasicData.  # noqa: E501
        :rtype: dict(str, ProfileFieldActions)
        """
        return self._profile_field_actions

    @profile_field_actions.setter
    def profile_field_actions(self, profile_field_actions):
        """Sets the profile_field_actions of this UserBasicData.

        An object, keyed by profile field internal name (either one of the basic profile fields or custom fields), containing other objects that defines the allowed actions over these profile fields   # noqa: E501

        :param profile_field_actions: The profile_field_actions of this UserBasicData.  # noqa: E501
        :type: dict(str, ProfileFieldActions)
        """

        self._profile_field_actions = profile_field_actions

    @property
    def custom_fields(self):
        """Gets the custom_fields of this UserBasicData.  # noqa: E501

        The available custom field definitions  # noqa: E501

        :return: The custom_fields of this UserBasicData.  # noqa: E501
        :rtype: list[UserCustomFieldDetailed]
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this UserBasicData.

        The available custom field definitions  # noqa: E501

        :param custom_fields: The custom_fields of this UserBasicData.  # noqa: E501
        :type: list[UserCustomFieldDetailed]
        """

        self._custom_fields = custom_fields

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserBasicData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserBasicData):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UserBasicData):
            return True

        return self.to_dict() != other.to_dict()
