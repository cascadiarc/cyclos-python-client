# coding: utf-8

"""
    Cyclos 4.11.5 API

    The REST API for Cyclos 4.11.5  # noqa: E501

    OpenAPI spec version: 4.11.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class PhoneConfigurationForUserProfile(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'mobile_phone': 'PhoneNew',
        'land_line_phone': 'PhoneNew',
        'mobile_availability': 'AvailabilityEnum',
        'land_line_availability': 'AvailabilityEnum',
        'edit': 'bool',
        'manage_privacy': 'bool',
        'max_land_lines': 'int',
        'max_mobiles': 'int'
    }

    attribute_map = {
        'mobile_phone': 'mobilePhone',
        'land_line_phone': 'landLinePhone',
        'mobile_availability': 'mobileAvailability',
        'land_line_availability': 'landLineAvailability',
        'edit': 'edit',
        'manage_privacy': 'managePrivacy',
        'max_land_lines': 'maxLandLines',
        'max_mobiles': 'maxMobiles'
    }

    def __init__(self, mobile_phone=None, land_line_phone=None, mobile_availability=None, land_line_availability=None, edit=None, manage_privacy=None, max_land_lines=None, max_mobiles=None, _configuration=None):  # noqa: E501
        """PhoneConfigurationForUserProfile - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._mobile_phone = None
        self._land_line_phone = None
        self._mobile_availability = None
        self._land_line_availability = None
        self._edit = None
        self._manage_privacy = None
        self._max_land_lines = None
        self._max_mobiles = None
        self.discriminator = None

        if mobile_phone is not None:
            self.mobile_phone = mobile_phone
        if land_line_phone is not None:
            self.land_line_phone = land_line_phone
        if mobile_availability is not None:
            self.mobile_availability = mobile_availability
        if land_line_availability is not None:
            self.land_line_availability = land_line_availability
        if edit is not None:
            self.edit = edit
        if manage_privacy is not None:
            self.manage_privacy = manage_privacy
        if max_land_lines is not None:
            self.max_land_lines = max_land_lines
        if max_mobiles is not None:
            self.max_mobiles = max_mobiles

    @property
    def mobile_phone(self):
        """Gets the mobile_phone of this PhoneConfigurationForUserProfile.  # noqa: E501

        Contains a template with default values for a new mobile phone   # noqa: E501

        :return: The mobile_phone of this PhoneConfigurationForUserProfile.  # noqa: E501
        :rtype: PhoneNew
        """
        return self._mobile_phone

    @mobile_phone.setter
    def mobile_phone(self, mobile_phone):
        """Sets the mobile_phone of this PhoneConfigurationForUserProfile.

        Contains a template with default values for a new mobile phone   # noqa: E501

        :param mobile_phone: The mobile_phone of this PhoneConfigurationForUserProfile.  # noqa: E501
        :type: PhoneNew
        """

        self._mobile_phone = mobile_phone

    @property
    def land_line_phone(self):
        """Gets the land_line_phone of this PhoneConfigurationForUserProfile.  # noqa: E501

        Contains a template the default values for a new land-line phone   # noqa: E501

        :return: The land_line_phone of this PhoneConfigurationForUserProfile.  # noqa: E501
        :rtype: PhoneNew
        """
        return self._land_line_phone

    @land_line_phone.setter
    def land_line_phone(self, land_line_phone):
        """Sets the land_line_phone of this PhoneConfigurationForUserProfile.

        Contains a template the default values for a new land-line phone   # noqa: E501

        :param land_line_phone: The land_line_phone of this PhoneConfigurationForUserProfile.  # noqa: E501
        :type: PhoneNew
        """

        self._land_line_phone = land_line_phone

    @property
    def mobile_availability(self):
        """Gets the mobile_availability of this PhoneConfigurationForUserProfile.  # noqa: E501

        The availability for mobile phones Possible values are: * disabled: The data is disabled * optional: The data is enabled and optional * required: The data is enabled and required   # noqa: E501

        :return: The mobile_availability of this PhoneConfigurationForUserProfile.  # noqa: E501
        :rtype: AvailabilityEnum
        """
        return self._mobile_availability

    @mobile_availability.setter
    def mobile_availability(self, mobile_availability):
        """Sets the mobile_availability of this PhoneConfigurationForUserProfile.

        The availability for mobile phones Possible values are: * disabled: The data is disabled * optional: The data is enabled and optional * required: The data is enabled and required   # noqa: E501

        :param mobile_availability: The mobile_availability of this PhoneConfigurationForUserProfile.  # noqa: E501
        :type: AvailabilityEnum
        """

        self._mobile_availability = mobile_availability

    @property
    def land_line_availability(self):
        """Gets the land_line_availability of this PhoneConfigurationForUserProfile.  # noqa: E501

        The availability for land-line phones Possible values are: * disabled: The data is disabled * optional: The data is enabled and optional * required: The data is enabled and required   # noqa: E501

        :return: The land_line_availability of this PhoneConfigurationForUserProfile.  # noqa: E501
        :rtype: AvailabilityEnum
        """
        return self._land_line_availability

    @land_line_availability.setter
    def land_line_availability(self, land_line_availability):
        """Sets the land_line_availability of this PhoneConfigurationForUserProfile.

        The availability for land-line phones Possible values are: * disabled: The data is disabled * optional: The data is enabled and optional * required: The data is enabled and required   # noqa: E501

        :param land_line_availability: The land_line_availability of this PhoneConfigurationForUserProfile.  # noqa: E501
        :type: AvailabilityEnum
        """

        self._land_line_availability = land_line_availability

    @property
    def edit(self):
        """Gets the edit of this PhoneConfigurationForUserProfile.  # noqa: E501

        Can edit phones?  # noqa: E501

        :return: The edit of this PhoneConfigurationForUserProfile.  # noqa: E501
        :rtype: bool
        """
        return self._edit

    @edit.setter
    def edit(self, edit):
        """Sets the edit of this PhoneConfigurationForUserProfile.

        Can edit phones?  # noqa: E501

        :param edit: The edit of this PhoneConfigurationForUserProfile.  # noqa: E501
        :type: bool
        """

        self._edit = edit

    @property
    def manage_privacy(self):
        """Gets the manage_privacy of this PhoneConfigurationForUserProfile.  # noqa: E501

        Can manage the privacy of phones?  # noqa: E501

        :return: The manage_privacy of this PhoneConfigurationForUserProfile.  # noqa: E501
        :rtype: bool
        """
        return self._manage_privacy

    @manage_privacy.setter
    def manage_privacy(self, manage_privacy):
        """Sets the manage_privacy of this PhoneConfigurationForUserProfile.

        Can manage the privacy of phones?  # noqa: E501

        :param manage_privacy: The manage_privacy of this PhoneConfigurationForUserProfile.  # noqa: E501
        :type: bool
        """

        self._manage_privacy = manage_privacy

    @property
    def max_land_lines(self):
        """Gets the max_land_lines of this PhoneConfigurationForUserProfile.  # noqa: E501

        The maximum number of land-line phones the user can own  # noqa: E501

        :return: The max_land_lines of this PhoneConfigurationForUserProfile.  # noqa: E501
        :rtype: int
        """
        return self._max_land_lines

    @max_land_lines.setter
    def max_land_lines(self, max_land_lines):
        """Sets the max_land_lines of this PhoneConfigurationForUserProfile.

        The maximum number of land-line phones the user can own  # noqa: E501

        :param max_land_lines: The max_land_lines of this PhoneConfigurationForUserProfile.  # noqa: E501
        :type: int
        """

        self._max_land_lines = max_land_lines

    @property
    def max_mobiles(self):
        """Gets the max_mobiles of this PhoneConfigurationForUserProfile.  # noqa: E501

        The maximum number of mobile phones the user can own  # noqa: E501

        :return: The max_mobiles of this PhoneConfigurationForUserProfile.  # noqa: E501
        :rtype: int
        """
        return self._max_mobiles

    @max_mobiles.setter
    def max_mobiles(self, max_mobiles):
        """Sets the max_mobiles of this PhoneConfigurationForUserProfile.

        The maximum number of mobile phones the user can own  # noqa: E501

        :param max_mobiles: The max_mobiles of this PhoneConfigurationForUserProfile.  # noqa: E501
        :type: int
        """

        self._max_mobiles = max_mobiles

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PhoneConfigurationForUserProfile, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PhoneConfigurationForUserProfile):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PhoneConfigurationForUserProfile):
            return True

        return self.to_dict() != other.to_dict()
