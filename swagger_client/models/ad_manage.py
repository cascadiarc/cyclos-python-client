# coding: utf-8

"""
    Cyclos 4.11.5 API

    The REST API for Cyclos 4.11.5  # noqa: E501

    OpenAPI spec version: 4.11.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class AdManage(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'publication_period': 'DatePeriod',
        'categories': 'list[str]',
        'currency': 'str',
        'price': 'BigDecimal',
        'promotional_price': 'BigDecimal',
        'promotional_period': 'DatePeriod',
        'custom_values': 'dict(str, str)',
        'addresses': 'list[str]'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'publication_period': 'publicationPeriod',
        'categories': 'categories',
        'currency': 'currency',
        'price': 'price',
        'promotional_price': 'promotionalPrice',
        'promotional_period': 'promotionalPeriod',
        'custom_values': 'customValues',
        'addresses': 'addresses'
    }

    def __init__(self, name=None, description=None, publication_period=None, categories=None, currency=None, price=None, promotional_price=None, promotional_period=None, custom_values=None, addresses=None, _configuration=None):  # noqa: E501
        """AdManage - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._description = None
        self._publication_period = None
        self._categories = None
        self._currency = None
        self._price = None
        self._promotional_price = None
        self._promotional_period = None
        self._custom_values = None
        self._addresses = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if publication_period is not None:
            self.publication_period = publication_period
        if categories is not None:
            self.categories = categories
        if currency is not None:
            self.currency = currency
        if price is not None:
            self.price = price
        if promotional_price is not None:
            self.promotional_price = promotional_price
        if promotional_period is not None:
            self.promotional_period = promotional_period
        if custom_values is not None:
            self.custom_values = custom_values
        if addresses is not None:
            self.addresses = addresses

    @property
    def name(self):
        """Gets the name of this AdManage.  # noqa: E501

        The advertisement title  # noqa: E501

        :return: The name of this AdManage.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AdManage.

        The advertisement title  # noqa: E501

        :param name: The name of this AdManage.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this AdManage.  # noqa: E501

        The advertisement description content, formatted as HTML   # noqa: E501

        :return: The description of this AdManage.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AdManage.

        The advertisement description content, formatted as HTML   # noqa: E501

        :param description: The description of this AdManage.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def publication_period(self):
        """Gets the publication_period of this AdManage.  # noqa: E501

        The date period this advertisement is published  # noqa: E501

        :return: The publication_period of this AdManage.  # noqa: E501
        :rtype: DatePeriod
        """
        return self._publication_period

    @publication_period.setter
    def publication_period(self, publication_period):
        """Sets the publication_period of this AdManage.

        The date period this advertisement is published  # noqa: E501

        :param publication_period: The publication_period of this AdManage.  # noqa: E501
        :type: DatePeriod
        """

        self._publication_period = publication_period

    @property
    def categories(self):
        """Gets the categories of this AdManage.  # noqa: E501

        Either internal name or id of categories this advertisement belongs to. In most cases an advertisement will have a single category, but this depends on the Cyclos configuration.   # noqa: E501

        :return: The categories of this AdManage.  # noqa: E501
        :rtype: list[str]
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """Sets the categories of this AdManage.

        Either internal name or id of categories this advertisement belongs to. In most cases an advertisement will have a single category, but this depends on the Cyclos configuration.   # noqa: E501

        :param categories: The categories of this AdManage.  # noqa: E501
        :type: list[str]
        """

        self._categories = categories

    @property
    def currency(self):
        """Gets the currency of this AdManage.  # noqa: E501

        Either internal name or id of the advertisement's price currency   # noqa: E501

        :return: The currency of this AdManage.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this AdManage.

        Either internal name or id of the advertisement's price currency   # noqa: E501

        :param currency: The currency of this AdManage.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def price(self):
        """Gets the price of this AdManage.  # noqa: E501

        The regular price  # noqa: E501

        :return: The price of this AdManage.  # noqa: E501
        :rtype: BigDecimal
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this AdManage.

        The regular price  # noqa: E501

        :param price: The price of this AdManage.  # noqa: E501
        :type: BigDecimal
        """

        self._price = price

    @property
    def promotional_price(self):
        """Gets the promotional_price of this AdManage.  # noqa: E501

        The promotional price, if any  # noqa: E501

        :return: The promotional_price of this AdManage.  # noqa: E501
        :rtype: BigDecimal
        """
        return self._promotional_price

    @promotional_price.setter
    def promotional_price(self, promotional_price):
        """Sets the promotional_price of this AdManage.

        The promotional price, if any  # noqa: E501

        :param promotional_price: The promotional_price of this AdManage.  # noqa: E501
        :type: BigDecimal
        """

        self._promotional_price = promotional_price

    @property
    def promotional_period(self):
        """Gets the promotional_period of this AdManage.  # noqa: E501

        The promotional period, the one when `promotionalPrice` is valid   # noqa: E501

        :return: The promotional_period of this AdManage.  # noqa: E501
        :rtype: DatePeriod
        """
        return self._promotional_period

    @promotional_period.setter
    def promotional_period(self, promotional_period):
        """Sets the promotional_period of this AdManage.

        The promotional period, the one when `promotionalPrice` is valid   # noqa: E501

        :param promotional_period: The promotional_period of this AdManage.  # noqa: E501
        :type: DatePeriod
        """

        self._promotional_period = promotional_period

    @property
    def custom_values(self):
        """Gets the custom_values of this AdManage.  # noqa: E501

        Holds the custom field values, keyed by field internal name or id. The format of the value depends on the custom field type. Example: `{..., \"customValues\": {\"gender\": \"male\", \"birthDate\": \"1980-10-27\"}}`   # noqa: E501

        :return: The custom_values of this AdManage.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._custom_values

    @custom_values.setter
    def custom_values(self, custom_values):
        """Sets the custom_values of this AdManage.

        Holds the custom field values, keyed by field internal name or id. The format of the value depends on the custom field type. Example: `{..., \"customValues\": {\"gender\": \"male\", \"birthDate\": \"1980-10-27\"}}`   # noqa: E501

        :param custom_values: The custom_values of this AdManage.  # noqa: E501
        :type: dict(str, str)
        """

        self._custom_values = custom_values

    @property
    def addresses(self):
        """Gets the addresses of this AdManage.  # noqa: E501

        Ids of addresses (belogining to the advertisement owner) this  advertisement is available at.   # noqa: E501

        :return: The addresses of this AdManage.  # noqa: E501
        :rtype: list[str]
        """
        return self._addresses

    @addresses.setter
    def addresses(self, addresses):
        """Sets the addresses of this AdManage.

        Ids of addresses (belogining to the advertisement owner) this  advertisement is available at.   # noqa: E501

        :param addresses: The addresses of this AdManage.  # noqa: E501
        :type: list[str]
        """

        self._addresses = addresses

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AdManage, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AdManage):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AdManage):
            return True

        return self.to_dict() != other.to_dict()
