# coding: utf-8

"""
    Cyclos 4.11.5 API

    The REST API for Cyclos 4.11.5  # noqa: E501

    OpenAPI spec version: 4.11.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class SendPaymentRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'expiration_date': 'datetime',
        'scheduling': 'PaymentRequestSchedulingEnum',
        'first_installment_is_immediate': 'bool',
        'installments_count': 'int'
    }

    attribute_map = {
        'expiration_date': 'expirationDate',
        'scheduling': 'scheduling',
        'first_installment_is_immediate': 'firstInstallmentIsImmediate',
        'installments_count': 'installmentsCount'
    }

    def __init__(self, expiration_date=None, scheduling=None, first_installment_is_immediate=None, installments_count=None, _configuration=None):  # noqa: E501
        """SendPaymentRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._expiration_date = None
        self._scheduling = None
        self._first_installment_is_immediate = None
        self._installments_count = None
        self.discriminator = None

        if expiration_date is not None:
            self.expiration_date = expiration_date
        if scheduling is not None:
            self.scheduling = scheduling
        if first_installment_is_immediate is not None:
            self.first_installment_is_immediate = first_installment_is_immediate
        if installments_count is not None:
            self.installments_count = installments_count

    @property
    def expiration_date(self):
        """Gets the expiration_date of this SendPaymentRequest.  # noqa: E501

        The payment request expiration date. Required, unless the expiration date is configured in the payment type to be hidden from users.  # noqa: E501

        :return: The expiration_date of this SendPaymentRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._expiration_date

    @expiration_date.setter
    def expiration_date(self, expiration_date):
        """Sets the expiration_date of this SendPaymentRequest.

        The payment request expiration date. Required, unless the expiration date is configured in the payment type to be hidden from users.  # noqa: E501

        :param expiration_date: The expiration_date of this SendPaymentRequest.  # noqa: E501
        :type: datetime
        """

        self._expiration_date = expiration_date

    @property
    def scheduling(self):
        """Gets the scheduling of this SendPaymentRequest.  # noqa: E501

        Determines how a payment request is scheduled. When not specified, the payment request is processed directly. Possible values are: * direct: The scheduled payment won't be scheduled, but paid directly * scheduled: The scheduled payment will be scheduled, once accepting, triggering a given number of installments   # noqa: E501

        :return: The scheduling of this SendPaymentRequest.  # noqa: E501
        :rtype: PaymentRequestSchedulingEnum
        """
        return self._scheduling

    @scheduling.setter
    def scheduling(self, scheduling):
        """Sets the scheduling of this SendPaymentRequest.

        Determines how a payment request is scheduled. When not specified, the payment request is processed directly. Possible values are: * direct: The scheduled payment won't be scheduled, but paid directly * scheduled: The scheduled payment will be scheduled, once accepting, triggering a given number of installments   # noqa: E501

        :param scheduling: The scheduling of this SendPaymentRequest.  # noqa: E501
        :type: PaymentRequestSchedulingEnum
        """

        self._scheduling = scheduling

    @property
    def first_installment_is_immediate(self):
        """Gets the first_installment_is_immediate of this SendPaymentRequest.  # noqa: E501

        Indicates whether the first installment should be immediately processed once the scheduled payment is accepted. Used only if `scheduling` is `scheduled`. When not explicitly set to `false` will process the first installment immediately.   # noqa: E501

        :return: The first_installment_is_immediate of this SendPaymentRequest.  # noqa: E501
        :rtype: bool
        """
        return self._first_installment_is_immediate

    @first_installment_is_immediate.setter
    def first_installment_is_immediate(self, first_installment_is_immediate):
        """Sets the first_installment_is_immediate of this SendPaymentRequest.

        Indicates whether the first installment should be immediately processed once the scheduled payment is accepted. Used only if `scheduling` is `scheduled`. When not explicitly set to `false` will process the first installment immediately.   # noqa: E501

        :param first_installment_is_immediate: The first_installment_is_immediate of this SendPaymentRequest.  # noqa: E501
        :type: bool
        """

        self._first_installment_is_immediate = first_installment_is_immediate

    @property
    def installments_count(self):
        """Gets the installments_count of this SendPaymentRequest.  # noqa: E501

        Represents the number of installments. When not specified, assumes a single installment. Used only if `scheduling` is `scheduled`.   # noqa: E501

        :return: The installments_count of this SendPaymentRequest.  # noqa: E501
        :rtype: int
        """
        return self._installments_count

    @installments_count.setter
    def installments_count(self, installments_count):
        """Sets the installments_count of this SendPaymentRequest.

        Represents the number of installments. When not specified, assumes a single installment. Used only if `scheduling` is `scheduled`.   # noqa: E501

        :param installments_count: The installments_count of this SendPaymentRequest.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                installments_count is not None and installments_count < 1):  # noqa: E501
            raise ValueError("Invalid value for `installments_count`, must be a value greater than or equal to `1`")  # noqa: E501

        self._installments_count = installments_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SendPaymentRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SendPaymentRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SendPaymentRequest):
            return True

        return self.to_dict() != other.to_dict()
