# coding: utf-8

"""
    Cyclos 4.11.5 API

    The REST API for Cyclos 4.11.5  # noqa: E501

    OpenAPI spec version: 4.11.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class RecordPermissions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'RecordType',
        'create': 'bool',
        'update': 'bool',
        'remove': 'bool',
        'single_id': 'str'
    }

    attribute_map = {
        'type': 'type',
        'create': 'create',
        'update': 'update',
        'remove': 'remove',
        'single_id': 'singleId'
    }

    def __init__(self, type=None, create=None, update=None, remove=None, single_id=None, _configuration=None):  # noqa: E501
        """RecordPermissions - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._type = None
        self._create = None
        self._update = None
        self._remove = None
        self._single_id = None
        self.discriminator = None

        if type is not None:
            self.type = type
        if create is not None:
            self.create = create
        if update is not None:
            self.update = update
        if remove is not None:
            self.remove = remove
        if single_id is not None:
            self.single_id = single_id

    @property
    def type(self):
        """Gets the type of this RecordPermissions.  # noqa: E501

        The record type  # noqa: E501

        :return: The type of this RecordPermissions.  # noqa: E501
        :rtype: RecordType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this RecordPermissions.

        The record type  # noqa: E501

        :param type: The type of this RecordPermissions.  # noqa: E501
        :type: RecordType
        """

        self._type = type

    @property
    def create(self):
        """Gets the create of this RecordPermissions.  # noqa: E501

        Can create records of this type?  # noqa: E501

        :return: The create of this RecordPermissions.  # noqa: E501
        :rtype: bool
        """
        return self._create

    @create.setter
    def create(self, create):
        """Sets the create of this RecordPermissions.

        Can create records of this type?  # noqa: E501

        :param create: The create of this RecordPermissions.  # noqa: E501
        :type: bool
        """

        self._create = create

    @property
    def update(self):
        """Gets the update of this RecordPermissions.  # noqa: E501

        Can update records of this type?  # noqa: E501

        :return: The update of this RecordPermissions.  # noqa: E501
        :rtype: bool
        """
        return self._update

    @update.setter
    def update(self, update):
        """Sets the update of this RecordPermissions.

        Can update records of this type?  # noqa: E501

        :param update: The update of this RecordPermissions.  # noqa: E501
        :type: bool
        """

        self._update = update

    @property
    def remove(self):
        """Gets the remove of this RecordPermissions.  # noqa: E501

        Can remove records of this type?  # noqa: E501

        :return: The remove of this RecordPermissions.  # noqa: E501
        :rtype: bool
        """
        return self._remove

    @remove.setter
    def remove(self, remove):
        """Sets the remove of this RecordPermissions.

        Can remove records of this type?  # noqa: E501

        :param remove: The remove of this RecordPermissions.  # noqa: E501
        :type: bool
        """

        self._remove = remove

    @property
    def single_id(self):
        """Gets the single_id of this RecordPermissions.  # noqa: E501

        If the record type `layout` is  `single` this property contains the identifier of the existing record (if any) of this type.     # noqa: E501

        :return: The single_id of this RecordPermissions.  # noqa: E501
        :rtype: str
        """
        return self._single_id

    @single_id.setter
    def single_id(self, single_id):
        """Sets the single_id of this RecordPermissions.

        If the record type `layout` is  `single` this property contains the identifier of the existing record (if any) of this type.     # noqa: E501

        :param single_id: The single_id of this RecordPermissions.  # noqa: E501
        :type: str
        """

        self._single_id = single_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RecordPermissions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RecordPermissions):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RecordPermissions):
            return True

        return self.to_dict() != other.to_dict()
