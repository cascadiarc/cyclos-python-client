# coding: utf-8

"""
    Cyclos 4.11.5 API

    The REST API for Cyclos 4.11.5  # noqa: E501

    OpenAPI spec version: 4.11.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class UserDataForNew(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'allow_set_send_activation_email': 'bool',
        'generated_username': 'bool',
        'address_configuration': 'AddressConfigurationForUserProfile',
        'phone_configuration': 'PhoneConfigurationForUserProfile',
        'contact_info_configuration': 'ContactInfoConfigurationForUserProfile',
        'image_configuration': 'ImageConfigurationForUserProfile',
        'password_types': 'list[PasswordTypeRegistration]',
        'captcha_type': 'CaptchaProviderEnum',
        'user': 'UserNew',
        'agreements': 'list[AgreementContent]',
        'security_questions': 'list[EntityReference]',
        'nfc_token_types': 'list[EntityReference]'
    }

    attribute_map = {
        'allow_set_send_activation_email': 'allowSetSendActivationEmail',
        'generated_username': 'generatedUsername',
        'address_configuration': 'addressConfiguration',
        'phone_configuration': 'phoneConfiguration',
        'contact_info_configuration': 'contactInfoConfiguration',
        'image_configuration': 'imageConfiguration',
        'password_types': 'passwordTypes',
        'captcha_type': 'captchaType',
        'user': 'user',
        'agreements': 'agreements',
        'security_questions': 'securityQuestions',
        'nfc_token_types': 'nfcTokenTypes'
    }

    def __init__(self, allow_set_send_activation_email=None, generated_username=None, address_configuration=None, phone_configuration=None, contact_info_configuration=None, image_configuration=None, password_types=None, captcha_type=None, user=None, agreements=None, security_questions=None, nfc_token_types=None, _configuration=None):  # noqa: E501
        """UserDataForNew - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._allow_set_send_activation_email = None
        self._generated_username = None
        self._address_configuration = None
        self._phone_configuration = None
        self._contact_info_configuration = None
        self._image_configuration = None
        self._password_types = None
        self._captcha_type = None
        self._user = None
        self._agreements = None
        self._security_questions = None
        self._nfc_token_types = None
        self.discriminator = None

        if allow_set_send_activation_email is not None:
            self.allow_set_send_activation_email = allow_set_send_activation_email
        if generated_username is not None:
            self.generated_username = generated_username
        if address_configuration is not None:
            self.address_configuration = address_configuration
        if phone_configuration is not None:
            self.phone_configuration = phone_configuration
        if contact_info_configuration is not None:
            self.contact_info_configuration = contact_info_configuration
        if image_configuration is not None:
            self.image_configuration = image_configuration
        if password_types is not None:
            self.password_types = password_types
        if captcha_type is not None:
            self.captcha_type = captcha_type
        if user is not None:
            self.user = user
        if agreements is not None:
            self.agreements = agreements
        if security_questions is not None:
            self.security_questions = security_questions
        if nfc_token_types is not None:
            self.nfc_token_types = nfc_token_types

    @property
    def allow_set_send_activation_email(self):
        """Gets the allow_set_send_activation_email of this UserDataForNew.  # noqa: E501

        Whether the current user is allowed to skip the activateion e-mail   # noqa: E501

        :return: The allow_set_send_activation_email of this UserDataForNew.  # noqa: E501
        :rtype: bool
        """
        return self._allow_set_send_activation_email

    @allow_set_send_activation_email.setter
    def allow_set_send_activation_email(self, allow_set_send_activation_email):
        """Sets the allow_set_send_activation_email of this UserDataForNew.

        Whether the current user is allowed to skip the activateion e-mail   # noqa: E501

        :param allow_set_send_activation_email: The allow_set_send_activation_email of this UserDataForNew.  # noqa: E501
        :type: bool
        """

        self._allow_set_send_activation_email = allow_set_send_activation_email

    @property
    def generated_username(self):
        """Gets the generated_username of this UserDataForNew.  # noqa: E501

        Indicates whether the login name is generated  # noqa: E501

        :return: The generated_username of this UserDataForNew.  # noqa: E501
        :rtype: bool
        """
        return self._generated_username

    @generated_username.setter
    def generated_username(self, generated_username):
        """Sets the generated_username of this UserDataForNew.

        Indicates whether the login name is generated  # noqa: E501

        :param generated_username: The generated_username of this UserDataForNew.  # noqa: E501
        :type: bool
        """

        self._generated_username = generated_username

    @property
    def address_configuration(self):
        """Gets the address_configuration of this UserDataForNew.  # noqa: E501

        Configuration for registering addresses  # noqa: E501

        :return: The address_configuration of this UserDataForNew.  # noqa: E501
        :rtype: AddressConfigurationForUserProfile
        """
        return self._address_configuration

    @address_configuration.setter
    def address_configuration(self, address_configuration):
        """Sets the address_configuration of this UserDataForNew.

        Configuration for registering addresses  # noqa: E501

        :param address_configuration: The address_configuration of this UserDataForNew.  # noqa: E501
        :type: AddressConfigurationForUserProfile
        """

        self._address_configuration = address_configuration

    @property
    def phone_configuration(self):
        """Gets the phone_configuration of this UserDataForNew.  # noqa: E501

        Configuration for registering phones  # noqa: E501

        :return: The phone_configuration of this UserDataForNew.  # noqa: E501
        :rtype: PhoneConfigurationForUserProfile
        """
        return self._phone_configuration

    @phone_configuration.setter
    def phone_configuration(self, phone_configuration):
        """Sets the phone_configuration of this UserDataForNew.

        Configuration for registering phones  # noqa: E501

        :param phone_configuration: The phone_configuration of this UserDataForNew.  # noqa: E501
        :type: PhoneConfigurationForUserProfile
        """

        self._phone_configuration = phone_configuration

    @property
    def contact_info_configuration(self):
        """Gets the contact_info_configuration of this UserDataForNew.  # noqa: E501

        Configuration for registering additional contacts  # noqa: E501

        :return: The contact_info_configuration of this UserDataForNew.  # noqa: E501
        :rtype: ContactInfoConfigurationForUserProfile
        """
        return self._contact_info_configuration

    @contact_info_configuration.setter
    def contact_info_configuration(self, contact_info_configuration):
        """Sets the contact_info_configuration of this UserDataForNew.

        Configuration for registering additional contacts  # noqa: E501

        :param contact_info_configuration: The contact_info_configuration of this UserDataForNew.  # noqa: E501
        :type: ContactInfoConfigurationForUserProfile
        """

        self._contact_info_configuration = contact_info_configuration

    @property
    def image_configuration(self):
        """Gets the image_configuration of this UserDataForNew.  # noqa: E501

        Configuration for uploading images  # noqa: E501

        :return: The image_configuration of this UserDataForNew.  # noqa: E501
        :rtype: ImageConfigurationForUserProfile
        """
        return self._image_configuration

    @image_configuration.setter
    def image_configuration(self, image_configuration):
        """Sets the image_configuration of this UserDataForNew.

        Configuration for uploading images  # noqa: E501

        :param image_configuration: The image_configuration of this UserDataForNew.  # noqa: E501
        :type: ImageConfigurationForUserProfile
        """

        self._image_configuration = image_configuration

    @property
    def password_types(self):
        """Gets the password_types of this UserDataForNew.  # noqa: E501

        The password types that should be registered together with the user   # noqa: E501

        :return: The password_types of this UserDataForNew.  # noqa: E501
        :rtype: list[PasswordTypeRegistration]
        """
        return self._password_types

    @password_types.setter
    def password_types(self, password_types):
        """Sets the password_types of this UserDataForNew.

        The password types that should be registered together with the user   # noqa: E501

        :param password_types: The password_types of this UserDataForNew.  # noqa: E501
        :type: list[PasswordTypeRegistration]
        """

        self._password_types = password_types

    @property
    def captcha_type(self):
        """Gets the captcha_type of this UserDataForNew.  # noqa: E501

        description: >   The captcha provider used to requested a captcha for registration,   or null if no captcha is needed. Possible values are: * internal: Default provider using images   # noqa: E501

        :return: The captcha_type of this UserDataForNew.  # noqa: E501
        :rtype: CaptchaProviderEnum
        """
        return self._captcha_type

    @captcha_type.setter
    def captcha_type(self, captcha_type):
        """Sets the captcha_type of this UserDataForNew.

        description: >   The captcha provider used to requested a captcha for registration,   or null if no captcha is needed. Possible values are: * internal: Default provider using images   # noqa: E501

        :param captcha_type: The captcha_type of this UserDataForNew.  # noqa: E501
        :type: CaptchaProviderEnum
        """

        self._captcha_type = captcha_type

    @property
    def user(self):
        """Gets the user of this UserDataForNew.  # noqa: E501

        The object that can be altered and posted back to register the user   # noqa: E501

        :return: The user of this UserDataForNew.  # noqa: E501
        :rtype: UserNew
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this UserDataForNew.

        The object that can be altered and posted back to register the user   # noqa: E501

        :param user: The user of this UserDataForNew.  # noqa: E501
        :type: UserNew
        """

        self._user = user

    @property
    def agreements(self):
        """Gets the agreements of this UserDataForNew.  # noqa: E501

        The agreements that needs to be accepted by the user to be able to register. Only returned for public registrations.   # noqa: E501

        :return: The agreements of this UserDataForNew.  # noqa: E501
        :rtype: list[AgreementContent]
        """
        return self._agreements

    @agreements.setter
    def agreements(self, agreements):
        """Sets the agreements of this UserDataForNew.

        The agreements that needs to be accepted by the user to be able to register. Only returned for public registrations.   # noqa: E501

        :param agreements: The agreements of this UserDataForNew.  # noqa: E501
        :type: list[AgreementContent]
        """

        self._agreements = agreements

    @property
    def security_questions(self):
        """Gets the security_questions of this UserDataForNew.  # noqa: E501

        If enabled in the server, are the possible security questions the user can use to set the answer.   # noqa: E501

        :return: The security_questions of this UserDataForNew.  # noqa: E501
        :rtype: list[EntityReference]
        """
        return self._security_questions

    @security_questions.setter
    def security_questions(self, security_questions):
        """Sets the security_questions of this UserDataForNew.

        If enabled in the server, are the possible security questions the user can use to set the answer.   # noqa: E501

        :param security_questions: The security_questions of this UserDataForNew.  # noqa: E501
        :type: list[EntityReference]
        """

        self._security_questions = security_questions

    @property
    def nfc_token_types(self):
        """Gets the nfc_token_types of this UserDataForNew.  # noqa: E501

        The NFC token types the authenticated user can parsonalize tags for the user being registered   # noqa: E501

        :return: The nfc_token_types of this UserDataForNew.  # noqa: E501
        :rtype: list[EntityReference]
        """
        return self._nfc_token_types

    @nfc_token_types.setter
    def nfc_token_types(self, nfc_token_types):
        """Sets the nfc_token_types of this UserDataForNew.

        The NFC token types the authenticated user can parsonalize tags for the user being registered   # noqa: E501

        :param nfc_token_types: The nfc_token_types of this UserDataForNew.  # noqa: E501
        :type: list[EntityReference]
        """

        self._nfc_token_types = nfc_token_types

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserDataForNew, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserDataForNew):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UserDataForNew):
            return True

        return self.to_dict() != other.to_dict()
