# coding: utf-8

"""
    Cyclos 4.11.5 API

    The REST API for Cyclos 4.11.5  # noqa: E501

    OpenAPI spec version: 4.11.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class AdQuestion(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'question': 'str',
        'question_date': 'datetime',
        'answer': 'str',
        'answer_date': 'datetime'
    }

    attribute_map = {
        'question': 'question',
        'question_date': 'questionDate',
        'answer': 'answer',
        'answer_date': 'answerDate'
    }

    def __init__(self, question=None, question_date=None, answer=None, answer_date=None, _configuration=None):  # noqa: E501
        """AdQuestion - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._question = None
        self._question_date = None
        self._answer = None
        self._answer_date = None
        self.discriminator = None

        if question is not None:
            self.question = question
        if question_date is not None:
            self.question_date = question_date
        if answer is not None:
            self.answer = answer
        if answer_date is not None:
            self.answer_date = answer_date

    @property
    def question(self):
        """Gets the question of this AdQuestion.  # noqa: E501

        The question text.  # noqa: E501

        :return: The question of this AdQuestion.  # noqa: E501
        :rtype: str
        """
        return self._question

    @question.setter
    def question(self, question):
        """Sets the question of this AdQuestion.

        The question text.  # noqa: E501

        :param question: The question of this AdQuestion.  # noqa: E501
        :type: str
        """

        self._question = question

    @property
    def question_date(self):
        """Gets the question_date of this AdQuestion.  # noqa: E501

        The question date and time.  # noqa: E501

        :return: The question_date of this AdQuestion.  # noqa: E501
        :rtype: datetime
        """
        return self._question_date

    @question_date.setter
    def question_date(self, question_date):
        """Sets the question_date of this AdQuestion.

        The question date and time.  # noqa: E501

        :param question_date: The question_date of this AdQuestion.  # noqa: E501
        :type: datetime
        """

        self._question_date = question_date

    @property
    def answer(self):
        """Gets the answer of this AdQuestion.  # noqa: E501

        The answer for the question (if any).  # noqa: E501

        :return: The answer of this AdQuestion.  # noqa: E501
        :rtype: str
        """
        return self._answer

    @answer.setter
    def answer(self, answer):
        """Sets the answer of this AdQuestion.

        The answer for the question (if any).  # noqa: E501

        :param answer: The answer of this AdQuestion.  # noqa: E501
        :type: str
        """

        self._answer = answer

    @property
    def answer_date(self):
        """Gets the answer_date of this AdQuestion.  # noqa: E501

        The answer date and time.  # noqa: E501

        :return: The answer_date of this AdQuestion.  # noqa: E501
        :rtype: datetime
        """
        return self._answer_date

    @answer_date.setter
    def answer_date(self, answer_date):
        """Sets the answer_date of this AdQuestion.

        The answer date and time.  # noqa: E501

        :param answer_date: The answer_date of this AdQuestion.  # noqa: E501
        :type: datetime
        """

        self._answer_date = answer_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AdQuestion, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AdQuestion):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AdQuestion):
            return True

        return self.to_dict() != other.to_dict()
