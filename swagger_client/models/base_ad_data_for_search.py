# coding: utf-8

"""
    Cyclos 4.11.5 API

    The REST API for Cyclos 4.11.5  # noqa: E501

    OpenAPI spec version: 4.11.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class BaseAdDataForSearch(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'visible_kinds': 'list[AdKind]',
        'categories': 'list[AdCategoryWithChildren]',
        'custom_fields': 'list[CustomFieldDetailed]',
        'fields_in_basic_search': 'list[str]',
        'fields_in_advanced_search': 'list[str]',
        'fields_in_list': 'list[str]',
        'basic_profile_fields': 'list[BasicProfileFieldInput]',
        'address_fields_in_search': 'list[AddressQueryFieldEnum]',
        'custom_profile_fields': 'list[CustomFieldDetailed]',
        'currencies': 'list[Currency]',
        'search_by_distance_data': 'SearchByDistanceData',
        'categories_display': 'AdCategoriesDisplayEnum'
    }

    attribute_map = {
        'visible_kinds': 'visibleKinds',
        'categories': 'categories',
        'custom_fields': 'customFields',
        'fields_in_basic_search': 'fieldsInBasicSearch',
        'fields_in_advanced_search': 'fieldsInAdvancedSearch',
        'fields_in_list': 'fieldsInList',
        'basic_profile_fields': 'basicProfileFields',
        'address_fields_in_search': 'addressFieldsInSearch',
        'custom_profile_fields': 'customProfileFields',
        'currencies': 'currencies',
        'search_by_distance_data': 'searchByDistanceData',
        'categories_display': 'categoriesDisplay'
    }

    def __init__(self, visible_kinds=None, categories=None, custom_fields=None, fields_in_basic_search=None, fields_in_advanced_search=None, fields_in_list=None, basic_profile_fields=None, address_fields_in_search=None, custom_profile_fields=None, currencies=None, search_by_distance_data=None, categories_display=None, _configuration=None):  # noqa: E501
        """BaseAdDataForSearch - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._visible_kinds = None
        self._categories = None
        self._custom_fields = None
        self._fields_in_basic_search = None
        self._fields_in_advanced_search = None
        self._fields_in_list = None
        self._basic_profile_fields = None
        self._address_fields_in_search = None
        self._custom_profile_fields = None
        self._currencies = None
        self._search_by_distance_data = None
        self._categories_display = None
        self.discriminator = None

        if visible_kinds is not None:
            self.visible_kinds = visible_kinds
        if categories is not None:
            self.categories = categories
        if custom_fields is not None:
            self.custom_fields = custom_fields
        if fields_in_basic_search is not None:
            self.fields_in_basic_search = fields_in_basic_search
        if fields_in_advanced_search is not None:
            self.fields_in_advanced_search = fields_in_advanced_search
        if fields_in_list is not None:
            self.fields_in_list = fields_in_list
        if basic_profile_fields is not None:
            self.basic_profile_fields = basic_profile_fields
        if address_fields_in_search is not None:
            self.address_fields_in_search = address_fields_in_search
        if custom_profile_fields is not None:
            self.custom_profile_fields = custom_profile_fields
        if currencies is not None:
            self.currencies = currencies
        if search_by_distance_data is not None:
            self.search_by_distance_data = search_by_distance_data
        if categories_display is not None:
            self.categories_display = categories_display

    @property
    def visible_kinds(self):
        """Gets the visible_kinds of this BaseAdDataForSearch.  # noqa: E501

        The advertisement kinds that can be searched by the authenticated user Possibles values for each array element are: * simple: A simple advertisement that can be viewed, but not directly bought * webshop: An advertisement that is part of an webshop. Can be bought, there is stock management, etc.   # noqa: E501

        :return: The visible_kinds of this BaseAdDataForSearch.  # noqa: E501
        :rtype: list[AdKind]
        """
        return self._visible_kinds

    @visible_kinds.setter
    def visible_kinds(self, visible_kinds):
        """Sets the visible_kinds of this BaseAdDataForSearch.

        The advertisement kinds that can be searched by the authenticated user Possibles values for each array element are: * simple: A simple advertisement that can be viewed, but not directly bought * webshop: An advertisement that is part of an webshop. Can be bought, there is stock management, etc.   # noqa: E501

        :param visible_kinds: The visible_kinds of this BaseAdDataForSearch.  # noqa: E501
        :type: list[AdKind]
        """

        self._visible_kinds = visible_kinds

    @property
    def categories(self):
        """Gets the categories of this BaseAdDataForSearch.  # noqa: E501

        The advertisement categories each with its children, forming a tree   # noqa: E501

        :return: The categories of this BaseAdDataForSearch.  # noqa: E501
        :rtype: list[AdCategoryWithChildren]
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """Sets the categories of this BaseAdDataForSearch.

        The advertisement categories each with its children, forming a tree   # noqa: E501

        :param categories: The categories of this BaseAdDataForSearch.  # noqa: E501
        :type: list[AdCategoryWithChildren]
        """

        self._categories = categories

    @property
    def custom_fields(self):
        """Gets the custom_fields of this BaseAdDataForSearch.  # noqa: E501

        The list of custom fields that are either to be used as search filter (if its internal name is present on either  `fieldsInBasicSearch` or `fieldsInAdvancedSearch`) and / or in the result list (if its internal name is present on `fieldsInList`).    # noqa: E501

        :return: The custom_fields of this BaseAdDataForSearch.  # noqa: E501
        :rtype: list[CustomFieldDetailed]
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this BaseAdDataForSearch.

        The list of custom fields that are either to be used as search filter (if its internal name is present on either  `fieldsInBasicSearch` or `fieldsInAdvancedSearch`) and / or in the result list (if its internal name is present on `fieldsInList`).    # noqa: E501

        :param custom_fields: The custom_fields of this BaseAdDataForSearch.  # noqa: E501
        :type: list[CustomFieldDetailed]
        """

        self._custom_fields = custom_fields

    @property
    def fields_in_basic_search(self):
        """Gets the fields_in_basic_search of this BaseAdDataForSearch.  # noqa: E501

        The internal names of the custom fields that should be used as search filters in the basic section (separated fields, not keywords)   # noqa: E501

        :return: The fields_in_basic_search of this BaseAdDataForSearch.  # noqa: E501
        :rtype: list[str]
        """
        return self._fields_in_basic_search

    @fields_in_basic_search.setter
    def fields_in_basic_search(self, fields_in_basic_search):
        """Sets the fields_in_basic_search of this BaseAdDataForSearch.

        The internal names of the custom fields that should be used as search filters in the basic section (separated fields, not keywords)   # noqa: E501

        :param fields_in_basic_search: The fields_in_basic_search of this BaseAdDataForSearch.  # noqa: E501
        :type: list[str]
        """

        self._fields_in_basic_search = fields_in_basic_search

    @property
    def fields_in_advanced_search(self):
        """Gets the fields_in_advanced_search of this BaseAdDataForSearch.  # noqa: E501

        The internal names of the custom fields that should be used as search filters in the advanced section (separated fields, not keywords)   # noqa: E501

        :return: The fields_in_advanced_search of this BaseAdDataForSearch.  # noqa: E501
        :rtype: list[str]
        """
        return self._fields_in_advanced_search

    @fields_in_advanced_search.setter
    def fields_in_advanced_search(self, fields_in_advanced_search):
        """Sets the fields_in_advanced_search of this BaseAdDataForSearch.

        The internal names of the custom fields that should be used as search filters in the advanced section (separated fields, not keywords)   # noqa: E501

        :param fields_in_advanced_search: The fields_in_advanced_search of this BaseAdDataForSearch.  # noqa: E501
        :type: list[str]
        """

        self._fields_in_advanced_search = fields_in_advanced_search

    @property
    def fields_in_list(self):
        """Gets the fields_in_list of this BaseAdDataForSearch.  # noqa: E501

        The internal names of the custom fields that will be returned together with each advertisement, and should be shown in the result list. This feature is planned, but not yet available.   # noqa: E501

        :return: The fields_in_list of this BaseAdDataForSearch.  # noqa: E501
        :rtype: list[str]
        """
        return self._fields_in_list

    @fields_in_list.setter
    def fields_in_list(self, fields_in_list):
        """Sets the fields_in_list of this BaseAdDataForSearch.

        The internal names of the custom fields that will be returned together with each advertisement, and should be shown in the result list. This feature is planned, but not yet available.   # noqa: E501

        :param fields_in_list: The fields_in_list of this BaseAdDataForSearch.  # noqa: E501
        :type: list[str]
        """

        self._fields_in_list = fields_in_list

    @property
    def basic_profile_fields(self):
        """Gets the basic_profile_fields of this BaseAdDataForSearch.  # noqa: E501

        The list of basic user profile fields that can be used as search filters. Only returned if searching user advertisements.   # noqa: E501

        :return: The basic_profile_fields of this BaseAdDataForSearch.  # noqa: E501
        :rtype: list[BasicProfileFieldInput]
        """
        return self._basic_profile_fields

    @basic_profile_fields.setter
    def basic_profile_fields(self, basic_profile_fields):
        """Sets the basic_profile_fields of this BaseAdDataForSearch.

        The list of basic user profile fields that can be used as search filters. Only returned if searching user advertisements.   # noqa: E501

        :param basic_profile_fields: The basic_profile_fields of this BaseAdDataForSearch.  # noqa: E501
        :type: list[BasicProfileFieldInput]
        """

        self._basic_profile_fields = basic_profile_fields

    @property
    def address_fields_in_search(self):
        """Gets the address_fields_in_search of this BaseAdDataForSearch.  # noqa: E501

        Fields which can be used when filtering by user address, by using the `address.<addressField>` name Possibles values for each array element are: * address: Filters by any field in the street address: `addressLine1`, `addressLine2`, `street`, `buildingNumber` or `complement`   * city: Filters by city name * country: Filters by country, represented as 2-letter, uppercase, ISO 3166-1 code (exact match) * neighborhood: Filters by neighborhood name  * poBox: Filters by post-office box (exact match) * region: Filters by region or state * zip: Filters by zip (postal) code (exact match)   # noqa: E501

        :return: The address_fields_in_search of this BaseAdDataForSearch.  # noqa: E501
        :rtype: list[AddressQueryFieldEnum]
        """
        return self._address_fields_in_search

    @address_fields_in_search.setter
    def address_fields_in_search(self, address_fields_in_search):
        """Sets the address_fields_in_search of this BaseAdDataForSearch.

        Fields which can be used when filtering by user address, by using the `address.<addressField>` name Possibles values for each array element are: * address: Filters by any field in the street address: `addressLine1`, `addressLine2`, `street`, `buildingNumber` or `complement`   * city: Filters by city name * country: Filters by country, represented as 2-letter, uppercase, ISO 3166-1 code (exact match) * neighborhood: Filters by neighborhood name  * poBox: Filters by post-office box (exact match) * region: Filters by region or state * zip: Filters by zip (postal) code (exact match)   # noqa: E501

        :param address_fields_in_search: The address_fields_in_search of this BaseAdDataForSearch.  # noqa: E501
        :type: list[AddressQueryFieldEnum]
        """

        self._address_fields_in_search = address_fields_in_search

    @property
    def custom_profile_fields(self):
        """Gets the custom_profile_fields of this BaseAdDataForSearch.  # noqa: E501

        The list of custom user profile fields that can be used as search filters. Only returned if searching user advertisements.   # noqa: E501

        :return: The custom_profile_fields of this BaseAdDataForSearch.  # noqa: E501
        :rtype: list[CustomFieldDetailed]
        """
        return self._custom_profile_fields

    @custom_profile_fields.setter
    def custom_profile_fields(self, custom_profile_fields):
        """Sets the custom_profile_fields of this BaseAdDataForSearch.

        The list of custom user profile fields that can be used as search filters. Only returned if searching user advertisements.   # noqa: E501

        :param custom_profile_fields: The custom_profile_fields of this BaseAdDataForSearch.  # noqa: E501
        :type: list[CustomFieldDetailed]
        """

        self._custom_profile_fields = custom_profile_fields

    @property
    def currencies(self):
        """Gets the currencies of this BaseAdDataForSearch.  # noqa: E501

        The currencies the authenticated user may use to filter by price    # noqa: E501

        :return: The currencies of this BaseAdDataForSearch.  # noqa: E501
        :rtype: list[Currency]
        """
        return self._currencies

    @currencies.setter
    def currencies(self, currencies):
        """Sets the currencies of this BaseAdDataForSearch.

        The currencies the authenticated user may use to filter by price    # noqa: E501

        :param currencies: The currencies of this BaseAdDataForSearch.  # noqa: E501
        :type: list[Currency]
        """

        self._currencies = currencies

    @property
    def search_by_distance_data(self):
        """Gets the search_by_distance_data of this BaseAdDataForSearch.  # noqa: E501

        Data for searching advertisements by distance  # noqa: E501

        :return: The search_by_distance_data of this BaseAdDataForSearch.  # noqa: E501
        :rtype: SearchByDistanceData
        """
        return self._search_by_distance_data

    @search_by_distance_data.setter
    def search_by_distance_data(self, search_by_distance_data):
        """Sets the search_by_distance_data of this BaseAdDataForSearch.

        Data for searching advertisements by distance  # noqa: E501

        :param search_by_distance_data: The search_by_distance_data of this BaseAdDataForSearch.  # noqa: E501
        :type: SearchByDistanceData
        """

        self._search_by_distance_data = search_by_distance_data

    @property
    def categories_display(self):
        """Gets the categories_display of this BaseAdDataForSearch.  # noqa: E501

        The category view configured for the logged user.  # noqa: E501

        :return: The categories_display of this BaseAdDataForSearch.  # noqa: E501
        :rtype: AdCategoriesDisplayEnum
        """
        return self._categories_display

    @categories_display.setter
    def categories_display(self, categories_display):
        """Sets the categories_display of this BaseAdDataForSearch.

        The category view configured for the logged user.  # noqa: E501

        :param categories_display: The categories_display of this BaseAdDataForSearch.  # noqa: E501
        :type: AdCategoriesDisplayEnum
        """

        self._categories_display = categories_display

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BaseAdDataForSearch, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BaseAdDataForSearch):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BaseAdDataForSearch):
            return True

        return self.to_dict() != other.to_dict()
