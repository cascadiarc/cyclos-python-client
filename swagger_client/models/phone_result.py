# coding: utf-8

"""
    Cyclos 4.11.5 API

    The REST API for Cyclos 4.11.5  # noqa: E501

    OpenAPI spec version: 4.11.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class PhoneResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'verified': 'bool',
        'enabled_for_sms': 'bool',
        'hidden': 'bool',
        'verification_code_send_date': 'datetime'
    }

    attribute_map = {
        'verified': 'verified',
        'enabled_for_sms': 'enabledForSms',
        'hidden': 'hidden',
        'verification_code_send_date': 'verificationCodeSendDate'
    }

    def __init__(self, verified=None, enabled_for_sms=None, hidden=None, verification_code_send_date=None, _configuration=None):  # noqa: E501
        """PhoneResult - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._verified = None
        self._enabled_for_sms = None
        self._hidden = None
        self._verification_code_send_date = None
        self.discriminator = None

        if verified is not None:
            self.verified = verified
        if enabled_for_sms is not None:
            self.enabled_for_sms = enabled_for_sms
        if hidden is not None:
            self.hidden = hidden
        if verification_code_send_date is not None:
            self.verification_code_send_date = verification_code_send_date

    @property
    def verified(self):
        """Gets the verified of this PhoneResult.  # noqa: E501

        Indicates whether this phone is verified. Is only returned if `kind` is `mobile` and the authenticated user manages the owner of this phone.   # noqa: E501

        :return: The verified of this PhoneResult.  # noqa: E501
        :rtype: bool
        """
        return self._verified

    @verified.setter
    def verified(self, verified):
        """Sets the verified of this PhoneResult.

        Indicates whether this phone is verified. Is only returned if `kind` is `mobile` and the authenticated user manages the owner of this phone.   # noqa: E501

        :param verified: The verified of this PhoneResult.  # noqa: E501
        :type: bool
        """

        self._verified = verified

    @property
    def enabled_for_sms(self):
        """Gets the enabled_for_sms of this PhoneResult.  # noqa: E501

        Indicates whether this phone is verified and enabled for SMS. Is only returned if `kind` is `mobile` and the authenticated user manages the owner of this phone.   # noqa: E501

        :return: The enabled_for_sms of this PhoneResult.  # noqa: E501
        :rtype: bool
        """
        return self._enabled_for_sms

    @enabled_for_sms.setter
    def enabled_for_sms(self, enabled_for_sms):
        """Sets the enabled_for_sms of this PhoneResult.

        Indicates whether this phone is verified and enabled for SMS. Is only returned if `kind` is `mobile` and the authenticated user manages the owner of this phone.   # noqa: E501

        :param enabled_for_sms: The enabled_for_sms of this PhoneResult.  # noqa: E501
        :type: bool
        """

        self._enabled_for_sms = enabled_for_sms

    @property
    def hidden(self):
        """Gets the hidden of this PhoneResult.  # noqa: E501

        Indicates whether this phone is hidden for other users. It always returns false if the authenticated user doesn't manage the owner of this phone.   # noqa: E501

        :return: The hidden of this PhoneResult.  # noqa: E501
        :rtype: bool
        """
        return self._hidden

    @hidden.setter
    def hidden(self, hidden):
        """Sets the hidden of this PhoneResult.

        Indicates whether this phone is hidden for other users. It always returns false if the authenticated user doesn't manage the owner of this phone.   # noqa: E501

        :param hidden: The hidden of this PhoneResult.  # noqa: E501
        :type: bool
        """

        self._hidden = hidden

    @property
    def verification_code_send_date(self):
        """Gets the verification_code_send_date of this PhoneResult.  # noqa: E501

        The date the verification code was sent, if any. Is only returned if `kind` is `mobile` and the authenticated user manages the owner of this phone.   # noqa: E501

        :return: The verification_code_send_date of this PhoneResult.  # noqa: E501
        :rtype: datetime
        """
        return self._verification_code_send_date

    @verification_code_send_date.setter
    def verification_code_send_date(self, verification_code_send_date):
        """Sets the verification_code_send_date of this PhoneResult.

        The date the verification code was sent, if any. Is only returned if `kind` is `mobile` and the authenticated user manages the owner of this phone.   # noqa: E501

        :param verification_code_send_date: The verification_code_send_date of this PhoneResult.  # noqa: E501
        :type: datetime
        """

        self._verification_code_send_date = verification_code_send_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PhoneResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PhoneResult):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PhoneResult):
            return True

        return self.to_dict() != other.to_dict()
