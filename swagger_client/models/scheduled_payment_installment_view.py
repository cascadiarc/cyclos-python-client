# coding: utf-8

"""
    Cyclos 4.11.5 API

    The REST API for Cyclos 4.11.5  # noqa: E501

    OpenAPI spec version: 4.11.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class ScheduledPaymentInstallmentView(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'by': 'User',
        'transfer_id': 'str',
        'transaction_number': 'str',
        'transfer_date': 'datetime',
        'can_process': 'bool',
        'can_settle': 'bool'
    }

    attribute_map = {
        'by': 'by',
        'transfer_id': 'transferId',
        'transaction_number': 'transactionNumber',
        'transfer_date': 'transferDate',
        'can_process': 'canProcess',
        'can_settle': 'canSettle'
    }

    def __init__(self, by=None, transfer_id=None, transaction_number=None, transfer_date=None, can_process=None, can_settle=None, _configuration=None):  # noqa: E501
        """ScheduledPaymentInstallmentView - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._by = None
        self._transfer_id = None
        self._transaction_number = None
        self._transfer_date = None
        self._can_process = None
        self._can_settle = None
        self.discriminator = None

        if by is not None:
            self.by = by
        if transfer_id is not None:
            self.transfer_id = transfer_id
        if transaction_number is not None:
            self.transaction_number = transaction_number
        if transfer_date is not None:
            self.transfer_date = transfer_date
        if can_process is not None:
            self.can_process = can_process
        if can_settle is not None:
            self.can_settle = can_settle

    @property
    def by(self):
        """Gets the by of this ScheduledPaymentInstallmentView.  # noqa: E501

        The user that performed an status change. For example, who manually paid, settled or canceled an open installment   # noqa: E501

        :return: The by of this ScheduledPaymentInstallmentView.  # noqa: E501
        :rtype: User
        """
        return self._by

    @by.setter
    def by(self, by):
        """Sets the by of this ScheduledPaymentInstallmentView.

        The user that performed an status change. For example, who manually paid, settled or canceled an open installment   # noqa: E501

        :param by: The by of this ScheduledPaymentInstallmentView.  # noqa: E501
        :type: User
        """

        self._by = by

    @property
    def transfer_id(self):
        """Gets the transfer_id of this ScheduledPaymentInstallmentView.  # noqa: E501

        Only if the installment was processed, contains the internal identifier of the generated transfer.   # noqa: E501

        :return: The transfer_id of this ScheduledPaymentInstallmentView.  # noqa: E501
        :rtype: str
        """
        return self._transfer_id

    @transfer_id.setter
    def transfer_id(self, transfer_id):
        """Sets the transfer_id of this ScheduledPaymentInstallmentView.

        Only if the installment was processed, contains the internal identifier of the generated transfer.   # noqa: E501

        :param transfer_id: The transfer_id of this ScheduledPaymentInstallmentView.  # noqa: E501
        :type: str
        """

        self._transfer_id = transfer_id

    @property
    def transaction_number(self):
        """Gets the transaction_number of this ScheduledPaymentInstallmentView.  # noqa: E501

        Only if the installment was processed, contains the transaction number of the generated transfer.   # noqa: E501

        :return: The transaction_number of this ScheduledPaymentInstallmentView.  # noqa: E501
        :rtype: str
        """
        return self._transaction_number

    @transaction_number.setter
    def transaction_number(self, transaction_number):
        """Sets the transaction_number of this ScheduledPaymentInstallmentView.

        Only if the installment was processed, contains the transaction number of the generated transfer.   # noqa: E501

        :param transaction_number: The transaction_number of this ScheduledPaymentInstallmentView.  # noqa: E501
        :type: str
        """

        self._transaction_number = transaction_number

    @property
    def transfer_date(self):
        """Gets the transfer_date of this ScheduledPaymentInstallmentView.  # noqa: E501

        The date the transfer was processed.  # noqa: E501

        :return: The transfer_date of this ScheduledPaymentInstallmentView.  # noqa: E501
        :rtype: datetime
        """
        return self._transfer_date

    @transfer_date.setter
    def transfer_date(self, transfer_date):
        """Sets the transfer_date of this ScheduledPaymentInstallmentView.

        The date the transfer was processed.  # noqa: E501

        :param transfer_date: The transfer_date of this ScheduledPaymentInstallmentView.  # noqa: E501
        :type: datetime
        """

        self._transfer_date = transfer_date

    @property
    def can_process(self):
        """Gets the can_process of this ScheduledPaymentInstallmentView.  # noqa: E501

        Can the authenticated user process this installment?  # noqa: E501

        :return: The can_process of this ScheduledPaymentInstallmentView.  # noqa: E501
        :rtype: bool
        """
        return self._can_process

    @can_process.setter
    def can_process(self, can_process):
        """Sets the can_process of this ScheduledPaymentInstallmentView.

        Can the authenticated user process this installment?  # noqa: E501

        :param can_process: The can_process of this ScheduledPaymentInstallmentView.  # noqa: E501
        :type: bool
        """

        self._can_process = can_process

    @property
    def can_settle(self):
        """Gets the can_settle of this ScheduledPaymentInstallmentView.  # noqa: E501

        Can the authenticated user settle this installment?  # noqa: E501

        :return: The can_settle of this ScheduledPaymentInstallmentView.  # noqa: E501
        :rtype: bool
        """
        return self._can_settle

    @can_settle.setter
    def can_settle(self, can_settle):
        """Sets the can_settle of this ScheduledPaymentInstallmentView.

        Can the authenticated user settle this installment?  # noqa: E501

        :param can_settle: The can_settle of this ScheduledPaymentInstallmentView.  # noqa: E501
        :type: bool
        """

        self._can_settle = can_settle

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ScheduledPaymentInstallmentView, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ScheduledPaymentInstallmentView):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ScheduledPaymentInstallmentView):
            return True

        return self.to_dict() != other.to_dict()
