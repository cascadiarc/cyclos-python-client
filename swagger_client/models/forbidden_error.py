# coding: utf-8

"""
    Cyclos 4.11.5 API

    The REST API for Cyclos 4.11.5  # noqa: E501

    OpenAPI spec version: 4.11.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class ForbiddenError(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'code': 'ForbiddenErrorCode',
        'password_type': 'EntityReference'
    }

    attribute_map = {
        'code': 'code',
        'password_type': 'passwordType'
    }

    def __init__(self, code=None, password_type=None, _configuration=None):  # noqa: E501
        """ForbiddenError - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._code = None
        self._password_type = None
        self.discriminator = None

        if code is not None:
            self.code = code
        if password_type is not None:
            self.password_type = password_type

    @property
    def code(self):
        """Gets the code of this ForbiddenError.  # noqa: E501

        Error codes for 403 Forbidden HTTP status.  Possible values are: * expiredPassword: The password being used has expired * illegalAction: Attempt to perform an action that is not allowed on this context * inaccessibleChannel: This channel cannot be accessed by the user  * inaccessiblePrincipal: The used identification method (principal type) cannot be used in this channel * indefinitelyBlocked: The password was indefinitely blocked by exceeding the allowed attempts  * invalidPassword: The password being used is invalid (normally the confirmation password) * operatorWithPendingAgreements: The operator cannot access because his owner member has pending agreements * pendingAgreements: There is at least one agreement which needs to be accepted in order to access the syste * permissionDenied: The operation was denied because a required permission was not granted * resetPassword: The password being used was manually reset * temporarilyBlocked: The password was temporarily blocked by exceeding the allowed attempts   # noqa: E501

        :return: The code of this ForbiddenError.  # noqa: E501
        :rtype: ForbiddenErrorCode
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this ForbiddenError.

        Error codes for 403 Forbidden HTTP status.  Possible values are: * expiredPassword: The password being used has expired * illegalAction: Attempt to perform an action that is not allowed on this context * inaccessibleChannel: This channel cannot be accessed by the user  * inaccessiblePrincipal: The used identification method (principal type) cannot be used in this channel * indefinitelyBlocked: The password was indefinitely blocked by exceeding the allowed attempts  * invalidPassword: The password being used is invalid (normally the confirmation password) * operatorWithPendingAgreements: The operator cannot access because his owner member has pending agreements * pendingAgreements: There is at least one agreement which needs to be accepted in order to access the syste * permissionDenied: The operation was denied because a required permission was not granted * resetPassword: The password being used was manually reset * temporarilyBlocked: The password was temporarily blocked by exceeding the allowed attempts   # noqa: E501

        :param code: The code of this ForbiddenError.  # noqa: E501
        :type: ForbiddenErrorCode
        """

        self._code = code

    @property
    def password_type(self):
        """Gets the password_type of this ForbiddenError.  # noqa: E501

        The password type of the failed password. Only sent if `code` is one of: - `invalidPassword` - `expiredPassword` - `temporarilyBlocked` - `indefinitelyBlocked`   # noqa: E501

        :return: The password_type of this ForbiddenError.  # noqa: E501
        :rtype: EntityReference
        """
        return self._password_type

    @password_type.setter
    def password_type(self, password_type):
        """Sets the password_type of this ForbiddenError.

        The password type of the failed password. Only sent if `code` is one of: - `invalidPassword` - `expiredPassword` - `temporarilyBlocked` - `indefinitelyBlocked`   # noqa: E501

        :param password_type: The password_type of this ForbiddenError.  # noqa: E501
        :type: EntityReference
        """

        self._password_type = password_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ForbiddenError, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ForbiddenError):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ForbiddenError):
            return True

        return self.to_dict() != other.to_dict()
