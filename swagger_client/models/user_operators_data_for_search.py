# coding: utf-8

"""
    Cyclos 4.11.5 API

    The REST API for Cyclos 4.11.5  # noqa: E501

    OpenAPI spec version: 4.11.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class UserOperatorsDataForSearch(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'can_create_new': 'bool',
        'groups': 'list[EntityReference]',
        'fields_in_list': 'list[str]',
        'basic_fields': 'list[BasicProfileFieldInput]',
        'custom_fields': 'list[CustomFieldDetailed]',
        'query': 'UserOperatorsQueryFilters'
    }

    attribute_map = {
        'can_create_new': 'canCreateNew',
        'groups': 'groups',
        'fields_in_list': 'fieldsInList',
        'basic_fields': 'basicFields',
        'custom_fields': 'customFields',
        'query': 'query'
    }

    def __init__(self, can_create_new=None, groups=None, fields_in_list=None, basic_fields=None, custom_fields=None, query=None, _configuration=None):  # noqa: E501
        """UserOperatorsDataForSearch - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._can_create_new = None
        self._groups = None
        self._fields_in_list = None
        self._basic_fields = None
        self._custom_fields = None
        self._query = None
        self.discriminator = None

        if can_create_new is not None:
            self.can_create_new = can_create_new
        if groups is not None:
            self.groups = groups
        if fields_in_list is not None:
            self.fields_in_list = fields_in_list
        if basic_fields is not None:
            self.basic_fields = basic_fields
        if custom_fields is not None:
            self.custom_fields = custom_fields
        if query is not None:
            self.query = query

    @property
    def can_create_new(self):
        """Gets the can_create_new of this UserOperatorsDataForSearch.  # noqa: E501

        Indicates whether the authenticated user can create more operators  for the specified user   # noqa: E501

        :return: The can_create_new of this UserOperatorsDataForSearch.  # noqa: E501
        :rtype: bool
        """
        return self._can_create_new

    @can_create_new.setter
    def can_create_new(self, can_create_new):
        """Sets the can_create_new of this UserOperatorsDataForSearch.

        Indicates whether the authenticated user can create more operators  for the specified user   # noqa: E501

        :param can_create_new: The can_create_new of this UserOperatorsDataForSearch.  # noqa: E501
        :type: bool
        """

        self._can_create_new = can_create_new

    @property
    def groups(self):
        """Gets the groups of this UserOperatorsDataForSearch.  # noqa: E501

        The operator groups this user owns  # noqa: E501

        :return: The groups of this UserOperatorsDataForSearch.  # noqa: E501
        :rtype: list[EntityReference]
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """Sets the groups of this UserOperatorsDataForSearch.

        The operator groups this user owns  # noqa: E501

        :param groups: The groups of this UserOperatorsDataForSearch.  # noqa: E501
        :type: list[EntityReference]
        """

        self._groups = groups

    @property
    def fields_in_list(self):
        """Gets the fields_in_list of this UserOperatorsDataForSearch.  # noqa: E501

        The internal names of either basic or custom profile fields that are configured to be shown on the list. This actually defines the fields that will be loaded on the result. It is possible that no fields are configured to be returned on list. In this case, the result objects will have the 'display' property loaded with what is configured to be the user formatting field(s).    # noqa: E501

        :return: The fields_in_list of this UserOperatorsDataForSearch.  # noqa: E501
        :rtype: list[str]
        """
        return self._fields_in_list

    @fields_in_list.setter
    def fields_in_list(self, fields_in_list):
        """Sets the fields_in_list of this UserOperatorsDataForSearch.

        The internal names of either basic or custom profile fields that are configured to be shown on the list. This actually defines the fields that will be loaded on the result. It is possible that no fields are configured to be returned on list. In this case, the result objects will have the 'display' property loaded with what is configured to be the user formatting field(s).    # noqa: E501

        :param fields_in_list: The fields_in_list of this UserOperatorsDataForSearch.  # noqa: E501
        :type: list[str]
        """

        self._fields_in_list = fields_in_list

    @property
    def basic_fields(self):
        """Gets the basic_fields of this UserOperatorsDataForSearch.  # noqa: E501

        The basic profile fields in the result list  # noqa: E501

        :return: The basic_fields of this UserOperatorsDataForSearch.  # noqa: E501
        :rtype: list[BasicProfileFieldInput]
        """
        return self._basic_fields

    @basic_fields.setter
    def basic_fields(self, basic_fields):
        """Sets the basic_fields of this UserOperatorsDataForSearch.

        The basic profile fields in the result list  # noqa: E501

        :param basic_fields: The basic_fields of this UserOperatorsDataForSearch.  # noqa: E501
        :type: list[BasicProfileFieldInput]
        """

        self._basic_fields = basic_fields

    @property
    def custom_fields(self):
        """Gets the custom_fields of this UserOperatorsDataForSearch.  # noqa: E501

        The custom profile fields in the result list  # noqa: E501

        :return: The custom_fields of this UserOperatorsDataForSearch.  # noqa: E501
        :rtype: list[CustomFieldDetailed]
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this UserOperatorsDataForSearch.

        The custom profile fields in the result list  # noqa: E501

        :param custom_fields: The custom_fields of this UserOperatorsDataForSearch.  # noqa: E501
        :type: list[CustomFieldDetailed]
        """

        self._custom_fields = custom_fields

    @property
    def query(self):
        """Gets the query of this UserOperatorsDataForSearch.  # noqa: E501

        Default query filters to search a user's operators   # noqa: E501

        :return: The query of this UserOperatorsDataForSearch.  # noqa: E501
        :rtype: UserOperatorsQueryFilters
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this UserOperatorsDataForSearch.

        Default query filters to search a user's operators   # noqa: E501

        :param query: The query of this UserOperatorsDataForSearch.  # noqa: E501
        :type: UserOperatorsQueryFilters
        """

        self._query = query

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserOperatorsDataForSearch, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserOperatorsDataForSearch):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UserOperatorsDataForSearch):
            return True

        return self.to_dict() != other.to_dict()
