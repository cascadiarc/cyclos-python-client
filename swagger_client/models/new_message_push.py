# coding: utf-8

"""
    Cyclos 4.11.5 API

    The REST API for Cyclos 4.11.5  # noqa: E501

    OpenAPI spec version: 4.11.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class NewMessagePush(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'message': 'IncomingMessage',
        'new_messages': 'int',
        'unread_messages': 'int'
    }

    attribute_map = {
        'message': 'message',
        'new_messages': 'newMessages',
        'unread_messages': 'unreadMessages'
    }

    def __init__(self, message=None, new_messages=None, unread_messages=None, _configuration=None):  # noqa: E501
        """NewMessagePush - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._message = None
        self._new_messages = None
        self._unread_messages = None
        self.discriminator = None

        if message is not None:
            self.message = message
        if new_messages is not None:
            self.new_messages = new_messages
        if unread_messages is not None:
            self.unread_messages = unread_messages

    @property
    def message(self):
        """Gets the message of this NewMessagePush.  # noqa: E501

        The message details  # noqa: E501

        :return: The message of this NewMessagePush.  # noqa: E501
        :rtype: IncomingMessage
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this NewMessagePush.

        The message details  # noqa: E501

        :param message: The message of this NewMessagePush.  # noqa: E501
        :type: IncomingMessage
        """

        self._message = message

    @property
    def new_messages(self):
        """Gets the new_messages of this NewMessagePush.  # noqa: E501

        The number of new messages since the last login  # noqa: E501

        :return: The new_messages of this NewMessagePush.  # noqa: E501
        :rtype: int
        """
        return self._new_messages

    @new_messages.setter
    def new_messages(self, new_messages):
        """Sets the new_messages of this NewMessagePush.

        The number of new messages since the last login  # noqa: E501

        :param new_messages: The new_messages of this NewMessagePush.  # noqa: E501
        :type: int
        """

        self._new_messages = new_messages

    @property
    def unread_messages(self):
        """Gets the unread_messages of this NewMessagePush.  # noqa: E501

        The current number of unread messages  # noqa: E501

        :return: The unread_messages of this NewMessagePush.  # noqa: E501
        :rtype: int
        """
        return self._unread_messages

    @unread_messages.setter
    def unread_messages(self, unread_messages):
        """Sets the unread_messages of this NewMessagePush.

        The current number of unread messages  # noqa: E501

        :param unread_messages: The unread_messages of this NewMessagePush.  # noqa: E501
        :type: int
        """

        self._unread_messages = unread_messages

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NewMessagePush, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NewMessagePush):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, NewMessagePush):
            return True

        return self.to_dict() != other.to_dict()
