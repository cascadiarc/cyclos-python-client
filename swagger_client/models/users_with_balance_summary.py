# coding: utf-8

"""
    Cyclos 4.11.5 API

    The REST API for Cyclos 4.11.5  # noqa: E501

    OpenAPI spec version: 4.11.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class UsersWithBalanceSummary(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'low': 'AmountSummary',
        'medium': 'AmountSummary',
        'high': 'AmountSummary',
        'total': 'AmountSummary'
    }

    attribute_map = {
        'low': 'low',
        'medium': 'medium',
        'high': 'high',
        'total': 'total'
    }

    def __init__(self, low=None, medium=None, high=None, total=None, _configuration=None):  # noqa: E501
        """UsersWithBalanceSummary - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._low = None
        self._medium = None
        self._high = None
        self._total = None
        self.discriminator = None

        if low is not None:
            self.low = low
        if medium is not None:
            self.medium = medium
        if high is not None:
            self.high = high
        if total is not None:
            self.total = total

    @property
    def low(self):
        """Gets the low of this UsersWithBalanceSummary.  # noqa: E501

        Summary of low balances. Is only returned when a medium balance range is defined, either in the account type or in the query parameters.    # noqa: E501

        :return: The low of this UsersWithBalanceSummary.  # noqa: E501
        :rtype: AmountSummary
        """
        return self._low

    @low.setter
    def low(self, low):
        """Sets the low of this UsersWithBalanceSummary.

        Summary of low balances. Is only returned when a medium balance range is defined, either in the account type or in the query parameters.    # noqa: E501

        :param low: The low of this UsersWithBalanceSummary.  # noqa: E501
        :type: AmountSummary
        """

        self._low = low

    @property
    def medium(self):
        """Gets the medium of this UsersWithBalanceSummary.  # noqa: E501

        Summary of medium balances. Is only returned when a medium balance range is defined, either in the account type or in the query parameters.    # noqa: E501

        :return: The medium of this UsersWithBalanceSummary.  # noqa: E501
        :rtype: AmountSummary
        """
        return self._medium

    @medium.setter
    def medium(self, medium):
        """Sets the medium of this UsersWithBalanceSummary.

        Summary of medium balances. Is only returned when a medium balance range is defined, either in the account type or in the query parameters.    # noqa: E501

        :param medium: The medium of this UsersWithBalanceSummary.  # noqa: E501
        :type: AmountSummary
        """

        self._medium = medium

    @property
    def high(self):
        """Gets the high of this UsersWithBalanceSummary.  # noqa: E501

        Summary of high balances. Is only returned when a medium balance range is defined, either in the account type or in the query parameters.    # noqa: E501

        :return: The high of this UsersWithBalanceSummary.  # noqa: E501
        :rtype: AmountSummary
        """
        return self._high

    @high.setter
    def high(self, high):
        """Sets the high of this UsersWithBalanceSummary.

        Summary of high balances. Is only returned when a medium balance range is defined, either in the account type or in the query parameters.    # noqa: E501

        :param high: The high of this UsersWithBalanceSummary.  # noqa: E501
        :type: AmountSummary
        """

        self._high = high

    @property
    def total(self):
        """Gets the total of this UsersWithBalanceSummary.  # noqa: E501

        Summary of all balances.    # noqa: E501

        :return: The total of this UsersWithBalanceSummary.  # noqa: E501
        :rtype: AmountSummary
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this UsersWithBalanceSummary.

        Summary of all balances.    # noqa: E501

        :param total: The total of this UsersWithBalanceSummary.  # noqa: E501
        :type: AmountSummary
        """

        self._total = total

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UsersWithBalanceSummary, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UsersWithBalanceSummary):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UsersWithBalanceSummary):
            return True

        return self.to_dict() != other.to_dict()
