# coding: utf-8

"""
    Cyclos 4.11.5 API

    The REST API for Cyclos 4.11.5  # noqa: E501

    OpenAPI spec version: 4.11.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class ScheduledPaymentInstallment(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'number': 'int',
        'due_date': 'datetime',
        'amount': 'BigDecimal',
        'status': 'ScheduledPaymentInstallmentStatusEnum'
    }

    attribute_map = {
        'number': 'number',
        'due_date': 'dueDate',
        'amount': 'amount',
        'status': 'status'
    }

    def __init__(self, number=None, due_date=None, amount=None, status=None, _configuration=None):  # noqa: E501
        """ScheduledPaymentInstallment - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._number = None
        self._due_date = None
        self._amount = None
        self._status = None
        self.discriminator = None

        if number is not None:
            self.number = number
        if due_date is not None:
            self.due_date = due_date
        if amount is not None:
            self.amount = amount
        if status is not None:
            self.status = status

    @property
    def number(self):
        """Gets the number of this ScheduledPaymentInstallment.  # noqa: E501

        The installment number.  # noqa: E501

        :return: The number of this ScheduledPaymentInstallment.  # noqa: E501
        :rtype: int
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this ScheduledPaymentInstallment.

        The installment number.  # noqa: E501

        :param number: The number of this ScheduledPaymentInstallment.  # noqa: E501
        :type: int
        """

        self._number = number

    @property
    def due_date(self):
        """Gets the due_date of this ScheduledPaymentInstallment.  # noqa: E501

        The installment due date.  # noqa: E501

        :return: The due_date of this ScheduledPaymentInstallment.  # noqa: E501
        :rtype: datetime
        """
        return self._due_date

    @due_date.setter
    def due_date(self, due_date):
        """Sets the due_date of this ScheduledPaymentInstallment.

        The installment due date.  # noqa: E501

        :param due_date: The due_date of this ScheduledPaymentInstallment.  # noqa: E501
        :type: datetime
        """

        self._due_date = due_date

    @property
    def amount(self):
        """Gets the amount of this ScheduledPaymentInstallment.  # noqa: E501

        The installment amount  # noqa: E501

        :return: The amount of this ScheduledPaymentInstallment.  # noqa: E501
        :rtype: BigDecimal
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this ScheduledPaymentInstallment.

        The installment amount  # noqa: E501

        :param amount: The amount of this ScheduledPaymentInstallment.  # noqa: E501
        :type: BigDecimal
        """

        self._amount = amount

    @property
    def status(self):
        """Gets the status of this ScheduledPaymentInstallment.  # noqa: E501

        The status of a scheduled payment installment Possible values are: * blocked: The installment is blocked, and won't be automatically processed on its due date * canceled: The installment was canceled * failed: The installment processing failed, for example, because there was no funds in the source account * processed: The installment was processed, generating a transfer * scheduled: The installment is scheduled for a future date * settled: The installment was marked as settled by the receiver   # noqa: E501

        :return: The status of this ScheduledPaymentInstallment.  # noqa: E501
        :rtype: ScheduledPaymentInstallmentStatusEnum
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ScheduledPaymentInstallment.

        The status of a scheduled payment installment Possible values are: * blocked: The installment is blocked, and won't be automatically processed on its due date * canceled: The installment was canceled * failed: The installment processing failed, for example, because there was no funds in the source account * processed: The installment was processed, generating a transfer * scheduled: The installment is scheduled for a future date * settled: The installment was marked as settled by the receiver   # noqa: E501

        :param status: The status of this ScheduledPaymentInstallment.  # noqa: E501
        :type: ScheduledPaymentInstallmentStatusEnum
        """

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ScheduledPaymentInstallment, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ScheduledPaymentInstallment):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ScheduledPaymentInstallment):
            return True

        return self.to_dict() != other.to_dict()
