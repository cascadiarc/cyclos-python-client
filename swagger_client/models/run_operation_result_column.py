# coding: utf-8

"""
    Cyclos 4.11.5 API

    The REST API for Cyclos 4.11.5  # noqa: E501

    OpenAPI spec version: 4.11.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class RunOperationResultColumn(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'header': 'str',
        '_property': 'str',
        'align': 'str',
        'valign': 'str',
        'width': 'str'
    }

    attribute_map = {
        'header': 'header',
        '_property': 'property',
        'align': 'align',
        'valign': 'valign',
        'width': 'width'
    }

    def __init__(self, header=None, _property=None, align=None, valign=None, width=None, _configuration=None):  # noqa: E501
        """RunOperationResultColumn - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._header = None
        self.__property = None
        self._align = None
        self._valign = None
        self._width = None
        self.discriminator = None

        if header is not None:
            self.header = header
        if _property is not None:
            self._property = _property
        if align is not None:
            self.align = align
        if valign is not None:
            self.valign = valign
        if width is not None:
            self.width = width

    @property
    def header(self):
        """Gets the header of this RunOperationResultColumn.  # noqa: E501

        The column header text  # noqa: E501

        :return: The header of this RunOperationResultColumn.  # noqa: E501
        :rtype: str
        """
        return self._header

    @header.setter
    def header(self, header):
        """Sets the header of this RunOperationResultColumn.

        The column header text  # noqa: E501

        :param header: The header of this RunOperationResultColumn.  # noqa: E501
        :type: str
        """

        self._header = header

    @property
    def _property(self):
        """Gets the _property of this RunOperationResultColumn.  # noqa: E501

        Contains the property name for each row element to access this column value.   # noqa: E501

        :return: The _property of this RunOperationResultColumn.  # noqa: E501
        :rtype: str
        """
        return self.__property

    @_property.setter
    def _property(self, _property):
        """Sets the _property of this RunOperationResultColumn.

        Contains the property name for each row element to access this column value.   # noqa: E501

        :param _property: The _property of this RunOperationResultColumn.  # noqa: E501
        :type: str
        """

        self.__property = _property

    @property
    def align(self):
        """Gets the align of this RunOperationResultColumn.  # noqa: E501

        The horizontal alignment. The actual values depend on the semantics of both the script result and the client application.   # noqa: E501

        :return: The align of this RunOperationResultColumn.  # noqa: E501
        :rtype: str
        """
        return self._align

    @align.setter
    def align(self, align):
        """Sets the align of this RunOperationResultColumn.

        The horizontal alignment. The actual values depend on the semantics of both the script result and the client application.   # noqa: E501

        :param align: The align of this RunOperationResultColumn.  # noqa: E501
        :type: str
        """

        self._align = align

    @property
    def valign(self):
        """Gets the valign of this RunOperationResultColumn.  # noqa: E501

        The vertical alignment. The actual values depend on the semantics of both the script result and the client application.   # noqa: E501

        :return: The valign of this RunOperationResultColumn.  # noqa: E501
        :rtype: str
        """
        return self._valign

    @valign.setter
    def valign(self, valign):
        """Sets the valign of this RunOperationResultColumn.

        The vertical alignment. The actual values depend on the semantics of both the script result and the client application.   # noqa: E501

        :param valign: The valign of this RunOperationResultColumn.  # noqa: E501
        :type: str
        """

        self._valign = valign

    @property
    def width(self):
        """Gets the width of this RunOperationResultColumn.  # noqa: E501

        The column width. The actual values depend on the semantics of both the script result and the client application.   # noqa: E501

        :return: The width of this RunOperationResultColumn.  # noqa: E501
        :rtype: str
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this RunOperationResultColumn.

        The column width. The actual values depend on the semantics of both the script result and the client application.   # noqa: E501

        :param width: The width of this RunOperationResultColumn.  # noqa: E501
        :type: str
        """

        self._width = width

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RunOperationResultColumn, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RunOperationResultColumn):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RunOperationResultColumn):
            return True

        return self.to_dict() != other.to_dict()
