# coding: utf-8

"""
    Cyclos 4.11.5 API

    The REST API for Cyclos 4.11.5  # noqa: E501

    OpenAPI spec version: 4.11.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class UserDataForMap(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'map_directory_field': 'str',
        'default_map_location': 'GeographicalCoordinate',
        'default_map_zoom_mobile': 'int',
        'default_map_zoom_web': 'int'
    }

    attribute_map = {
        'map_directory_field': 'mapDirectoryField',
        'default_map_location': 'defaultMapLocation',
        'default_map_zoom_mobile': 'defaultMapZoomMobile',
        'default_map_zoom_web': 'defaultMapZoomWeb'
    }

    def __init__(self, map_directory_field=None, default_map_location=None, default_map_zoom_mobile=None, default_map_zoom_web=None, _configuration=None):  # noqa: E501
        """UserDataForMap - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._map_directory_field = None
        self._default_map_location = None
        self._default_map_zoom_mobile = None
        self._default_map_zoom_web = None
        self.discriminator = None

        if map_directory_field is not None:
            self.map_directory_field = map_directory_field
        if default_map_location is not None:
            self.default_map_location = default_map_location
        if default_map_zoom_mobile is not None:
            self.default_map_zoom_mobile = default_map_zoom_mobile
        if default_map_zoom_web is not None:
            self.default_map_zoom_web = default_map_zoom_web

    @property
    def map_directory_field(self):
        """Gets the map_directory_field of this UserDataForMap.  # noqa: E501

        Internal name of the custom field currently set as primary search filter for the user directory (map) search. When not returned (null) it is assumed that keywords should be the primary filter.   # noqa: E501

        :return: The map_directory_field of this UserDataForMap.  # noqa: E501
        :rtype: str
        """
        return self._map_directory_field

    @map_directory_field.setter
    def map_directory_field(self, map_directory_field):
        """Sets the map_directory_field of this UserDataForMap.

        Internal name of the custom field currently set as primary search filter for the user directory (map) search. When not returned (null) it is assumed that keywords should be the primary filter.   # noqa: E501

        :param map_directory_field: The map_directory_field of this UserDataForMap.  # noqa: E501
        :type: str
        """

        self._map_directory_field = map_directory_field

    @property
    def default_map_location(self):
        """Gets the default_map_location of this UserDataForMap.  # noqa: E501

        The default location for the map to be displayed  # noqa: E501

        :return: The default_map_location of this UserDataForMap.  # noqa: E501
        :rtype: GeographicalCoordinate
        """
        return self._default_map_location

    @default_map_location.setter
    def default_map_location(self, default_map_location):
        """Sets the default_map_location of this UserDataForMap.

        The default location for the map to be displayed  # noqa: E501

        :param default_map_location: The default_map_location of this UserDataForMap.  # noqa: E501
        :type: GeographicalCoordinate
        """

        self._default_map_location = default_map_location

    @property
    def default_map_zoom_mobile(self):
        """Gets the default_map_zoom_mobile of this UserDataForMap.  # noqa: E501

        The default map zoom level for mobile applications  # noqa: E501

        :return: The default_map_zoom_mobile of this UserDataForMap.  # noqa: E501
        :rtype: int
        """
        return self._default_map_zoom_mobile

    @default_map_zoom_mobile.setter
    def default_map_zoom_mobile(self, default_map_zoom_mobile):
        """Sets the default_map_zoom_mobile of this UserDataForMap.

        The default map zoom level for mobile applications  # noqa: E501

        :param default_map_zoom_mobile: The default_map_zoom_mobile of this UserDataForMap.  # noqa: E501
        :type: int
        """

        self._default_map_zoom_mobile = default_map_zoom_mobile

    @property
    def default_map_zoom_web(self):
        """Gets the default_map_zoom_web of this UserDataForMap.  # noqa: E501

        The default map zoom level for web applications  # noqa: E501

        :return: The default_map_zoom_web of this UserDataForMap.  # noqa: E501
        :rtype: int
        """
        return self._default_map_zoom_web

    @default_map_zoom_web.setter
    def default_map_zoom_web(self, default_map_zoom_web):
        """Sets the default_map_zoom_web of this UserDataForMap.

        The default map zoom level for web applications  # noqa: E501

        :param default_map_zoom_web: The default_map_zoom_web of this UserDataForMap.  # noqa: E501
        :type: int
        """

        self._default_map_zoom_web = default_map_zoom_web

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserDataForMap, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserDataForMap):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UserDataForMap):
            return True

        return self.to_dict() != other.to_dict()
