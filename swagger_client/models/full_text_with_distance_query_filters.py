# coding: utf-8

"""
    Cyclos 4.11.5 API

    The REST API for Cyclos 4.11.5  # noqa: E501

    OpenAPI spec version: 4.11.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class FullTextWithDistanceQueryFilters(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'latitude': 'float',
        'longitude': 'float',
        'max_distance': 'float'
    }

    attribute_map = {
        'latitude': 'latitude',
        'longitude': 'longitude',
        'max_distance': 'maxDistance'
    }

    def __init__(self, latitude=None, longitude=None, max_distance=None, _configuration=None):  # noqa: E501
        """FullTextWithDistanceQueryFilters - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._latitude = None
        self._longitude = None
        self._max_distance = None
        self.discriminator = None

        if latitude is not None:
            self.latitude = latitude
        if longitude is not None:
            self.longitude = longitude
        if max_distance is not None:
            self.max_distance = max_distance

    @property
    def latitude(self):
        """Gets the latitude of this FullTextWithDistanceQueryFilters.  # noqa: E501

        The reference latitude for distance searches  # noqa: E501

        :return: The latitude of this FullTextWithDistanceQueryFilters.  # noqa: E501
        :rtype: float
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this FullTextWithDistanceQueryFilters.

        The reference latitude for distance searches  # noqa: E501

        :param latitude: The latitude of this FullTextWithDistanceQueryFilters.  # noqa: E501
        :type: float
        """

        self._latitude = latitude

    @property
    def longitude(self):
        """Gets the longitude of this FullTextWithDistanceQueryFilters.  # noqa: E501

        The reference longitude for distance searches  # noqa: E501

        :return: The longitude of this FullTextWithDistanceQueryFilters.  # noqa: E501
        :rtype: float
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this FullTextWithDistanceQueryFilters.

        The reference longitude for distance searches  # noqa: E501

        :param longitude: The longitude of this FullTextWithDistanceQueryFilters.  # noqa: E501
        :type: float
        """

        self._longitude = longitude

    @property
    def max_distance(self):
        """Gets the max_distance of this FullTextWithDistanceQueryFilters.  # noqa: E501

        Maximum straight-line distance between the informed location and the resulting address. Is measured either in kilometers or miles, depending on the configuration. Only accepted if both `longitude` and `latitude` parameters are passed with the actual reference position.   # noqa: E501

        :return: The max_distance of this FullTextWithDistanceQueryFilters.  # noqa: E501
        :rtype: float
        """
        return self._max_distance

    @max_distance.setter
    def max_distance(self, max_distance):
        """Sets the max_distance of this FullTextWithDistanceQueryFilters.

        Maximum straight-line distance between the informed location and the resulting address. Is measured either in kilometers or miles, depending on the configuration. Only accepted if both `longitude` and `latitude` parameters are passed with the actual reference position.   # noqa: E501

        :param max_distance: The max_distance of this FullTextWithDistanceQueryFilters.  # noqa: E501
        :type: float
        """

        self._max_distance = max_distance

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FullTextWithDistanceQueryFilters, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FullTextWithDistanceQueryFilters):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FullTextWithDistanceQueryFilters):
            return True

        return self.to_dict() != other.to_dict()
