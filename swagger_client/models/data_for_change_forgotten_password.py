# coding: utf-8

"""
    Cyclos 4.11.5 API

    The REST API for Cyclos 4.11.5  # noqa: E501

    OpenAPI spec version: 4.11.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class DataForChangeForgottenPassword(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'generated': 'bool',
        'security_question': 'str'
    }

    attribute_map = {
        'generated': 'generated',
        'security_question': 'securityQuestion'
    }

    def __init__(self, generated=None, security_question=None, _configuration=None):  # noqa: E501
        """DataForChangeForgottenPassword - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._generated = None
        self._security_question = None
        self.discriminator = None

        if generated is not None:
            self.generated = generated
        if security_question is not None:
            self.security_question = security_question

    @property
    def generated(self):
        """Gets the generated of this DataForChangeForgottenPassword.  # noqa: E501

        Indicates whether the password that is being affected is generated (when `true`) or manual (when `false`).   # noqa: E501

        :return: The generated of this DataForChangeForgottenPassword.  # noqa: E501
        :rtype: bool
        """
        return self._generated

    @generated.setter
    def generated(self, generated):
        """Sets the generated of this DataForChangeForgottenPassword.

        Indicates whether the password that is being affected is generated (when `true`) or manual (when `false`).   # noqa: E501

        :param generated: The generated of this DataForChangeForgottenPassword.  # noqa: E501
        :type: bool
        """

        self._generated = generated

    @property
    def security_question(self):
        """Gets the security_question of this DataForChangeForgottenPassword.  # noqa: E501

        If configured in Cyclos, and defined by the user, will be the security question that needs to be answered in order to complete the forgotten password reset request.   # noqa: E501

        :return: The security_question of this DataForChangeForgottenPassword.  # noqa: E501
        :rtype: str
        """
        return self._security_question

    @security_question.setter
    def security_question(self, security_question):
        """Sets the security_question of this DataForChangeForgottenPassword.

        If configured in Cyclos, and defined by the user, will be the security question that needs to be answered in order to complete the forgotten password reset request.   # noqa: E501

        :param security_question: The security_question of this DataForChangeForgottenPassword.  # noqa: E501
        :type: str
        """

        self._security_question = security_question

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DataForChangeForgottenPassword, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataForChangeForgottenPassword):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DataForChangeForgottenPassword):
            return True

        return self.to_dict() != other.to_dict()
