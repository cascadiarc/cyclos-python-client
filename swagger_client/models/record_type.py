# coding: utf-8

"""
    Cyclos 4.11.5 API

    The REST API for Cyclos 4.11.5  # noqa: E501

    OpenAPI spec version: 4.11.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class RecordType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'plural_name': 'str',
        'layout': 'RecordLayoutEnum',
        'use_view_page': 'bool'
    }

    attribute_map = {
        'plural_name': 'pluralName',
        'layout': 'layout',
        'use_view_page': 'useViewPage'
    }

    def __init__(self, plural_name=None, layout=None, use_view_page=None, _configuration=None):  # noqa: E501
        """RecordType - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._plural_name = None
        self._layout = None
        self._use_view_page = None
        self.discriminator = None

        if plural_name is not None:
            self.plural_name = plural_name
        if layout is not None:
            self.layout = layout
        if use_view_page is not None:
            self.use_view_page = use_view_page

    @property
    def plural_name(self):
        """Gets the plural_name of this RecordType.  # noqa: E501

        The name for the plural form  # noqa: E501

        :return: The plural_name of this RecordType.  # noqa: E501
        :rtype: str
        """
        return self._plural_name

    @plural_name.setter
    def plural_name(self, plural_name):
        """Sets the plural_name of this RecordType.

        The name for the plural form  # noqa: E501

        :param plural_name: The plural_name of this RecordType.  # noqa: E501
        :type: str
        """

        self._plural_name = plural_name

    @property
    def layout(self):
        """Gets the layout of this RecordType.  # noqa: E501

        The layout this record should be presented Possible values are: * list: Should show a regular search filters / list * single: There should be a single record, with the form directly * tiled: Should show the record list with a form to quickly add a new    # noqa: E501

        :return: The layout of this RecordType.  # noqa: E501
        :rtype: RecordLayoutEnum
        """
        return self._layout

    @layout.setter
    def layout(self, layout):
        """Sets the layout of this RecordType.

        The layout this record should be presented Possible values are: * list: Should show a regular search filters / list * single: There should be a single record, with the form directly * tiled: Should show the record list with a form to quickly add a new    # noqa: E501

        :param layout: The layout of this RecordType.  # noqa: E501
        :type: RecordLayoutEnum
        """

        self._layout = layout

    @property
    def use_view_page(self):
        """Gets the use_view_page of this RecordType.  # noqa: E501

        Whether the record type is set to use a separated view / edit page   # noqa: E501

        :return: The use_view_page of this RecordType.  # noqa: E501
        :rtype: bool
        """
        return self._use_view_page

    @use_view_page.setter
    def use_view_page(self, use_view_page):
        """Sets the use_view_page of this RecordType.

        Whether the record type is set to use a separated view / edit page   # noqa: E501

        :param use_view_page: The use_view_page of this RecordType.  # noqa: E501
        :type: bool
        """

        self._use_view_page = use_view_page

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RecordType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RecordType):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RecordType):
            return True

        return self.to_dict() != other.to_dict()
