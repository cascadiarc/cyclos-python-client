# coding: utf-8

"""
    Cyclos 4.11.5 API

    The REST API for Cyclos 4.11.5  # noqa: E501

    OpenAPI spec version: 4.11.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class UserClientTypePermissions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'can_manage': 'bool',
        'can_create_new': 'bool',
        'has_unassigned': 'bool'
    }

    attribute_map = {
        'can_manage': 'canManage',
        'can_create_new': 'canCreateNew',
        'has_unassigned': 'hasUnassigned'
    }

    def __init__(self, can_manage=None, can_create_new=None, has_unassigned=None, _configuration=None):  # noqa: E501
        """UserClientTypePermissions - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._can_manage = None
        self._can_create_new = None
        self._has_unassigned = None
        self.discriminator = None

        if can_manage is not None:
            self.can_manage = can_manage
        if can_create_new is not None:
            self.can_create_new = can_create_new
        if has_unassigned is not None:
            self.has_unassigned = has_unassigned

    @property
    def can_manage(self):
        """Gets the can_manage of this UserClientTypePermissions.  # noqa: E501

        Can the authenticated user manage access clients of this type?   # noqa: E501

        :return: The can_manage of this UserClientTypePermissions.  # noqa: E501
        :rtype: bool
        """
        return self._can_manage

    @can_manage.setter
    def can_manage(self, can_manage):
        """Sets the can_manage of this UserClientTypePermissions.

        Can the authenticated user manage access clients of this type?   # noqa: E501

        :param can_manage: The can_manage of this UserClientTypePermissions.  # noqa: E501
        :type: bool
        """

        self._can_manage = can_manage

    @property
    def can_create_new(self):
        """Gets the can_create_new of this UserClientTypePermissions.  # noqa: E501

        Can the authenticated user create a new access client of this type and user? Maybe the maximum allowed has been reached.   # noqa: E501

        :return: The can_create_new of this UserClientTypePermissions.  # noqa: E501
        :rtype: bool
        """
        return self._can_create_new

    @can_create_new.setter
    def can_create_new(self, can_create_new):
        """Sets the can_create_new of this UserClientTypePermissions.

        Can the authenticated user create a new access client of this type and user? Maybe the maximum allowed has been reached.   # noqa: E501

        :param can_create_new: The can_create_new of this UserClientTypePermissions.  # noqa: E501
        :type: bool
        """

        self._can_create_new = can_create_new

    @property
    def has_unassigned(self):
        """Gets the has_unassigned of this UserClientTypePermissions.  # noqa: E501

        Is there at least one access client for this type and user which is in the unassigned status?   # noqa: E501

        :return: The has_unassigned of this UserClientTypePermissions.  # noqa: E501
        :rtype: bool
        """
        return self._has_unassigned

    @has_unassigned.setter
    def has_unassigned(self, has_unassigned):
        """Sets the has_unassigned of this UserClientTypePermissions.

        Is there at least one access client for this type and user which is in the unassigned status?   # noqa: E501

        :param has_unassigned: The has_unassigned of this UserClientTypePermissions.  # noqa: E501
        :type: bool
        """

        self._has_unassigned = has_unassigned

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserClientTypePermissions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserClientTypePermissions):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UserClientTypePermissions):
            return True

        return self.to_dict() != other.to_dict()
