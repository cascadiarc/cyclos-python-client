# coding: utf-8

"""
    Cyclos 4.11.5 API

    The REST API for Cyclos 4.11.5  # noqa: E501

    OpenAPI spec version: 4.11.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class UserAdsDataForSearch(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'user': 'User',
        'create_new': 'bool',
        'max_ads': 'int',
        'requires_authorization': 'bool',
        'query': 'UserAdsQueryFilters'
    }

    attribute_map = {
        'user': 'user',
        'create_new': 'createNew',
        'max_ads': 'maxAds',
        'requires_authorization': 'requiresAuthorization',
        'query': 'query'
    }

    def __init__(self, user=None, create_new=None, max_ads=None, requires_authorization=None, query=None, _configuration=None):  # noqa: E501
        """UserAdsDataForSearch - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._user = None
        self._create_new = None
        self._max_ads = None
        self._requires_authorization = None
        self._query = None
        self.discriminator = None

        if user is not None:
            self.user = user
        if create_new is not None:
            self.create_new = create_new
        if max_ads is not None:
            self.max_ads = max_ads
        if requires_authorization is not None:
            self.requires_authorization = requires_authorization
        if query is not None:
            self.query = query

    @property
    def user(self):
        """Gets the user of this UserAdsDataForSearch.  # noqa: E501

        Reference to the user  # noqa: E501

        :return: The user of this UserAdsDataForSearch.  # noqa: E501
        :rtype: User
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this UserAdsDataForSearch.

        Reference to the user  # noqa: E501

        :param user: The user of this UserAdsDataForSearch.  # noqa: E501
        :type: User
        """

        self._user = user

    @property
    def create_new(self):
        """Gets the create_new of this UserAdsDataForSearch.  # noqa: E501

        Indicates whether the authenticated user can create new advertisements for this user  # noqa: E501

        :return: The create_new of this UserAdsDataForSearch.  # noqa: E501
        :rtype: bool
        """
        return self._create_new

    @create_new.setter
    def create_new(self, create_new):
        """Sets the create_new of this UserAdsDataForSearch.

        Indicates whether the authenticated user can create new advertisements for this user  # noqa: E501

        :param create_new: The create_new of this UserAdsDataForSearch.  # noqa: E501
        :type: bool
        """

        self._create_new = create_new

    @property
    def max_ads(self):
        """Gets the max_ads of this UserAdsDataForSearch.  # noqa: E501

        The maximum number of advertisements this user can have   # noqa: E501

        :return: The max_ads of this UserAdsDataForSearch.  # noqa: E501
        :rtype: int
        """
        return self._max_ads

    @max_ads.setter
    def max_ads(self, max_ads):
        """Sets the max_ads of this UserAdsDataForSearch.

        The maximum number of advertisements this user can have   # noqa: E501

        :param max_ads: The max_ads of this UserAdsDataForSearch.  # noqa: E501
        :type: int
        """

        self._max_ads = max_ads

    @property
    def requires_authorization(self):
        """Gets the requires_authorization of this UserAdsDataForSearch.  # noqa: E501

        Does advertisements of this user requires authorization to be  published for other users to see?   # noqa: E501

        :return: The requires_authorization of this UserAdsDataForSearch.  # noqa: E501
        :rtype: bool
        """
        return self._requires_authorization

    @requires_authorization.setter
    def requires_authorization(self, requires_authorization):
        """Sets the requires_authorization of this UserAdsDataForSearch.

        Does advertisements of this user requires authorization to be  published for other users to see?   # noqa: E501

        :param requires_authorization: The requires_authorization of this UserAdsDataForSearch.  # noqa: E501
        :type: bool
        """

        self._requires_authorization = requires_authorization

    @property
    def query(self):
        """Gets the query of this UserAdsDataForSearch.  # noqa: E501

        Default query filters to search advertisements of a specific user   # noqa: E501

        :return: The query of this UserAdsDataForSearch.  # noqa: E501
        :rtype: UserAdsQueryFilters
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this UserAdsDataForSearch.

        Default query filters to search advertisements of a specific user   # noqa: E501

        :param query: The query of this UserAdsDataForSearch.  # noqa: E501
        :type: UserAdsQueryFilters
        """

        self._query = query

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserAdsDataForSearch, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserAdsDataForSearch):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UserAdsDataForSearch):
            return True

        return self.to_dict() != other.to_dict()
