# coding: utf-8

"""
    Cyclos 4.11.5 API

    The REST API for Cyclos 4.11.5  # noqa: E501

    OpenAPI spec version: 4.11.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class BaseTransferQueryFilters(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'transfer_kinds': 'list[TransferKind]',
        'charged_back': 'bool',
        'statuses': 'list[str]',
        'order_by': 'AccountHistoryOrderByEnum'
    }

    attribute_map = {
        'transfer_kinds': 'transferKinds',
        'charged_back': 'chargedBack',
        'statuses': 'statuses',
        'order_by': 'orderBy'
    }

    def __init__(self, transfer_kinds=None, charged_back=None, statuses=None, order_by=None, _configuration=None):  # noqa: E501
        """BaseTransferQueryFilters - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._transfer_kinds = None
        self._charged_back = None
        self._statuses = None
        self._order_by = None
        self.discriminator = None

        if transfer_kinds is not None:
            self.transfer_kinds = transfer_kinds
        if charged_back is not None:
            self.charged_back = charged_back
        if statuses is not None:
            self.statuses = statuses
        if order_by is not None:
            self.order_by = order_by

    @property
    def transfer_kinds(self):
        """Gets the transfer_kinds of this BaseTransferQueryFilters.  # noqa: E501

        Indicates the reason the transfer was created Possibles values for each array element are: * accountFee: A transfer generated by an account fee charge * chargeback: A transfer which is a chargeback of another transfer * import: An imported transfer * initialCredit: A transfer which is the initial credit for a newly created account * payment: A transfer generated by a direct payment or accepting a webshop order * recurringPayment: A transfer generated when processing a recurring payment * scheduledPaymentInstallment: A transfer generated when processing a scheduled payment installment * transferFee: A transfer generated by a transfer fee charge   # noqa: E501

        :return: The transfer_kinds of this BaseTransferQueryFilters.  # noqa: E501
        :rtype: list[TransferKind]
        """
        return self._transfer_kinds

    @transfer_kinds.setter
    def transfer_kinds(self, transfer_kinds):
        """Sets the transfer_kinds of this BaseTransferQueryFilters.

        Indicates the reason the transfer was created Possibles values for each array element are: * accountFee: A transfer generated by an account fee charge * chargeback: A transfer which is a chargeback of another transfer * import: An imported transfer * initialCredit: A transfer which is the initial credit for a newly created account * payment: A transfer generated by a direct payment or accepting a webshop order * recurringPayment: A transfer generated when processing a recurring payment * scheduledPaymentInstallment: A transfer generated when processing a scheduled payment installment * transferFee: A transfer generated by a transfer fee charge   # noqa: E501

        :param transfer_kinds: The transfer_kinds of this BaseTransferQueryFilters.  # noqa: E501
        :type: list[TransferKind]
        """

        self._transfer_kinds = transfer_kinds

    @property
    def charged_back(self):
        """Gets the charged_back of this BaseTransferQueryFilters.  # noqa: E501

        When set to either `true` will only return transfers that were charged-back. When set to `false`, will only return transfers that were not charged-back. When left blank will not filter by this creterion.   # noqa: E501

        :return: The charged_back of this BaseTransferQueryFilters.  # noqa: E501
        :rtype: bool
        """
        return self._charged_back

    @charged_back.setter
    def charged_back(self, charged_back):
        """Sets the charged_back of this BaseTransferQueryFilters.

        When set to either `true` will only return transfers that were charged-back. When set to `false`, will only return transfers that were not charged-back. When left blank will not filter by this creterion.   # noqa: E501

        :param charged_back: The charged_back of this BaseTransferQueryFilters.  # noqa: E501
        :type: bool
        """

        self._charged_back = charged_back

    @property
    def statuses(self):
        """Gets the statuses of this BaseTransferQueryFilters.  # noqa: E501

        Transfer statuses used as search criteria. Each array element should be either the identifier or the status qualified internal name, composed by flow internal name, a dot, and the status internal name. For example, `loan.open` would be a valid internal name.   # noqa: E501

        :return: The statuses of this BaseTransferQueryFilters.  # noqa: E501
        :rtype: list[str]
        """
        return self._statuses

    @statuses.setter
    def statuses(self, statuses):
        """Sets the statuses of this BaseTransferQueryFilters.

        Transfer statuses used as search criteria. Each array element should be either the identifier or the status qualified internal name, composed by flow internal name, a dot, and the status internal name. For example, `loan.open` would be a valid internal name.   # noqa: E501

        :param statuses: The statuses of this BaseTransferQueryFilters.  # noqa: E501
        :type: list[str]
        """

        self._statuses = statuses

    @property
    def order_by(self):
        """Gets the order_by of this BaseTransferQueryFilters.  # noqa: E501

        Contains the possible 'order by' values when searching for transfers  Possible values are: * amountAsc: The result is ordered by amount descendant * amountDesc: The result is ordered by amount descendant * dateAsc: The result is ordered by date ascendant * dateDesc: The result is ordered by date descendant   # noqa: E501

        :return: The order_by of this BaseTransferQueryFilters.  # noqa: E501
        :rtype: AccountHistoryOrderByEnum
        """
        return self._order_by

    @order_by.setter
    def order_by(self, order_by):
        """Sets the order_by of this BaseTransferQueryFilters.

        Contains the possible 'order by' values when searching for transfers  Possible values are: * amountAsc: The result is ordered by amount descendant * amountDesc: The result is ordered by amount descendant * dateAsc: The result is ordered by date ascendant * dateDesc: The result is ordered by date descendant   # noqa: E501

        :param order_by: The order_by of this BaseTransferQueryFilters.  # noqa: E501
        :type: AccountHistoryOrderByEnum
        """

        self._order_by = order_by

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BaseTransferQueryFilters, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BaseTransferQueryFilters):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BaseTransferQueryFilters):
            return True

        return self.to_dict() != other.to_dict()
