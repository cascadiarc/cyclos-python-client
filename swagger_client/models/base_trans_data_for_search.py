# coding: utf-8

"""
    Cyclos 4.11.5 API

    The REST API for Cyclos 4.11.5  # noqa: E501

    OpenAPI spec version: 4.11.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class BaseTransDataForSearch(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'transfer_filters': 'list[TransferFilter]',
        'channels': 'list[EntityReference]',
        'groups': 'list[Group]',
        'access_clients': 'list[EntityReference]',
        'operators': 'list[User]',
        'preselected_periods': 'list[PreselectedPeriod]'
    }

    attribute_map = {
        'transfer_filters': 'transferFilters',
        'channels': 'channels',
        'groups': 'groups',
        'access_clients': 'accessClients',
        'operators': 'operators',
        'preselected_periods': 'preselectedPeriods'
    }

    def __init__(self, transfer_filters=None, channels=None, groups=None, access_clients=None, operators=None, preselected_periods=None, _configuration=None):  # noqa: E501
        """BaseTransDataForSearch - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._transfer_filters = None
        self._channels = None
        self._groups = None
        self._access_clients = None
        self._operators = None
        self._preselected_periods = None
        self.discriminator = None

        if transfer_filters is not None:
            self.transfer_filters = transfer_filters
        if channels is not None:
            self.channels = channels
        if groups is not None:
            self.groups = groups
        if access_clients is not None:
            self.access_clients = access_clients
        if operators is not None:
            self.operators = operators
        if preselected_periods is not None:
            self.preselected_periods = preselected_periods

    @property
    def transfer_filters(self):
        """Gets the transfer_filters of this BaseTransDataForSearch.  # noqa: E501

        References for transfer filters, which can be used to filter entries by transfer type   # noqa: E501

        :return: The transfer_filters of this BaseTransDataForSearch.  # noqa: E501
        :rtype: list[TransferFilter]
        """
        return self._transfer_filters

    @transfer_filters.setter
    def transfer_filters(self, transfer_filters):
        """Sets the transfer_filters of this BaseTransDataForSearch.

        References for transfer filters, which can be used to filter entries by transfer type   # noqa: E501

        :param transfer_filters: The transfer_filters of this BaseTransDataForSearch.  # noqa: E501
        :type: list[TransferFilter]
        """

        self._transfer_filters = transfer_filters

    @property
    def channels(self):
        """Gets the channels of this BaseTransDataForSearch.  # noqa: E501

        References for channels which can be used to filter entries by transfers generated on a specific channel. Is only returned if the authenticated user is an administrator.   # noqa: E501

        :return: The channels of this BaseTransDataForSearch.  # noqa: E501
        :rtype: list[EntityReference]
        """
        return self._channels

    @channels.setter
    def channels(self, channels):
        """Sets the channels of this BaseTransDataForSearch.

        References for channels which can be used to filter entries by transfers generated on a specific channel. Is only returned if the authenticated user is an administrator.   # noqa: E501

        :param channels: The channels of this BaseTransDataForSearch.  # noqa: E501
        :type: list[EntityReference]
        """

        self._channels = channels

    @property
    def groups(self):
        """Gets the groups of this BaseTransDataForSearch.  # noqa: E501

        Groups that can be used to filter entries, so that only transfers from or to users of those groups are returned on search. Is only returned if the authenticated user is an administrator.   # noqa: E501

        :return: The groups of this BaseTransDataForSearch.  # noqa: E501
        :rtype: list[Group]
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """Sets the groups of this BaseTransDataForSearch.

        Groups that can be used to filter entries, so that only transfers from or to users of those groups are returned on search. Is only returned if the authenticated user is an administrator.   # noqa: E501

        :param groups: The groups of this BaseTransDataForSearch.  # noqa: E501
        :type: list[Group]
        """

        self._groups = groups

    @property
    def access_clients(self):
        """Gets the access_clients of this BaseTransDataForSearch.  # noqa: E501

        References for access clients which can be used to filter entries by transfers generated by a specific access client    # noqa: E501

        :return: The access_clients of this BaseTransDataForSearch.  # noqa: E501
        :rtype: list[EntityReference]
        """
        return self._access_clients

    @access_clients.setter
    def access_clients(self, access_clients):
        """Sets the access_clients of this BaseTransDataForSearch.

        References for access clients which can be used to filter entries by transfers generated by a specific access client    # noqa: E501

        :param access_clients: The access_clients of this BaseTransDataForSearch.  # noqa: E501
        :type: list[EntityReference]
        """

        self._access_clients = access_clients

    @property
    def operators(self):
        """Gets the operators of this BaseTransDataForSearch.  # noqa: E501

        References for operators, which can be used to filter entries by transfers performed or received by that specific operator    # noqa: E501

        :return: The operators of this BaseTransDataForSearch.  # noqa: E501
        :rtype: list[User]
        """
        return self._operators

    @operators.setter
    def operators(self, operators):
        """Sets the operators of this BaseTransDataForSearch.

        References for operators, which can be used to filter entries by transfers performed or received by that specific operator    # noqa: E501

        :param operators: The operators of this BaseTransDataForSearch.  # noqa: E501
        :type: list[User]
        """

        self._operators = operators

    @property
    def preselected_periods(self):
        """Gets the preselected_periods of this BaseTransDataForSearch.  # noqa: E501

        Contains the pre-selected period filter ranges according to the Cyclos configuration     # noqa: E501

        :return: The preselected_periods of this BaseTransDataForSearch.  # noqa: E501
        :rtype: list[PreselectedPeriod]
        """
        return self._preselected_periods

    @preselected_periods.setter
    def preselected_periods(self, preselected_periods):
        """Sets the preselected_periods of this BaseTransDataForSearch.

        Contains the pre-selected period filter ranges according to the Cyclos configuration     # noqa: E501

        :param preselected_periods: The preselected_periods of this BaseTransDataForSearch.  # noqa: E501
        :type: list[PreselectedPeriod]
        """

        self._preselected_periods = preselected_periods

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BaseTransDataForSearch, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BaseTransDataForSearch):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BaseTransDataForSearch):
            return True

        return self.to_dict() != other.to_dict()
