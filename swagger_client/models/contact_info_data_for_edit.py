# coding: utf-8

"""
    Cyclos 4.11.5 API

    The REST API for Cyclos 4.11.5  # noqa: E501

    OpenAPI spec version: 4.11.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class ContactInfoDataForEdit(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'contact_info': 'ContactInfoEdit',
        'edit': 'bool',
        'remove': 'bool',
        'image': 'Image',
        'binary_values': 'CustomFieldBinaryValues'
    }

    attribute_map = {
        'contact_info': 'contactInfo',
        'edit': 'edit',
        'remove': 'remove',
        'image': 'image',
        'binary_values': 'binaryValues'
    }

    def __init__(self, contact_info=None, edit=None, remove=None, image=None, binary_values=None, _configuration=None):  # noqa: E501
        """ContactInfoDataForEdit - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._contact_info = None
        self._edit = None
        self._remove = None
        self._image = None
        self._binary_values = None
        self.discriminator = None

        if contact_info is not None:
            self.contact_info = contact_info
        if edit is not None:
            self.edit = edit
        if remove is not None:
            self.remove = remove
        if image is not None:
            self.image = image
        if binary_values is not None:
            self.binary_values = binary_values

    @property
    def contact_info(self):
        """Gets the contact_info of this ContactInfoDataForEdit.  # noqa: E501

        The additional contact information that is being edited. This value can be modified and sent back on `PUT /contactInfos/{id}`.   # noqa: E501

        :return: The contact_info of this ContactInfoDataForEdit.  # noqa: E501
        :rtype: ContactInfoEdit
        """
        return self._contact_info

    @contact_info.setter
    def contact_info(self, contact_info):
        """Sets the contact_info of this ContactInfoDataForEdit.

        The additional contact information that is being edited. This value can be modified and sent back on `PUT /contactInfos/{id}`.   # noqa: E501

        :param contact_info: The contact_info of this ContactInfoDataForEdit.  # noqa: E501
        :type: ContactInfoEdit
        """

        self._contact_info = contact_info

    @property
    def edit(self):
        """Gets the edit of this ContactInfoDataForEdit.  # noqa: E501

        Indicates whether the current contact info can be edited by the currently authenticated used.   # noqa: E501

        :return: The edit of this ContactInfoDataForEdit.  # noqa: E501
        :rtype: bool
        """
        return self._edit

    @edit.setter
    def edit(self, edit):
        """Sets the edit of this ContactInfoDataForEdit.

        Indicates whether the current contact info can be edited by the currently authenticated used.   # noqa: E501

        :param edit: The edit of this ContactInfoDataForEdit.  # noqa: E501
        :type: bool
        """

        self._edit = edit

    @property
    def remove(self):
        """Gets the remove of this ContactInfoDataForEdit.  # noqa: E501

        Indicates whether the current contact info can be removed by the currently authenticated used.             # noqa: E501

        :return: The remove of this ContactInfoDataForEdit.  # noqa: E501
        :rtype: bool
        """
        return self._remove

    @remove.setter
    def remove(self, remove):
        """Sets the remove of this ContactInfoDataForEdit.

        Indicates whether the current contact info can be removed by the currently authenticated used.             # noqa: E501

        :param remove: The remove of this ContactInfoDataForEdit.  # noqa: E501
        :type: bool
        """

        self._remove = remove

    @property
    def image(self):
        """Gets the image of this ContactInfoDataForEdit.  # noqa: E501

        The image for this additional contact information  # noqa: E501

        :return: The image of this ContactInfoDataForEdit.  # noqa: E501
        :rtype: Image
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this ContactInfoDataForEdit.

        The image for this additional contact information  # noqa: E501

        :param image: The image of this ContactInfoDataForEdit.  # noqa: E501
        :type: Image
        """

        self._image = image

    @property
    def binary_values(self):
        """Gets the binary_values of this ContactInfoDataForEdit.  # noqa: E501

        Holds the current values for file / image custom fields as lists of `StoredFile`s / `Image`s.   # noqa: E501

        :return: The binary_values of this ContactInfoDataForEdit.  # noqa: E501
        :rtype: CustomFieldBinaryValues
        """
        return self._binary_values

    @binary_values.setter
    def binary_values(self, binary_values):
        """Sets the binary_values of this ContactInfoDataForEdit.

        Holds the current values for file / image custom fields as lists of `StoredFile`s / `Image`s.   # noqa: E501

        :param binary_values: The binary_values of this ContactInfoDataForEdit.  # noqa: E501
        :type: CustomFieldBinaryValues
        """

        self._binary_values = binary_values

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ContactInfoDataForEdit, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ContactInfoDataForEdit):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ContactInfoDataForEdit):
            return True

        return self.to_dict() != other.to_dict()
