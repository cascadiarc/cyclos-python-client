# coding: utf-8

"""
    Cyclos 4.11.5 API

    The REST API for Cyclos 4.11.5  # noqa: E501

    OpenAPI spec version: 4.11.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class ClientView(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'status': 'ClientStatusEnum',
        'activation_date': 'datetime',
        'confirmation_password_input': 'PasswordInput',
        'can_get_activation_code': 'bool',
        'can_unassign': 'bool',
        'can_block': 'bool',
        'can_unblock': 'bool'
    }

    attribute_map = {
        'status': 'status',
        'activation_date': 'activationDate',
        'confirmation_password_input': 'confirmationPasswordInput',
        'can_get_activation_code': 'canGetActivationCode',
        'can_unassign': 'canUnassign',
        'can_block': 'canBlock',
        'can_unblock': 'canUnblock'
    }

    def __init__(self, status=None, activation_date=None, confirmation_password_input=None, can_get_activation_code=None, can_unassign=None, can_block=None, can_unblock=None, _configuration=None):  # noqa: E501
        """ClientView - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._status = None
        self._activation_date = None
        self._confirmation_password_input = None
        self._can_get_activation_code = None
        self._can_unassign = None
        self._can_block = None
        self._can_unblock = None
        self.discriminator = None

        if status is not None:
            self.status = status
        if activation_date is not None:
            self.activation_date = activation_date
        if confirmation_password_input is not None:
            self.confirmation_password_input = confirmation_password_input
        if can_get_activation_code is not None:
            self.can_get_activation_code = can_get_activation_code
        if can_unassign is not None:
            self.can_unassign = can_unassign
        if can_block is not None:
            self.can_block = can_block
        if can_unblock is not None:
            self.can_unblock = can_unblock

    @property
    def status(self):
        """Gets the status of this ClientView.  # noqa: E501

        The status of an access client Possible values are: * active: The access client is active, and can operate normally * blocked: The access client is blocked and cannot be used until it is unblocked * removed: The access client was removed, but had transactions, so couldn't be physically removed * unassigned: The access client is unassigned (disconnected) from an (remote) application   # noqa: E501

        :return: The status of this ClientView.  # noqa: E501
        :rtype: ClientStatusEnum
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ClientView.

        The status of an access client Possible values are: * active: The access client is active, and can operate normally * blocked: The access client is blocked and cannot be used until it is unblocked * removed: The access client was removed, but had transactions, so couldn't be physically removed * unassigned: The access client is unassigned (disconnected) from an (remote) application   # noqa: E501

        :param status: The status of this ClientView.  # noqa: E501
        :type: ClientStatusEnum
        """

        self._status = status

    @property
    def activation_date(self):
        """Gets the activation_date of this ClientView.  # noqa: E501

        The date the client was activated  # noqa: E501

        :return: The activation_date of this ClientView.  # noqa: E501
        :rtype: datetime
        """
        return self._activation_date

    @activation_date.setter
    def activation_date(self, activation_date):
        """Sets the activation_date of this ClientView.

        The date the client was activated  # noqa: E501

        :param activation_date: The activation_date of this ClientView.  # noqa: E501
        :type: datetime
        """

        self._activation_date = activation_date

    @property
    def confirmation_password_input(self):
        """Gets the confirmation_password_input of this ClientView.  # noqa: E501

        If a confirmation password is used, contains the definitions on how to request that password from the user. This confirmation password is required when performing sensible actions. Sometimes this is dynamic, for example, the confirmation might be configured to be used only once per session, or operations like payments may have a limit per day to be without confirmation (pinless).   # noqa: E501

        :return: The confirmation_password_input of this ClientView.  # noqa: E501
        :rtype: PasswordInput
        """
        return self._confirmation_password_input

    @confirmation_password_input.setter
    def confirmation_password_input(self, confirmation_password_input):
        """Sets the confirmation_password_input of this ClientView.

        If a confirmation password is used, contains the definitions on how to request that password from the user. This confirmation password is required when performing sensible actions. Sometimes this is dynamic, for example, the confirmation might be configured to be used only once per session, or operations like payments may have a limit per day to be without confirmation (pinless).   # noqa: E501

        :param confirmation_password_input: The confirmation_password_input of this ClientView.  # noqa: E501
        :type: PasswordInput
        """

        self._confirmation_password_input = confirmation_password_input

    @property
    def can_get_activation_code(self):
        """Gets the can_get_activation_code of this ClientView.  # noqa: E501

        Can the authenticated user get the activation code, to later activate (assign) this client?   # noqa: E501

        :return: The can_get_activation_code of this ClientView.  # noqa: E501
        :rtype: bool
        """
        return self._can_get_activation_code

    @can_get_activation_code.setter
    def can_get_activation_code(self, can_get_activation_code):
        """Sets the can_get_activation_code of this ClientView.

        Can the authenticated user get the activation code, to later activate (assign) this client?   # noqa: E501

        :param can_get_activation_code: The can_get_activation_code of this ClientView.  # noqa: E501
        :type: bool
        """

        self._can_get_activation_code = can_get_activation_code

    @property
    def can_unassign(self):
        """Gets the can_unassign of this ClientView.  # noqa: E501

        Can the authenticated user unassign this client?  # noqa: E501

        :return: The can_unassign of this ClientView.  # noqa: E501
        :rtype: bool
        """
        return self._can_unassign

    @can_unassign.setter
    def can_unassign(self, can_unassign):
        """Sets the can_unassign of this ClientView.

        Can the authenticated user unassign this client?  # noqa: E501

        :param can_unassign: The can_unassign of this ClientView.  # noqa: E501
        :type: bool
        """

        self._can_unassign = can_unassign

    @property
    def can_block(self):
        """Gets the can_block of this ClientView.  # noqa: E501

        Can the authenticated user block this client?  # noqa: E501

        :return: The can_block of this ClientView.  # noqa: E501
        :rtype: bool
        """
        return self._can_block

    @can_block.setter
    def can_block(self, can_block):
        """Sets the can_block of this ClientView.

        Can the authenticated user block this client?  # noqa: E501

        :param can_block: The can_block of this ClientView.  # noqa: E501
        :type: bool
        """

        self._can_block = can_block

    @property
    def can_unblock(self):
        """Gets the can_unblock of this ClientView.  # noqa: E501

        Can the authenticated user unblock this client?  # noqa: E501

        :return: The can_unblock of this ClientView.  # noqa: E501
        :rtype: bool
        """
        return self._can_unblock

    @can_unblock.setter
    def can_unblock(self, can_unblock):
        """Sets the can_unblock of this ClientView.

        Can the authenticated user unblock this client?  # noqa: E501

        :param can_unblock: The can_unblock of this ClientView.  # noqa: E501
        :type: bool
        """

        self._can_unblock = can_unblock

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ClientView, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClientView):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ClientView):
            return True

        return self.to_dict() != other.to_dict()
