# coding: utf-8

"""
    Cyclos 4.11.5 API

    The REST API for Cyclos 4.11.5  # noqa: E501

    OpenAPI spec version: 4.11.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class UserView(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'role': 'RoleEnum',
        'name': 'str',
        'username': 'str',
        'email': 'str',
        'custom_values': 'list[UserCustomFieldValue]',
        'group': 'EntityReference',
        'group_set': 'EntityReference',
        'additional_images': 'list[Image]',
        'addresses': 'list[AddressView]',
        'phones': 'list[PhoneView]',
        'contact_infos': 'list[ContactInfoDetailed]',
        'contact': 'ContactView',
        'registration_date': 'datetime',
        'activation_date': 'datetime',
        'online': 'bool',
        'last_login': 'datetime',
        'first_login': 'datetime',
        'permissions': 'UserPermissions',
        'brokers': 'list[BrokerView]'
    }

    attribute_map = {
        'role': 'role',
        'name': 'name',
        'username': 'username',
        'email': 'email',
        'custom_values': 'customValues',
        'group': 'group',
        'group_set': 'groupSet',
        'additional_images': 'additionalImages',
        'addresses': 'addresses',
        'phones': 'phones',
        'contact_infos': 'contactInfos',
        'contact': 'contact',
        'registration_date': 'registrationDate',
        'activation_date': 'activationDate',
        'online': 'online',
        'last_login': 'lastLogin',
        'first_login': 'firstLogin',
        'permissions': 'permissions',
        'brokers': 'brokers'
    }

    def __init__(self, role=None, name=None, username=None, email=None, custom_values=None, group=None, group_set=None, additional_images=None, addresses=None, phones=None, contact_infos=None, contact=None, registration_date=None, activation_date=None, online=None, last_login=None, first_login=None, permissions=None, brokers=None, _configuration=None):  # noqa: E501
        """UserView - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._role = None
        self._name = None
        self._username = None
        self._email = None
        self._custom_values = None
        self._group = None
        self._group_set = None
        self._additional_images = None
        self._addresses = None
        self._phones = None
        self._contact_infos = None
        self._contact = None
        self._registration_date = None
        self._activation_date = None
        self._online = None
        self._last_login = None
        self._first_login = None
        self._permissions = None
        self._brokers = None
        self.discriminator = None

        if role is not None:
            self.role = role
        if name is not None:
            self.name = name
        if username is not None:
            self.username = username
        if email is not None:
            self.email = email
        if custom_values is not None:
            self.custom_values = custom_values
        if group is not None:
            self.group = group
        if group_set is not None:
            self.group_set = group_set
        if additional_images is not None:
            self.additional_images = additional_images
        if addresses is not None:
            self.addresses = addresses
        if phones is not None:
            self.phones = phones
        if contact_infos is not None:
            self.contact_infos = contact_infos
        if contact is not None:
            self.contact = contact
        if registration_date is not None:
            self.registration_date = registration_date
        if activation_date is not None:
            self.activation_date = activation_date
        if online is not None:
            self.online = online
        if last_login is not None:
            self.last_login = last_login
        if first_login is not None:
            self.first_login = first_login
        if permissions is not None:
            self.permissions = permissions
        if brokers is not None:
            self.brokers = brokers

    @property
    def role(self):
        """Gets the role of this UserView.  # noqa: E501

        The main role the user has. Possible values are: * administrator: A user who can manage the system and other users. * broker: A user who can manage other users. * member: A regular user who can manage operators.  * operator: A \"sub-user\" created by a member to manage his data.   # noqa: E501

        :return: The role of this UserView.  # noqa: E501
        :rtype: RoleEnum
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this UserView.

        The main role the user has. Possible values are: * administrator: A user who can manage the system and other users. * broker: A user who can manage other users. * member: A regular user who can manage operators.  * operator: A \"sub-user\" created by a member to manage his data.   # noqa: E501

        :param role: The role of this UserView.  # noqa: E501
        :type: RoleEnum
        """

        self._role = role

    @property
    def name(self):
        """Gets the name of this UserView.  # noqa: E501

        The user's full name  # noqa: E501

        :return: The name of this UserView.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UserView.

        The user's full name  # noqa: E501

        :param name: The name of this UserView.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def username(self):
        """Gets the username of this UserView.  # noqa: E501

        The user's login name  # noqa: E501

        :return: The username of this UserView.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this UserView.

        The user's login name  # noqa: E501

        :param username: The username of this UserView.  # noqa: E501
        :type: str
        """

        self._username = username

    @property
    def email(self):
        """Gets the email of this UserView.  # noqa: E501

        The user's e-mail  # noqa: E501

        :return: The email of this UserView.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this UserView.

        The user's e-mail  # noqa: E501

        :param email: The email of this UserView.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def custom_values(self):
        """Gets the custom_values of this UserView.  # noqa: E501

        The list of custom field values this user has  # noqa: E501

        :return: The custom_values of this UserView.  # noqa: E501
        :rtype: list[UserCustomFieldValue]
        """
        return self._custom_values

    @custom_values.setter
    def custom_values(self, custom_values):
        """Sets the custom_values of this UserView.

        The list of custom field values this user has  # noqa: E501

        :param custom_values: The custom_values of this UserView.  # noqa: E501
        :type: list[UserCustomFieldValue]
        """

        self._custom_values = custom_values

    @property
    def group(self):
        """Gets the group of this UserView.  # noqa: E501

        Reference to the user group. Is only returned if the authenticated user has permission to see groups    # noqa: E501

        :return: The group of this UserView.  # noqa: E501
        :rtype: EntityReference
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this UserView.

        Reference to the user group. Is only returned if the authenticated user has permission to see groups    # noqa: E501

        :param group: The group of this UserView.  # noqa: E501
        :type: EntityReference
        """

        self._group = group

    @property
    def group_set(self):
        """Gets the group_set of this UserView.  # noqa: E501

        Reference to the user group set. Is only returned if the authenticated user has permission to see group sets and the user group is in a group set    # noqa: E501

        :return: The group_set of this UserView.  # noqa: E501
        :rtype: EntityReference
        """
        return self._group_set

    @group_set.setter
    def group_set(self, group_set):
        """Sets the group_set of this UserView.

        Reference to the user group set. Is only returned if the authenticated user has permission to see group sets and the user group is in a group set    # noqa: E501

        :param group_set: The group_set of this UserView.  # noqa: E501
        :type: EntityReference
        """

        self._group_set = group_set

    @property
    def additional_images(self):
        """Gets the additional_images of this UserView.  # noqa: E501

        Holds the images other than the primary image, which is returned in the `image` field   # noqa: E501

        :return: The additional_images of this UserView.  # noqa: E501
        :rtype: list[Image]
        """
        return self._additional_images

    @additional_images.setter
    def additional_images(self, additional_images):
        """Sets the additional_images of this UserView.

        Holds the images other than the primary image, which is returned in the `image` field   # noqa: E501

        :param additional_images: The additional_images of this UserView.  # noqa: E501
        :type: list[Image]
        """

        self._additional_images = additional_images

    @property
    def addresses(self):
        """Gets the addresses of this UserView.  # noqa: E501

        Visible addresses  # noqa: E501

        :return: The addresses of this UserView.  # noqa: E501
        :rtype: list[AddressView]
        """
        return self._addresses

    @addresses.setter
    def addresses(self, addresses):
        """Sets the addresses of this UserView.

        Visible addresses  # noqa: E501

        :param addresses: The addresses of this UserView.  # noqa: E501
        :type: list[AddressView]
        """

        self._addresses = addresses

    @property
    def phones(self):
        """Gets the phones of this UserView.  # noqa: E501

        Visible phones  # noqa: E501

        :return: The phones of this UserView.  # noqa: E501
        :rtype: list[PhoneView]
        """
        return self._phones

    @phones.setter
    def phones(self, phones):
        """Sets the phones of this UserView.

        Visible phones  # noqa: E501

        :param phones: The phones of this UserView.  # noqa: E501
        :type: list[PhoneView]
        """

        self._phones = phones

    @property
    def contact_infos(self):
        """Gets the contact_infos of this UserView.  # noqa: E501

        Visible additional contact information  # noqa: E501

        :return: The contact_infos of this UserView.  # noqa: E501
        :rtype: list[ContactInfoDetailed]
        """
        return self._contact_infos

    @contact_infos.setter
    def contact_infos(self, contact_infos):
        """Sets the contact_infos of this UserView.

        Visible additional contact information  # noqa: E501

        :param contact_infos: The contact_infos of this UserView.  # noqa: E501
        :type: list[ContactInfoDetailed]
        """

        self._contact_infos = contact_infos

    @property
    def contact(self):
        """Gets the contact of this UserView.  # noqa: E501

        When this user is in the contact list of the currently logged user, returns data about the contact relation. When not returned, this user is no in the logged user's contact list.   # noqa: E501

        :return: The contact of this UserView.  # noqa: E501
        :rtype: ContactView
        """
        return self._contact

    @contact.setter
    def contact(self, contact):
        """Sets the contact of this UserView.

        When this user is in the contact list of the currently logged user, returns data about the contact relation. When not returned, this user is no in the logged user's contact list.   # noqa: E501

        :param contact: The contact of this UserView.  # noqa: E501
        :type: ContactView
        """

        self._contact = contact

    @property
    def registration_date(self):
        """Gets the registration_date of this UserView.  # noqa: E501

        The date the user was registered. Only returned if the logged user manages the given used.   # noqa: E501

        :return: The registration_date of this UserView.  # noqa: E501
        :rtype: datetime
        """
        return self._registration_date

    @registration_date.setter
    def registration_date(self, registration_date):
        """Sets the registration_date of this UserView.

        The date the user was registered. Only returned if the logged user manages the given used.   # noqa: E501

        :param registration_date: The registration_date of this UserView.  # noqa: E501
        :type: datetime
        """

        self._registration_date = registration_date

    @property
    def activation_date(self):
        """Gets the activation_date of this UserView.  # noqa: E501

        The date the user was made active the first time. Only returned if the logged user manages the given used.   # noqa: E501

        :return: The activation_date of this UserView.  # noqa: E501
        :rtype: datetime
        """
        return self._activation_date

    @activation_date.setter
    def activation_date(self, activation_date):
        """Sets the activation_date of this UserView.

        The date the user was made active the first time. Only returned if the logged user manages the given used.   # noqa: E501

        :param activation_date: The activation_date of this UserView.  # noqa: E501
        :type: datetime
        """

        self._activation_date = activation_date

    @property
    def online(self):
        """Gets the online of this UserView.  # noqa: E501

        Indicates whether the given user is logged-in to the system. Only returned if the logged user manages the given used.   # noqa: E501

        :return: The online of this UserView.  # noqa: E501
        :rtype: bool
        """
        return self._online

    @online.setter
    def online(self, online):
        """Sets the online of this UserView.

        Indicates whether the given user is logged-in to the system. Only returned if the logged user manages the given used.   # noqa: E501

        :param online: The online of this UserView.  # noqa: E501
        :type: bool
        """

        self._online = online

    @property
    def last_login(self):
        """Gets the last_login of this UserView.  # noqa: E501

        The last time the user logged in, or null if never logged in. Only returned if the logged user manages the given used.   # noqa: E501

        :return: The last_login of this UserView.  # noqa: E501
        :rtype: datetime
        """
        return self._last_login

    @last_login.setter
    def last_login(self, last_login):
        """Sets the last_login of this UserView.

        The last time the user logged in, or null if never logged in. Only returned if the logged user manages the given used.   # noqa: E501

        :param last_login: The last_login of this UserView.  # noqa: E501
        :type: datetime
        """

        self._last_login = last_login

    @property
    def first_login(self):
        """Gets the first_login of this UserView.  # noqa: E501

        The first time the user logged in, or null if never logged in. Only returned if the logged user manages the given used.   # noqa: E501

        :return: The first_login of this UserView.  # noqa: E501
        :rtype: datetime
        """
        return self._first_login

    @first_login.setter
    def first_login(self, first_login):
        """Sets the first_login of this UserView.

        The first time the user logged in, or null if never logged in. Only returned if the logged user manages the given used.   # noqa: E501

        :param first_login: The first_login of this UserView.  # noqa: E501
        :type: datetime
        """

        self._first_login = first_login

    @property
    def permissions(self):
        """Gets the permissions of this UserView.  # noqa: E501

        Permissions the authenticated has over this user  # noqa: E501

        :return: The permissions of this UserView.  # noqa: E501
        :rtype: UserPermissions
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this UserView.

        Permissions the authenticated has over this user  # noqa: E501

        :param permissions: The permissions of this UserView.  # noqa: E501
        :type: UserPermissions
        """

        self._permissions = permissions

    @property
    def brokers(self):
        """Gets the brokers of this UserView.  # noqa: E501

        Visible brokers  # noqa: E501

        :return: The brokers of this UserView.  # noqa: E501
        :rtype: list[BrokerView]
        """
        return self._brokers

    @brokers.setter
    def brokers(self, brokers):
        """Sets the brokers of this UserView.

        Visible brokers  # noqa: E501

        :param brokers: The brokers of this UserView.  # noqa: E501
        :type: list[BrokerView]
        """

        self._brokers = brokers

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserView, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserView):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UserView):
            return True

        return self.to_dict() != other.to_dict()
