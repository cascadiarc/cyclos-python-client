# coding: utf-8

"""
    Cyclos 4.11.5 API

    The REST API for Cyclos 4.11.5  # noqa: E501

    OpenAPI spec version: 4.11.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class PaymentPreview(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'main_amount': 'BigDecimal',
        'fees': 'list[TransferFeePreview]',
        'installments': 'list[ScheduledPaymentInstallmentPreview]',
        'payment': 'PerformPayment',
        'a_rate': 'BigDecimal',
        'd_rate': 'BigDecimal',
        'previous_d_rate': 'BigDecimal',
        'transfer_d_rate': 'BigDecimal'
    }

    attribute_map = {
        'main_amount': 'mainAmount',
        'fees': 'fees',
        'installments': 'installments',
        'payment': 'payment',
        'a_rate': 'ARate',
        'd_rate': 'DRate',
        'previous_d_rate': 'previousDRate',
        'transfer_d_rate': 'transferDRate'
    }

    def __init__(self, main_amount=None, fees=None, installments=None, payment=None, a_rate=None, d_rate=None, previous_d_rate=None, transfer_d_rate=None, _configuration=None):  # noqa: E501
        """PaymentPreview - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._main_amount = None
        self._fees = None
        self._installments = None
        self._payment = None
        self._a_rate = None
        self._d_rate = None
        self._previous_d_rate = None
        self._transfer_d_rate = None
        self.discriminator = None

        if main_amount is not None:
            self.main_amount = main_amount
        if fees is not None:
            self.fees = fees
        if installments is not None:
            self.installments = installments
        if payment is not None:
            self.payment = payment
        if a_rate is not None:
            self.a_rate = a_rate
        if d_rate is not None:
            self.d_rate = d_rate
        if previous_d_rate is not None:
            self.previous_d_rate = previous_d_rate
        if transfer_d_rate is not None:
            self.transfer_d_rate = transfer_d_rate

    @property
    def main_amount(self):
        """Gets the main_amount of this PaymentPreview.  # noqa: E501

        This reflects the new transaction amount. Depending on the configured fees, it could happen that the fee amount is deducted from transaction amount. If no fees deduct, it will be the same as transaction amount.  E.g: payment from A to B by 100 units with two fees: 10 units deducted from payment amount and other of 15 not deducted. Then the `totalAmount` will be 115, 90 for the `mainAmount`, 10 for the first fee and 15 for  the other fee.    # noqa: E501

        :return: The main_amount of this PaymentPreview.  # noqa: E501
        :rtype: BigDecimal
        """
        return self._main_amount

    @main_amount.setter
    def main_amount(self, main_amount):
        """Sets the main_amount of this PaymentPreview.

        This reflects the new transaction amount. Depending on the configured fees, it could happen that the fee amount is deducted from transaction amount. If no fees deduct, it will be the same as transaction amount.  E.g: payment from A to B by 100 units with two fees: 10 units deducted from payment amount and other of 15 not deducted. Then the `totalAmount` will be 115, 90 for the `mainAmount`, 10 for the first fee and 15 for  the other fee.    # noqa: E501

        :param main_amount: The main_amount of this PaymentPreview.  # noqa: E501
        :type: BigDecimal
        """

        self._main_amount = main_amount

    @property
    def fees(self):
        """Gets the fees of this PaymentPreview.  # noqa: E501

        Only returned for direct payments. Contains the fees that would be paid by the payer if the payment is confirmed.   # noqa: E501

        :return: The fees of this PaymentPreview.  # noqa: E501
        :rtype: list[TransferFeePreview]
        """
        return self._fees

    @fees.setter
    def fees(self, fees):
        """Sets the fees of this PaymentPreview.

        Only returned for direct payments. Contains the fees that would be paid by the payer if the payment is confirmed.   # noqa: E501

        :param fees: The fees of this PaymentPreview.  # noqa: E501
        :type: list[TransferFeePreview]
        """

        self._fees = fees

    @property
    def installments(self):
        """Gets the installments of this PaymentPreview.  # noqa: E501

        Only returned for scheduled payments. Contains the previews of each installment, if the payment is confirmed.   # noqa: E501

        :return: The installments of this PaymentPreview.  # noqa: E501
        :rtype: list[ScheduledPaymentInstallmentPreview]
        """
        return self._installments

    @installments.setter
    def installments(self, installments):
        """Sets the installments of this PaymentPreview.

        Only returned for scheduled payments. Contains the previews of each installment, if the payment is confirmed.   # noqa: E501

        :param installments: The installments of this PaymentPreview.  # noqa: E501
        :type: list[ScheduledPaymentInstallmentPreview]
        """

        self._installments = installments

    @property
    def payment(self):
        """Gets the payment of this PaymentPreview.  # noqa: E501

        Depending on the configuration, some script might alter the payment object, for example, filling in custom fields. This object can be used to show the actual data to the user, and to be posted again to the `POST /{owner}/payments/` path.   # noqa: E501

        :return: The payment of this PaymentPreview.  # noqa: E501
        :rtype: PerformPayment
        """
        return self._payment

    @payment.setter
    def payment(self, payment):
        """Sets the payment of this PaymentPreview.

        Depending on the configuration, some script might alter the payment object, for example, filling in custom fields. This object can be used to show the actual data to the user, and to be posted again to the `POST /{owner}/payments/` path.   # noqa: E501

        :param payment: The payment of this PaymentPreview.  # noqa: E501
        :type: PerformPayment
        """

        self._payment = payment

    @property
    def a_rate(self):
        """Gets the a_rate of this PaymentPreview.  # noqa: E501

        The balance aging counter used for this payment  # noqa: E501

        :return: The a_rate of this PaymentPreview.  # noqa: E501
        :rtype: BigDecimal
        """
        return self._a_rate

    @a_rate.setter
    def a_rate(self, a_rate):
        """Sets the a_rate of this PaymentPreview.

        The balance aging counter used for this payment  # noqa: E501

        :param a_rate: The a_rate of this PaymentPreview.  # noqa: E501
        :type: BigDecimal
        """

        self._a_rate = a_rate

    @property
    def d_rate(self):
        """Gets the d_rate of this PaymentPreview.  # noqa: E501

        The balance maturity used for this payment  # noqa: E501

        :return: The d_rate of this PaymentPreview.  # noqa: E501
        :rtype: BigDecimal
        """
        return self._d_rate

    @d_rate.setter
    def d_rate(self, d_rate):
        """Sets the d_rate of this PaymentPreview.

        The balance maturity used for this payment  # noqa: E501

        :param d_rate: The d_rate of this PaymentPreview.  # noqa: E501
        :type: BigDecimal
        """

        self._d_rate = d_rate

    @property
    def previous_d_rate(self):
        """Gets the previous_d_rate of this PaymentPreview.  # noqa: E501

        The number of days until the present balance reaches its maturity    # noqa: E501

        :return: The previous_d_rate of this PaymentPreview.  # noqa: E501
        :rtype: BigDecimal
        """
        return self._previous_d_rate

    @previous_d_rate.setter
    def previous_d_rate(self, previous_d_rate):
        """Sets the previous_d_rate of this PaymentPreview.

        The number of days until the present balance reaches its maturity    # noqa: E501

        :param previous_d_rate: The previous_d_rate of this PaymentPreview.  # noqa: E501
        :type: BigDecimal
        """

        self._previous_d_rate = previous_d_rate

    @property
    def transfer_d_rate(self):
        """Gets the transfer_d_rate of this PaymentPreview.  # noqa: E501

        The maturity used for this payment  # noqa: E501

        :return: The transfer_d_rate of this PaymentPreview.  # noqa: E501
        :rtype: BigDecimal
        """
        return self._transfer_d_rate

    @transfer_d_rate.setter
    def transfer_d_rate(self, transfer_d_rate):
        """Sets the transfer_d_rate of this PaymentPreview.

        The maturity used for this payment  # noqa: E501

        :param transfer_d_rate: The transfer_d_rate of this PaymentPreview.  # noqa: E501
        :type: BigDecimal
        """

        self._transfer_d_rate = transfer_d_rate

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PaymentPreview, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PaymentPreview):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PaymentPreview):
            return True

        return self.to_dict() != other.to_dict()
