# coding: utf-8

"""
    Cyclos 4.11.5 API

    The REST API for Cyclos 4.11.5  # noqa: E501

    OpenAPI spec version: 4.11.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class BasicUserQueryFilters(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'users_to_exclude': 'list[str]',
        'users_to_include': 'list[str]',
        'activation_period': 'list[datetime]',
        'creation_period': 'list[datetime]',
        'last_login_period': 'list[datetime]',
        'groups': 'list[str]',
        'brokers': 'list[str]',
        'main_broker_only': 'bool',
        'include_group': 'bool',
        'include_group_set': 'bool',
        'address_result': 'UserAddressResultEnum'
    }

    attribute_map = {
        'users_to_exclude': 'usersToExclude',
        'users_to_include': 'usersToInclude',
        'activation_period': 'activationPeriod',
        'creation_period': 'creationPeriod',
        'last_login_period': 'lastLoginPeriod',
        'groups': 'groups',
        'brokers': 'brokers',
        'main_broker_only': 'mainBrokerOnly',
        'include_group': 'includeGroup',
        'include_group_set': 'includeGroupSet',
        'address_result': 'addressResult'
    }

    def __init__(self, users_to_exclude=None, users_to_include=None, activation_period=None, creation_period=None, last_login_period=None, groups=None, brokers=None, main_broker_only=None, include_group=None, include_group_set=None, address_result=None, _configuration=None):  # noqa: E501
        """BasicUserQueryFilters - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._users_to_exclude = None
        self._users_to_include = None
        self._activation_period = None
        self._creation_period = None
        self._last_login_period = None
        self._groups = None
        self._brokers = None
        self._main_broker_only = None
        self._include_group = None
        self._include_group_set = None
        self._address_result = None
        self.discriminator = None

        if users_to_exclude is not None:
            self.users_to_exclude = users_to_exclude
        if users_to_include is not None:
            self.users_to_include = users_to_include
        if activation_period is not None:
            self.activation_period = activation_period
        if creation_period is not None:
            self.creation_period = creation_period
        if last_login_period is not None:
            self.last_login_period = last_login_period
        if groups is not None:
            self.groups = groups
        if brokers is not None:
            self.brokers = brokers
        if main_broker_only is not None:
            self.main_broker_only = main_broker_only
        if include_group is not None:
            self.include_group = include_group
        if include_group_set is not None:
            self.include_group_set = include_group_set
        if address_result is not None:
            self.address_result = address_result

    @property
    def users_to_exclude(self):
        """Gets the users_to_exclude of this BasicUserQueryFilters.  # noqa: E501

        Indicated the users to be excluded from the result   # noqa: E501

        :return: The users_to_exclude of this BasicUserQueryFilters.  # noqa: E501
        :rtype: list[str]
        """
        return self._users_to_exclude

    @users_to_exclude.setter
    def users_to_exclude(self, users_to_exclude):
        """Sets the users_to_exclude of this BasicUserQueryFilters.

        Indicated the users to be excluded from the result   # noqa: E501

        :param users_to_exclude: The users_to_exclude of this BasicUserQueryFilters.  # noqa: E501
        :type: list[str]
        """

        self._users_to_exclude = users_to_exclude

    @property
    def users_to_include(self):
        """Gets the users_to_include of this BasicUserQueryFilters.  # noqa: E501

        Indicated the users to be included in the result.  Any other user not present in this list will be excluded from the result.   # noqa: E501

        :return: The users_to_include of this BasicUserQueryFilters.  # noqa: E501
        :rtype: list[str]
        """
        return self._users_to_include

    @users_to_include.setter
    def users_to_include(self, users_to_include):
        """Sets the users_to_include of this BasicUserQueryFilters.

        Indicated the users to be included in the result.  Any other user not present in this list will be excluded from the result.   # noqa: E501

        :param users_to_include: The users_to_include of this BasicUserQueryFilters.  # noqa: E501
        :type: list[str]
        """

        self._users_to_include = users_to_include

    @property
    def activation_period(self):
        """Gets the activation_period of this BasicUserQueryFilters.  # noqa: E501

        The minimum / maximum user activation date. Only taken into account if searching as administrator or managing broker. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma.   # noqa: E501

        :return: The activation_period of this BasicUserQueryFilters.  # noqa: E501
        :rtype: list[datetime]
        """
        return self._activation_period

    @activation_period.setter
    def activation_period(self, activation_period):
        """Sets the activation_period of this BasicUserQueryFilters.

        The minimum / maximum user activation date. Only taken into account if searching as administrator or managing broker. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma.   # noqa: E501

        :param activation_period: The activation_period of this BasicUserQueryFilters.  # noqa: E501
        :type: list[datetime]
        """

        self._activation_period = activation_period

    @property
    def creation_period(self):
        """Gets the creation_period of this BasicUserQueryFilters.  # noqa: E501

        The minimum / maximum user creation date. Only taken into account if searching as administrator or managing broker. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma.   # noqa: E501

        :return: The creation_period of this BasicUserQueryFilters.  # noqa: E501
        :rtype: list[datetime]
        """
        return self._creation_period

    @creation_period.setter
    def creation_period(self, creation_period):
        """Sets the creation_period of this BasicUserQueryFilters.

        The minimum / maximum user creation date. Only taken into account if searching as administrator or managing broker. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma.   # noqa: E501

        :param creation_period: The creation_period of this BasicUserQueryFilters.  # noqa: E501
        :type: list[datetime]
        """

        self._creation_period = creation_period

    @property
    def last_login_period(self):
        """Gets the last_login_period of this BasicUserQueryFilters.  # noqa: E501

        The minimum / maximum user last login date. Only taken into account if searching as administrator or managing broker. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma.   # noqa: E501

        :return: The last_login_period of this BasicUserQueryFilters.  # noqa: E501
        :rtype: list[datetime]
        """
        return self._last_login_period

    @last_login_period.setter
    def last_login_period(self, last_login_period):
        """Sets the last_login_period of this BasicUserQueryFilters.

        The minimum / maximum user last login date. Only taken into account if searching as administrator or managing broker. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma.   # noqa: E501

        :param last_login_period: The last_login_period of this BasicUserQueryFilters.  # noqa: E501
        :type: list[datetime]
        """

        self._last_login_period = last_login_period

    @property
    def groups(self):
        """Gets the groups of this BasicUserQueryFilters.  # noqa: E501

        Either id or internal names of groups / group sets  # noqa: E501

        :return: The groups of this BasicUserQueryFilters.  # noqa: E501
        :rtype: list[str]
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """Sets the groups of this BasicUserQueryFilters.

        Either id or internal names of groups / group sets  # noqa: E501

        :param groups: The groups of this BasicUserQueryFilters.  # noqa: E501
        :type: list[str]
        """

        self._groups = groups

    @property
    def brokers(self):
        """Gets the brokers of this BasicUserQueryFilters.  # noqa: E501

        Either id or a principal (login name, e-mail, etc) for brokers  # noqa: E501

        :return: The brokers of this BasicUserQueryFilters.  # noqa: E501
        :rtype: list[str]
        """
        return self._brokers

    @brokers.setter
    def brokers(self, brokers):
        """Sets the brokers of this BasicUserQueryFilters.

        Either id or a principal (login name, e-mail, etc) for brokers  # noqa: E501

        :param brokers: The brokers of this BasicUserQueryFilters.  # noqa: E501
        :type: list[str]
        """

        self._brokers = brokers

    @property
    def main_broker_only(self):
        """Gets the main_broker_only of this BasicUserQueryFilters.  # noqa: E501

        When set to `true`, will match only users that have the brokers as set in the `brokers` parameter as main broker.    # noqa: E501

        :return: The main_broker_only of this BasicUserQueryFilters.  # noqa: E501
        :rtype: bool
        """
        return self._main_broker_only

    @main_broker_only.setter
    def main_broker_only(self, main_broker_only):
        """Sets the main_broker_only of this BasicUserQueryFilters.

        When set to `true`, will match only users that have the brokers as set in the `brokers` parameter as main broker.    # noqa: E501

        :param main_broker_only: The main_broker_only of this BasicUserQueryFilters.  # noqa: E501
        :type: bool
        """

        self._main_broker_only = main_broker_only

    @property
    def include_group(self):
        """Gets the include_group of this BasicUserQueryFilters.  # noqa: E501

        When set to `true` and the logged user has permission to view user groups, will return the `group` property on users.    # noqa: E501

        :return: The include_group of this BasicUserQueryFilters.  # noqa: E501
        :rtype: bool
        """
        return self._include_group

    @include_group.setter
    def include_group(self, include_group):
        """Sets the include_group of this BasicUserQueryFilters.

        When set to `true` and the logged user has permission to view user groups, will return the `group` property on users.    # noqa: E501

        :param include_group: The include_group of this BasicUserQueryFilters.  # noqa: E501
        :type: bool
        """

        self._include_group = include_group

    @property
    def include_group_set(self):
        """Gets the include_group_set of this BasicUserQueryFilters.  # noqa: E501

        When set to `true` and the logged user has permission to view user group sets, will return the `groupSet` property on users.    # noqa: E501

        :return: The include_group_set of this BasicUserQueryFilters.  # noqa: E501
        :rtype: bool
        """
        return self._include_group_set

    @include_group_set.setter
    def include_group_set(self, include_group_set):
        """Sets the include_group_set of this BasicUserQueryFilters.

        When set to `true` and the logged user has permission to view user group sets, will return the `groupSet` property on users.    # noqa: E501

        :param include_group_set: The include_group_set of this BasicUserQueryFilters.  # noqa: E501
        :type: bool
        """

        self._include_group_set = include_group_set

    @property
    def address_result(self):
        """Gets the address_result of this BasicUserQueryFilters.  # noqa: E501

        Determines which address is returned on the search, if any. By default no addresses are returned. This option is useful for displaying results as locations on a map. In all cases only located addresses (those that have the geographical coordinates set) are returned. When returning all addresses, data related with multiple addresses is returned multiple times. Possible values are: * all: All addresses are returned. * nearest: The nearest address from the reference location is returned. Only usable if a reference coordinate (`latitude` and `longitude`) * none: Addresses are not returned. * primary: The primary (default) user address is returned   # noqa: E501

        :return: The address_result of this BasicUserQueryFilters.  # noqa: E501
        :rtype: UserAddressResultEnum
        """
        return self._address_result

    @address_result.setter
    def address_result(self, address_result):
        """Sets the address_result of this BasicUserQueryFilters.

        Determines which address is returned on the search, if any. By default no addresses are returned. This option is useful for displaying results as locations on a map. In all cases only located addresses (those that have the geographical coordinates set) are returned. When returning all addresses, data related with multiple addresses is returned multiple times. Possible values are: * all: All addresses are returned. * nearest: The nearest address from the reference location is returned. Only usable if a reference coordinate (`latitude` and `longitude`) * none: Addresses are not returned. * primary: The primary (default) user address is returned   # noqa: E501

        :param address_result: The address_result of this BasicUserQueryFilters.  # noqa: E501
        :type: UserAddressResultEnum
        """

        self._address_result = address_result

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BasicUserQueryFilters, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BasicUserQueryFilters):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BasicUserQueryFilters):
            return True

        return self.to_dict() != other.to_dict()
