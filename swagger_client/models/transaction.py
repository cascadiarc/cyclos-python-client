# coding: utf-8

"""
    Cyclos 4.11.5 API

    The REST API for Cyclos 4.11.5  # noqa: E501

    OpenAPI spec version: 4.11.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class Transaction(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'display': 'str',
        'transaction_number': 'str',
        'kind': 'TransactionKind',
        'ticket_number': 'str',
        '_date': 'datetime',
        'amount': 'BigDecimal',
        'from_kind': 'AccountKind',
        'from_user': 'User',
        'to_kind': 'AccountKind',
        'to_user': 'User',
        'type': 'TransferType',
        'currency': 'Currency',
        'authorization_status': 'TransactionAuthorizationStatusEnum',
        'description': 'str'
    }

    attribute_map = {
        'display': 'display',
        'transaction_number': 'transactionNumber',
        'kind': 'kind',
        'ticket_number': 'ticketNumber',
        '_date': 'date',
        'amount': 'amount',
        'from_kind': 'fromKind',
        'from_user': 'fromUser',
        'to_kind': 'toKind',
        'to_user': 'toUser',
        'type': 'type',
        'currency': 'currency',
        'authorization_status': 'authorizationStatus',
        'description': 'description'
    }

    def __init__(self, display=None, transaction_number=None, kind=None, ticket_number=None, _date=None, amount=None, from_kind=None, from_user=None, to_kind=None, to_user=None, type=None, currency=None, authorization_status=None, description=None, _configuration=None):  # noqa: E501
        """Transaction - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._display = None
        self._transaction_number = None
        self._kind = None
        self._ticket_number = None
        self.__date = None
        self._amount = None
        self._from_kind = None
        self._from_user = None
        self._to_kind = None
        self._to_user = None
        self._type = None
        self._currency = None
        self._authorization_status = None
        self._description = None
        self.discriminator = None

        if display is not None:
            self.display = display
        if transaction_number is not None:
            self.transaction_number = transaction_number
        if kind is not None:
            self.kind = kind
        if ticket_number is not None:
            self.ticket_number = ticket_number
        if _date is not None:
            self._date = _date
        if amount is not None:
            self.amount = amount
        if from_kind is not None:
            self.from_kind = from_kind
        if from_user is not None:
            self.from_user = from_user
        if to_kind is not None:
            self.to_kind = to_kind
        if to_user is not None:
            self.to_user = to_user
        if type is not None:
            self.type = type
        if currency is not None:
            self.currency = currency
        if authorization_status is not None:
            self.authorization_status = authorization_status
        if description is not None:
            self.description = description

    @property
    def display(self):
        """Gets the display of this Transaction.  # noqa: E501

        The descriptive text for this transaction, according to the transaction type and currency configuration in Cyclos    # noqa: E501

        :return: The display of this Transaction.  # noqa: E501
        :rtype: str
        """
        return self._display

    @display.setter
    def display(self, display):
        """Sets the display of this Transaction.

        The descriptive text for this transaction, according to the transaction type and currency configuration in Cyclos    # noqa: E501

        :param display: The display of this Transaction.  # noqa: E501
        :type: str
        """

        self._display = display

    @property
    def transaction_number(self):
        """Gets the transaction_number of this Transaction.  # noqa: E501

        The transaction number identifying this balance transfer. The currency configuration has the definition on whether transaction numbers are enabled and which format they have.   # noqa: E501

        :return: The transaction_number of this Transaction.  # noqa: E501
        :rtype: str
        """
        return self._transaction_number

    @transaction_number.setter
    def transaction_number(self, transaction_number):
        """Sets the transaction_number of this Transaction.

        The transaction number identifying this balance transfer. The currency configuration has the definition on whether transaction numbers are enabled and which format they have.   # noqa: E501

        :param transaction_number: The transaction_number of this Transaction.  # noqa: E501
        :type: str
        """

        self._transaction_number = transaction_number

    @property
    def kind(self):
        """Gets the kind of this Transaction.  # noqa: E501

        The transaction kind. For example, if the front end has distinct views for a regular payment, scheduled payment and so on, this information is useful to determine the actual view. Possible values are: * chargeback: Chargeback of a given transfer * externalPayment: A payment to an external user * import: An imported transaction * order: Transaction generated by confirming an order * payment: A direct payment * paymentRequest: A request for another user to accept a payment  * recurringPayment: A payment which is processed again periodically * scheduledPayment: A scheduled payment which is either a payment scheduled for a future date or has multiple installments * ticket: A payment whose the payer is unknown   # noqa: E501

        :return: The kind of this Transaction.  # noqa: E501
        :rtype: TransactionKind
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this Transaction.

        The transaction kind. For example, if the front end has distinct views for a regular payment, scheduled payment and so on, this information is useful to determine the actual view. Possible values are: * chargeback: Chargeback of a given transfer * externalPayment: A payment to an external user * import: An imported transaction * order: Transaction generated by confirming an order * payment: A direct payment * paymentRequest: A request for another user to accept a payment  * recurringPayment: A payment which is processed again periodically * scheduledPayment: A scheduled payment which is either a payment scheduled for a future date or has multiple installments * ticket: A payment whose the payer is unknown   # noqa: E501

        :param kind: The kind of this Transaction.  # noqa: E501
        :type: TransactionKind
        """

        self._kind = kind

    @property
    def ticket_number(self):
        """Gets the ticket_number of this Transaction.  # noqa: E501

        A 32-length alphanumeric ticket identifier. Only returned if kind  is `ticket`.   # noqa: E501

        :return: The ticket_number of this Transaction.  # noqa: E501
        :rtype: str
        """
        return self._ticket_number

    @ticket_number.setter
    def ticket_number(self, ticket_number):
        """Sets the ticket_number of this Transaction.

        A 32-length alphanumeric ticket identifier. Only returned if kind  is `ticket`.   # noqa: E501

        :param ticket_number: The ticket_number of this Transaction.  # noqa: E501
        :type: str
        """

        self._ticket_number = ticket_number

    @property
    def _date(self):
        """Gets the _date of this Transaction.  # noqa: E501

        The transfer date and time  # noqa: E501

        :return: The _date of this Transaction.  # noqa: E501
        :rtype: datetime
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this Transaction.

        The transfer date and time  # noqa: E501

        :param _date: The _date of this Transaction.  # noqa: E501
        :type: datetime
        """

        self.__date = _date

    @property
    def amount(self):
        """Gets the amount of this Transaction.  # noqa: E501

        The transfer amount. May be positive or negative.  # noqa: E501

        :return: The amount of this Transaction.  # noqa: E501
        :rtype: BigDecimal
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this Transaction.

        The transfer amount. May be positive or negative.  # noqa: E501

        :param amount: The amount of this Transaction.  # noqa: E501
        :type: BigDecimal
        """

        self._amount = amount

    @property
    def from_kind(self):
        """Gets the from_kind of this Transaction.  # noqa: E501

        The from account kind  # noqa: E501

        :return: The from_kind of this Transaction.  # noqa: E501
        :rtype: AccountKind
        """
        return self._from_kind

    @from_kind.setter
    def from_kind(self, from_kind):
        """Sets the from_kind of this Transaction.

        The from account kind  # noqa: E501

        :param from_kind: The from_kind of this Transaction.  # noqa: E501
        :type: AccountKind
        """

        self._from_kind = from_kind

    @property
    def from_user(self):
        """Gets the from_user of this Transaction.  # noqa: E501

        The user that performed this transaction. Is only returned if `fromKind` is `user`.   # noqa: E501

        :return: The from_user of this Transaction.  # noqa: E501
        :rtype: User
        """
        return self._from_user

    @from_user.setter
    def from_user(self, from_user):
        """Sets the from_user of this Transaction.

        The user that performed this transaction. Is only returned if `fromKind` is `user`.   # noqa: E501

        :param from_user: The from_user of this Transaction.  # noqa: E501
        :type: User
        """

        self._from_user = from_user

    @property
    def to_kind(self):
        """Gets the to_kind of this Transaction.  # noqa: E501

        The to account kind  # noqa: E501

        :return: The to_kind of this Transaction.  # noqa: E501
        :rtype: AccountKind
        """
        return self._to_kind

    @to_kind.setter
    def to_kind(self, to_kind):
        """Sets the to_kind of this Transaction.

        The to account kind  # noqa: E501

        :param to_kind: The to_kind of this Transaction.  # noqa: E501
        :type: AccountKind
        """

        self._to_kind = to_kind

    @property
    def to_user(self):
        """Gets the to_user of this Transaction.  # noqa: E501

        The user that performed this transaction. Is only returned if `toKind` is `user`.   # noqa: E501

        :return: The to_user of this Transaction.  # noqa: E501
        :rtype: User
        """
        return self._to_user

    @to_user.setter
    def to_user(self, to_user):
        """Sets the to_user of this Transaction.

        The user that performed this transaction. Is only returned if `toKind` is `user`.   # noqa: E501

        :param to_user: The to_user of this Transaction.  # noqa: E501
        :type: User
        """

        self._to_user = to_user

    @property
    def type(self):
        """Gets the type of this Transaction.  # noqa: E501

        The transaction type  # noqa: E501

        :return: The type of this Transaction.  # noqa: E501
        :rtype: TransferType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Transaction.

        The transaction type  # noqa: E501

        :param type: The type of this Transaction.  # noqa: E501
        :type: TransferType
        """

        self._type = type

    @property
    def currency(self):
        """Gets the currency of this Transaction.  # noqa: E501

        The transaction currency. Is only returned if this object is not embedded in a `TransferView`.   # noqa: E501

        :return: The currency of this Transaction.  # noqa: E501
        :rtype: Currency
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this Transaction.

        The transaction currency. Is only returned if this object is not embedded in a `TransferView`.   # noqa: E501

        :param currency: The currency of this Transaction.  # noqa: E501
        :type: Currency
        """

        self._currency = currency

    @property
    def authorization_status(self):
        """Gets the authorization_status of this Transaction.  # noqa: E501

        The status regarding authorization a transaction is in. If configured, transactions can require one or more levels of authorization in order to be processed. If a transaction has the this status null, it means it never went through the authorization process.  Possible values are: * authorized: The transaction was fully authorized and is processed * canceled: The authorization submission was canceled by the submitter * denied: The authorization was denied * pending: The transaction is pending authorization   # noqa: E501

        :return: The authorization_status of this Transaction.  # noqa: E501
        :rtype: TransactionAuthorizationStatusEnum
        """
        return self._authorization_status

    @authorization_status.setter
    def authorization_status(self, authorization_status):
        """Sets the authorization_status of this Transaction.

        The status regarding authorization a transaction is in. If configured, transactions can require one or more levels of authorization in order to be processed. If a transaction has the this status null, it means it never went through the authorization process.  Possible values are: * authorized: The transaction was fully authorized and is processed * canceled: The authorization submission was canceled by the submitter * denied: The authorization was denied * pending: The transaction is pending authorization   # noqa: E501

        :param authorization_status: The authorization_status of this Transaction.  # noqa: E501
        :type: TransactionAuthorizationStatusEnum
        """

        self._authorization_status = authorization_status

    @property
    def description(self):
        """Gets the description of this Transaction.  # noqa: E501

        The transaction description. Is optional.  # noqa: E501

        :return: The description of this Transaction.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Transaction.

        The transaction description. Is optional.  # noqa: E501

        :param description: The description of this Transaction.  # noqa: E501
        :type: str
        """

        self._description = description

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Transaction, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Transaction):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Transaction):
            return True

        return self.to_dict() != other.to_dict()
