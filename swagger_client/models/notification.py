# coding: utf-8

"""
    Cyclos 4.11.5 API

    The REST API for Cyclos 4.11.5  # noqa: E501

    OpenAPI spec version: 4.11.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class Notification(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        '_date': 'datetime',
        'related_user': 'User',
        'subject': 'str',
        'message': 'str',
        'type': 'NotificationTypeEnum',
        'entity_type': 'NotificationEntityTypeEnum',
        'read': 'bool',
        'location': 'str',
        'entity_id': 'str'
    }

    attribute_map = {
        '_date': 'date',
        'related_user': 'relatedUser',
        'subject': 'subject',
        'message': 'message',
        'type': 'type',
        'entity_type': 'entityType',
        'read': 'read',
        'location': 'location',
        'entity_id': 'entityId'
    }

    def __init__(self, _date=None, related_user=None, subject=None, message=None, type=None, entity_type=None, read=None, location=None, entity_id=None, _configuration=None):  # noqa: E501
        """Notification - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self.__date = None
        self._related_user = None
        self._subject = None
        self._message = None
        self._type = None
        self._entity_type = None
        self._read = None
        self._location = None
        self._entity_id = None
        self.discriminator = None

        if _date is not None:
            self._date = _date
        if related_user is not None:
            self.related_user = related_user
        if subject is not None:
            self.subject = subject
        if message is not None:
            self.message = message
        if type is not None:
            self.type = type
        if entity_type is not None:
            self.entity_type = entity_type
        if read is not None:
            self.read = read
        if location is not None:
            self.location = location
        if entity_id is not None:
            self.entity_id = entity_id

    @property
    def _date(self):
        """Gets the _date of this Notification.  # noqa: E501

        The notification date  # noqa: E501

        :return: The _date of this Notification.  # noqa: E501
        :rtype: datetime
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this Notification.

        The notification date  # noqa: E501

        :param _date: The _date of this Notification.  # noqa: E501
        :type: datetime
        """

        self.__date = _date

    @property
    def related_user(self):
        """Gets the related_user of this Notification.  # noqa: E501

        a user related to this message  # noqa: E501

        :return: The related_user of this Notification.  # noqa: E501
        :rtype: User
        """
        return self._related_user

    @related_user.setter
    def related_user(self, related_user):
        """Sets the related_user of this Notification.

        a user related to this message  # noqa: E501

        :param related_user: The related_user of this Notification.  # noqa: E501
        :type: User
        """

        self._related_user = related_user

    @property
    def subject(self):
        """Gets the subject of this Notification.  # noqa: E501

        The notification subject  # noqa: E501

        :return: The subject of this Notification.  # noqa: E501
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this Notification.

        The notification subject  # noqa: E501

        :param subject: The subject of this Notification.  # noqa: E501
        :type: str
        """

        self._subject = subject

    @property
    def message(self):
        """Gets the message of this Notification.  # noqa: E501

        The notification message  # noqa: E501

        :return: The message of this Notification.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this Notification.

        The notification message  # noqa: E501

        :param message: The message of this Notification.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def type(self):
        """Gets the type of this Notification.  # noqa: E501

        The different notification types generated for for users / administrators. Possible values are: * adAuthorized: A notification generated if a notification created when an advertisement is authorized. * adExpired: A notification generated if a notification created when an advertisement expires. * adInterestNotification: A notification generated if a notification created by a new advertisement (Simple or Webshop). * adPendingAuthorization: A notification generated if an ad is pending by broker authorization. * adPendingByAdminAuthorization: An admin notification generated if an advertisement is pending for authorization. * adQuestionAnswered: A notification generated if a question answered to some AD (Simple or Webshop). * adQuestionCreated: A notification generated if a question created to some AD (Simple or Webshop). * adRejected: A notification generated if a notification created when an advertisement authorization is rejected. * allNonSmsPerformedPayments: A notification generated if a user performed a new payment through a channel that is not the SMS channel. * applicationError: An admin notification generated if an application error has occurred. * articleOutOfStock: A notification generated if a webshop product is out of stock. * authorizedPaymentCanceled: A notification generated if the authorization of a payment was canceled. This notification is to be sent to the payer. * authorizedPaymentDenied: A notification generated if a the authorization of a payment was denied. This notification is to be sent to the payer. * authorizedPaymentSucceeded: A notification generated if the authorization of a payment succeeded (the payment went successfully through its final authorization and is now processed). This notification is to be sent to the payer. * boughtVouchersAboutToExpire: A notification generated if a one or more bought vouchers are about to expire. * boughtVouchersExpirationDateChanged: A notification generated if a bought voucher has new expiration date. * boughtVouchersExpired: A notification generated if one or more bought vouchers have expired. * brokerAssigned: A notification generated if a broker has been assigned to a user. * brokerUnassigned: A notification generated if a broker has been unassigned from a user. * externalPaymentExpired: A notification generated if the external payment has reached the expiration date. * externalPaymentPerformedFailed: A notification generated if the performed external payment has failed processing. * externalPaymentReceivedFailed: A notification generated if the received external payment has failed processing. * externalUserPaymentExpired: An admin notification generated if an external payment has expired. * externalUserPaymentPerformedFailed: An admin notification generated if an external payment failed processing. * feedbackChanged: A notification generated if a transaction feedback was modified. * feedbackCreated: A notification generated if a transaction feedback was created. * feedbackExpirationReminder: A notification generated if a transaction feedback is about to expire. * feedbackOptional: A notification generated if a performed payment can have an optional feedback. * feedbackReplyCreated: A notification generated if a transaction feedback was replied. * feedbackRequired: A notification generated if a performed payment needs to be given a feedback. * generatedVouchersAboutToExpire: An admin notification generated if a voucher will expire in a few days. * generatedVouchersExpired: An admin notification generated if a voucher has expired. * incomingRecurringPaymentCanceled: A notification generated if a recurring payment to a user has been canceled (only if the recurring payment is shown to receiver). * incomingRecurringPaymentFailed: A notification generated if a recurring payment to a user has failed (only if the recurring payment is shown to receiver). * incomingRecurringPaymentReceived: A notification generated if a recurring payment to a user was received (only if the recurring payment is shown to receiver). * incomingScheduledPaymentCanceled: A notification generated if a scheduled payment to a user has been canceled (only if the scheduled payment is shown to receiver). * incomingScheduledPaymentFailed: A notification generated if a scheduled payment to a user has failed (only if the scheduled payment is shown to receiver). * incomingScheduledPaymentReceived: A notification generated if a scheduled payment to a user was received (only if the scheduled payment is shown to receiver). * limitChange: A notification generated if a limit (lower/upper) has changed on an account. * lowStockQuantity: A notification generated if a product with stock quantity under limit. * maxSmsPerMonthReached: A notification generated if the maximum number of SMS messages per month has been reached. * memberAssigned: A notification generated if an user has been assigned to a broker. * memberUnassigned: A notification generated if an user has been unassigned from a broker. * networkCreated: An admin notification generated if a network is created. * newToken: A notification generated if a token / card has been created. * newTokenPendingActivation: A notification generated if a token / card has been created, but needs to be activated before being used. * operatorAuthorizedPaymentApprovedStillPending: A notification generated if a payment performed by an operator with auhorization type `operator` was approved, but there is at least one authorization level. * operatorAuthorizedPaymentCanceled: A notification generated if a payment performed by an operator with authorization type `operator` was canceled. * operatorAuthorizedPaymentDenied: A notification generated if a payment performed by an operator with authorization type `operator` was denied. * operatorAuthorizedPaymentSucceeded: A notification generated if a payment performed by an operator with authorization type `operator` was approved and there was no further authorization. * operatorPaymentAwaitingAuthorization: A notification generated if a payment performed by an operator with authorization type `operator` is pending by authorization. * orderCanceledBuyer: A notification generated if a pending order has been canceled. * orderCanceledSeller: A notification generated if a pending order has been canceled. * orderCreated: A notification generated if a new web shop order created from a shopping cart checkout. * orderPaymentCanceledBuyer: A notification generated if an order payment was canceled by authorizer. * orderPaymentCanceledSeller: A notification generated if an order payment was canceled by authorizer. * orderPaymentDeniedBuyer: A notification generated if an order payment was denied by authorizer. * orderPaymentDeniedSeller: A notification generated if an order payment was denied by authorizer. * orderPendingAuthorizationBuyer: A notification generated if an order accepted by buyer/seller but the payment is pending for authorization. * orderPendingAuthorizationSeller: A notification generated if an order accepted by buyer/seller but the payment is pending for authorization. * orderPendingBuyer: A notification generated if an order pending buyer approval. * orderPendingDeliveryDataBuyer: A notification generated if an order buyer needs to fill in the delivery data. * orderPendingDeliveryDataSeller: A notification generated if an order seller needs to fill in the delivery data. * orderRealizedBuyer: A notification generated if an order accepted by buyer (sent to seller). * orderRealizedSeller: A notification generated if an order accepted by seller (sent to buyer). * orderRejectedByBuyer: A notification generated if an order rejected by buyer. * orderRejectedBySeller: A notification generated if an order rejected by seller. * passwordStatusChanged: A notification generated if a password status has changed. * paymentAwaitingAdminAuthorization: An admin notification generated if a payment is awaiting for authorization. * paymentAwaitingAuthorization: A notification generated if a user must authorize a pending payment. * paymentPerformed: An admin notification generated if a payment is performed. * paymentReceived: A notification generated if a user received a new payment. * paymentRequestCanceled: A notification generated if a payment request was canceled. * paymentRequestDenied: A notification generated if a payment request was denied. * paymentRequestExpirationDateChanged: A notification generated if the payment request's expiration date has changed. * paymentRequestExpired: A notification generated if a payment request has expired. * paymentRequestProcessed: A notification generated if a payment request was processed. * paymentRequestReceived: A notification generated if a payment request was received. * recurringPaymentFailed: A notification generated if a recurring payment from a user has failed (probably because of lack of funds). * recurringPaymentOccurrenceProcessed: A notification generated if an occurrence of an outgoing recurring payment was processed. * referenceChanged: A notification generated if a reference was modified. * referenceCreated: A notification generated if a reference has been set. * salePendingBuyer: A notification generated if a sale pending buyer approval. * saleRealizedBuyer: A notification generated if a sale accepted by buyer (sent to seller). * saleRejectedSeller: A notification generated if a sale rejected by seller. * scheduledPaymentFailed: A notification generated if a scheduled payment from a user has failed (probably because of lack of funds). * scheduledPaymentInstallmentProcessed: A notification generated if a scheduled payment to a user has been processed. * scheduledPaymentRequestFailed: A notification generated if a payment request which was scheduled has failed processing (probably because of lack of funds), and is being reopened. * smsPerformedPayment: A notification generated if a user performed a new payment through SMS. * systemAlert: An admin notification generated if a system alert as occurred. * ticketWebhookFailed: A notification generated if the invocation of a webhook after (a successful) ticket approval has failed. * tokenStatusChanged: A notification generated if a token / card status has changed. * userAlert: An admin notification generated if a member alert as occurred. * userImport: An admin notification generated if a user import has been done. * userRegistration: An admin notification generated if a new user has been registered. * userStatusChanged: A notification generated if a user status has changed. * voucherBuyingAboutToExpire: An admin notification generated if a voucher type allowing buy is about to expire.   # noqa: E501

        :return: The type of this Notification.  # noqa: E501
        :rtype: NotificationTypeEnum
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Notification.

        The different notification types generated for for users / administrators. Possible values are: * adAuthorized: A notification generated if a notification created when an advertisement is authorized. * adExpired: A notification generated if a notification created when an advertisement expires. * adInterestNotification: A notification generated if a notification created by a new advertisement (Simple or Webshop). * adPendingAuthorization: A notification generated if an ad is pending by broker authorization. * adPendingByAdminAuthorization: An admin notification generated if an advertisement is pending for authorization. * adQuestionAnswered: A notification generated if a question answered to some AD (Simple or Webshop). * adQuestionCreated: A notification generated if a question created to some AD (Simple or Webshop). * adRejected: A notification generated if a notification created when an advertisement authorization is rejected. * allNonSmsPerformedPayments: A notification generated if a user performed a new payment through a channel that is not the SMS channel. * applicationError: An admin notification generated if an application error has occurred. * articleOutOfStock: A notification generated if a webshop product is out of stock. * authorizedPaymentCanceled: A notification generated if the authorization of a payment was canceled. This notification is to be sent to the payer. * authorizedPaymentDenied: A notification generated if a the authorization of a payment was denied. This notification is to be sent to the payer. * authorizedPaymentSucceeded: A notification generated if the authorization of a payment succeeded (the payment went successfully through its final authorization and is now processed). This notification is to be sent to the payer. * boughtVouchersAboutToExpire: A notification generated if a one or more bought vouchers are about to expire. * boughtVouchersExpirationDateChanged: A notification generated if a bought voucher has new expiration date. * boughtVouchersExpired: A notification generated if one or more bought vouchers have expired. * brokerAssigned: A notification generated if a broker has been assigned to a user. * brokerUnassigned: A notification generated if a broker has been unassigned from a user. * externalPaymentExpired: A notification generated if the external payment has reached the expiration date. * externalPaymentPerformedFailed: A notification generated if the performed external payment has failed processing. * externalPaymentReceivedFailed: A notification generated if the received external payment has failed processing. * externalUserPaymentExpired: An admin notification generated if an external payment has expired. * externalUserPaymentPerformedFailed: An admin notification generated if an external payment failed processing. * feedbackChanged: A notification generated if a transaction feedback was modified. * feedbackCreated: A notification generated if a transaction feedback was created. * feedbackExpirationReminder: A notification generated if a transaction feedback is about to expire. * feedbackOptional: A notification generated if a performed payment can have an optional feedback. * feedbackReplyCreated: A notification generated if a transaction feedback was replied. * feedbackRequired: A notification generated if a performed payment needs to be given a feedback. * generatedVouchersAboutToExpire: An admin notification generated if a voucher will expire in a few days. * generatedVouchersExpired: An admin notification generated if a voucher has expired. * incomingRecurringPaymentCanceled: A notification generated if a recurring payment to a user has been canceled (only if the recurring payment is shown to receiver). * incomingRecurringPaymentFailed: A notification generated if a recurring payment to a user has failed (only if the recurring payment is shown to receiver). * incomingRecurringPaymentReceived: A notification generated if a recurring payment to a user was received (only if the recurring payment is shown to receiver). * incomingScheduledPaymentCanceled: A notification generated if a scheduled payment to a user has been canceled (only if the scheduled payment is shown to receiver). * incomingScheduledPaymentFailed: A notification generated if a scheduled payment to a user has failed (only if the scheduled payment is shown to receiver). * incomingScheduledPaymentReceived: A notification generated if a scheduled payment to a user was received (only if the scheduled payment is shown to receiver). * limitChange: A notification generated if a limit (lower/upper) has changed on an account. * lowStockQuantity: A notification generated if a product with stock quantity under limit. * maxSmsPerMonthReached: A notification generated if the maximum number of SMS messages per month has been reached. * memberAssigned: A notification generated if an user has been assigned to a broker. * memberUnassigned: A notification generated if an user has been unassigned from a broker. * networkCreated: An admin notification generated if a network is created. * newToken: A notification generated if a token / card has been created. * newTokenPendingActivation: A notification generated if a token / card has been created, but needs to be activated before being used. * operatorAuthorizedPaymentApprovedStillPending: A notification generated if a payment performed by an operator with auhorization type `operator` was approved, but there is at least one authorization level. * operatorAuthorizedPaymentCanceled: A notification generated if a payment performed by an operator with authorization type `operator` was canceled. * operatorAuthorizedPaymentDenied: A notification generated if a payment performed by an operator with authorization type `operator` was denied. * operatorAuthorizedPaymentSucceeded: A notification generated if a payment performed by an operator with authorization type `operator` was approved and there was no further authorization. * operatorPaymentAwaitingAuthorization: A notification generated if a payment performed by an operator with authorization type `operator` is pending by authorization. * orderCanceledBuyer: A notification generated if a pending order has been canceled. * orderCanceledSeller: A notification generated if a pending order has been canceled. * orderCreated: A notification generated if a new web shop order created from a shopping cart checkout. * orderPaymentCanceledBuyer: A notification generated if an order payment was canceled by authorizer. * orderPaymentCanceledSeller: A notification generated if an order payment was canceled by authorizer. * orderPaymentDeniedBuyer: A notification generated if an order payment was denied by authorizer. * orderPaymentDeniedSeller: A notification generated if an order payment was denied by authorizer. * orderPendingAuthorizationBuyer: A notification generated if an order accepted by buyer/seller but the payment is pending for authorization. * orderPendingAuthorizationSeller: A notification generated if an order accepted by buyer/seller but the payment is pending for authorization. * orderPendingBuyer: A notification generated if an order pending buyer approval. * orderPendingDeliveryDataBuyer: A notification generated if an order buyer needs to fill in the delivery data. * orderPendingDeliveryDataSeller: A notification generated if an order seller needs to fill in the delivery data. * orderRealizedBuyer: A notification generated if an order accepted by buyer (sent to seller). * orderRealizedSeller: A notification generated if an order accepted by seller (sent to buyer). * orderRejectedByBuyer: A notification generated if an order rejected by buyer. * orderRejectedBySeller: A notification generated if an order rejected by seller. * passwordStatusChanged: A notification generated if a password status has changed. * paymentAwaitingAdminAuthorization: An admin notification generated if a payment is awaiting for authorization. * paymentAwaitingAuthorization: A notification generated if a user must authorize a pending payment. * paymentPerformed: An admin notification generated if a payment is performed. * paymentReceived: A notification generated if a user received a new payment. * paymentRequestCanceled: A notification generated if a payment request was canceled. * paymentRequestDenied: A notification generated if a payment request was denied. * paymentRequestExpirationDateChanged: A notification generated if the payment request's expiration date has changed. * paymentRequestExpired: A notification generated if a payment request has expired. * paymentRequestProcessed: A notification generated if a payment request was processed. * paymentRequestReceived: A notification generated if a payment request was received. * recurringPaymentFailed: A notification generated if a recurring payment from a user has failed (probably because of lack of funds). * recurringPaymentOccurrenceProcessed: A notification generated if an occurrence of an outgoing recurring payment was processed. * referenceChanged: A notification generated if a reference was modified. * referenceCreated: A notification generated if a reference has been set. * salePendingBuyer: A notification generated if a sale pending buyer approval. * saleRealizedBuyer: A notification generated if a sale accepted by buyer (sent to seller). * saleRejectedSeller: A notification generated if a sale rejected by seller. * scheduledPaymentFailed: A notification generated if a scheduled payment from a user has failed (probably because of lack of funds). * scheduledPaymentInstallmentProcessed: A notification generated if a scheduled payment to a user has been processed. * scheduledPaymentRequestFailed: A notification generated if a payment request which was scheduled has failed processing (probably because of lack of funds), and is being reopened. * smsPerformedPayment: A notification generated if a user performed a new payment through SMS. * systemAlert: An admin notification generated if a system alert as occurred. * ticketWebhookFailed: A notification generated if the invocation of a webhook after (a successful) ticket approval has failed. * tokenStatusChanged: A notification generated if a token / card status has changed. * userAlert: An admin notification generated if a member alert as occurred. * userImport: An admin notification generated if a user import has been done. * userRegistration: An admin notification generated if a new user has been registered. * userStatusChanged: A notification generated if a user status has changed. * voucherBuyingAboutToExpire: An admin notification generated if a voucher type allowing buy is about to expire.   # noqa: E501

        :param type: The type of this Notification.  # noqa: E501
        :type: NotificationTypeEnum
        """

        self._type = type

    @property
    def entity_type(self):
        """Gets the entity_type of this Notification.  # noqa: E501

        The type of the entity referenced by the notification, if any. Possible values are: * adQuestion: The entity is an advertisement question * errorLog: The entity is an error log * feedback: The entity is a transaction feedback * installment: The entity is a scheduled payment installment * marketplace: The entity is a `simple` or `webshop` advertisement  * network: The entity is a network * occurrence: The entity is a failed occurrence of a recurring payment * order: The entity is an order * passwordType: The entity is a password type * reference: The entity is an user reference * systemAlert: The entity is a system alert * token: The entity is a token (user identification) * transaction: The entity is a transaction * transfer: The entity is a transfer * user: The entity is an user * userAlert: The entity is an user alert * userImportedFile: The entity is an user imported file * voucher: The entity is a voucher * voucherType: The entity is a voucher type   # noqa: E501

        :return: The entity_type of this Notification.  # noqa: E501
        :rtype: NotificationEntityTypeEnum
        """
        return self._entity_type

    @entity_type.setter
    def entity_type(self, entity_type):
        """Sets the entity_type of this Notification.

        The type of the entity referenced by the notification, if any. Possible values are: * adQuestion: The entity is an advertisement question * errorLog: The entity is an error log * feedback: The entity is a transaction feedback * installment: The entity is a scheduled payment installment * marketplace: The entity is a `simple` or `webshop` advertisement  * network: The entity is a network * occurrence: The entity is a failed occurrence of a recurring payment * order: The entity is an order * passwordType: The entity is a password type * reference: The entity is an user reference * systemAlert: The entity is a system alert * token: The entity is a token (user identification) * transaction: The entity is a transaction * transfer: The entity is a transfer * user: The entity is an user * userAlert: The entity is an user alert * userImportedFile: The entity is an user imported file * voucher: The entity is a voucher * voucherType: The entity is a voucher type   # noqa: E501

        :param entity_type: The entity_type of this Notification.  # noqa: E501
        :type: NotificationEntityTypeEnum
        """

        self._entity_type = entity_type

    @property
    def read(self):
        """Gets the read of this Notification.  # noqa: E501

        Indicates whether the notification was marked as already read or not  # noqa: E501

        :return: The read of this Notification.  # noqa: E501
        :rtype: bool
        """
        return self._read

    @read.setter
    def read(self, read):
        """Sets the read of this Notification.

        Indicates whether the notification was marked as already read or not  # noqa: E501

        :param read: The read of this Notification.  # noqa: E501
        :type: bool
        """

        self._read = read

    @property
    def location(self):
        """Gets the location of this Notification.  # noqa: E501

        (Deprecated) The standard location to which the notification points to  # noqa: E501

        :return: The location of this Notification.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this Notification.

        (Deprecated) The standard location to which the notification points to  # noqa: E501

        :param location: The location of this Notification.  # noqa: E501
        :type: str
        """

        self._location = location

    @property
    def entity_id(self):
        """Gets the entity_id of this Notification.  # noqa: E501

        The identifier of the entity referenced by the notification, if any. The `entityType` and `entityId` attributes are both not null or both null in case there is a referenced entity.    # noqa: E501

        :return: The entity_id of this Notification.  # noqa: E501
        :rtype: str
        """
        return self._entity_id

    @entity_id.setter
    def entity_id(self, entity_id):
        """Sets the entity_id of this Notification.

        The identifier of the entity referenced by the notification, if any. The `entityType` and `entityId` attributes are both not null or both null in case there is a referenced entity.    # noqa: E501

        :param entity_id: The entity_id of this Notification.  # noqa: E501
        :type: str
        """

        self._entity_id = entity_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Notification, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Notification):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Notification):
            return True

        return self.to_dict() != other.to_dict()
