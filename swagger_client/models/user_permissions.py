# coding: utf-8

"""
    Cyclos 4.11.5 API

    The REST API for Cyclos 4.11.5  # noqa: E501

    OpenAPI spec version: 4.11.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class UserPermissions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'profile': 'UserProfilePermissions',
        'contact': 'UserContactPermissions',
        'marketplace': 'UserMarketplacePermissions',
        'accounts': 'list[AccountWithCurrency]',
        'payment': 'UserPaymentPermissions',
        'records': 'list[OwnerRecordPermissions]',
        'operations': 'list[Operation]',
        'tokens': 'list[TokenType]',
        'personalize_nfc_tokens': 'list[TokenType]'
    }

    attribute_map = {
        'profile': 'profile',
        'contact': 'contact',
        'marketplace': 'marketplace',
        'accounts': 'accounts',
        'payment': 'payment',
        'records': 'records',
        'operations': 'operations',
        'tokens': 'tokens',
        'personalize_nfc_tokens': 'personalizeNfcTokens'
    }

    def __init__(self, profile=None, contact=None, marketplace=None, accounts=None, payment=None, records=None, operations=None, tokens=None, personalize_nfc_tokens=None, _configuration=None):  # noqa: E501
        """UserPermissions - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._profile = None
        self._contact = None
        self._marketplace = None
        self._accounts = None
        self._payment = None
        self._records = None
        self._operations = None
        self._tokens = None
        self._personalize_nfc_tokens = None
        self.discriminator = None

        if profile is not None:
            self.profile = profile
        if contact is not None:
            self.contact = contact
        if marketplace is not None:
            self.marketplace = marketplace
        if accounts is not None:
            self.accounts = accounts
        if payment is not None:
            self.payment = payment
        if records is not None:
            self.records = records
        if operations is not None:
            self.operations = operations
        if tokens is not None:
            self.tokens = tokens
        if personalize_nfc_tokens is not None:
            self.personalize_nfc_tokens = personalize_nfc_tokens

    @property
    def profile(self):
        """Gets the profile of this UserPermissions.  # noqa: E501

        Permissions over the user profile  # noqa: E501

        :return: The profile of this UserPermissions.  # noqa: E501
        :rtype: UserProfilePermissions
        """
        return self._profile

    @profile.setter
    def profile(self, profile):
        """Sets the profile of this UserPermissions.

        Permissions over the user profile  # noqa: E501

        :param profile: The profile of this UserPermissions.  # noqa: E501
        :type: UserProfilePermissions
        """

        self._profile = profile

    @property
    def contact(self):
        """Gets the contact of this UserPermissions.  # noqa: E501

        Permissions over a contact  # noqa: E501

        :return: The contact of this UserPermissions.  # noqa: E501
        :rtype: UserContactPermissions
        """
        return self._contact

    @contact.setter
    def contact(self, contact):
        """Sets the contact of this UserPermissions.

        Permissions over a contact  # noqa: E501

        :param contact: The contact of this UserPermissions.  # noqa: E501
        :type: UserContactPermissions
        """

        self._contact = contact

    @property
    def marketplace(self):
        """Gets the marketplace of this UserPermissions.  # noqa: E501

        Permissions over the user marketplace  # noqa: E501

        :return: The marketplace of this UserPermissions.  # noqa: E501
        :rtype: UserMarketplacePermissions
        """
        return self._marketplace

    @marketplace.setter
    def marketplace(self, marketplace):
        """Sets the marketplace of this UserPermissions.

        Permissions over the user marketplace  # noqa: E501

        :param marketplace: The marketplace of this UserPermissions.  # noqa: E501
        :type: UserMarketplacePermissions
        """

        self._marketplace = marketplace

    @property
    def accounts(self):
        """Gets the accounts of this UserPermissions.  # noqa: E501

        Accounts which can be viewed by the authenticated user  # noqa: E501

        :return: The accounts of this UserPermissions.  # noqa: E501
        :rtype: list[AccountWithCurrency]
        """
        return self._accounts

    @accounts.setter
    def accounts(self, accounts):
        """Sets the accounts of this UserPermissions.

        Accounts which can be viewed by the authenticated user  # noqa: E501

        :param accounts: The accounts of this UserPermissions.  # noqa: E501
        :type: list[AccountWithCurrency]
        """

        self._accounts = accounts

    @property
    def payment(self):
        """Gets the payment of this UserPermissions.  # noqa: E501

        Permissions for payments regarding this user  # noqa: E501

        :return: The payment of this UserPermissions.  # noqa: E501
        :rtype: UserPaymentPermissions
        """
        return self._payment

    @payment.setter
    def payment(self, payment):
        """Sets the payment of this UserPermissions.

        Permissions for payments regarding this user  # noqa: E501

        :param payment: The payment of this UserPermissions.  # noqa: E501
        :type: UserPaymentPermissions
        """

        self._payment = payment

    @property
    def records(self):
        """Gets the records of this UserPermissions.  # noqa: E501

        Records types the authenticated user can view over the given user   # noqa: E501

        :return: The records of this UserPermissions.  # noqa: E501
        :rtype: list[OwnerRecordPermissions]
        """
        return self._records

    @records.setter
    def records(self, records):
        """Sets the records of this UserPermissions.

        Records types the authenticated user can view over the given user   # noqa: E501

        :param records: The records of this UserPermissions.  # noqa: E501
        :type: list[OwnerRecordPermissions]
        """

        self._records = records

    @property
    def operations(self):
        """Gets the operations of this UserPermissions.  # noqa: E501

        Custom operations the authenticated user can run over the given user   # noqa: E501

        :return: The operations of this UserPermissions.  # noqa: E501
        :rtype: list[Operation]
        """
        return self._operations

    @operations.setter
    def operations(self, operations):
        """Sets the operations of this UserPermissions.

        Custom operations the authenticated user can run over the given user   # noqa: E501

        :param operations: The operations of this UserPermissions.  # noqa: E501
        :type: list[Operation]
        """

        self._operations = operations

    @property
    def tokens(self):
        """Gets the tokens of this UserPermissions.  # noqa: E501

        Tokens the authenticated user can view over the given user   # noqa: E501

        :return: The tokens of this UserPermissions.  # noqa: E501
        :rtype: list[TokenType]
        """
        return self._tokens

    @tokens.setter
    def tokens(self, tokens):
        """Sets the tokens of this UserPermissions.

        Tokens the authenticated user can view over the given user   # noqa: E501

        :param tokens: The tokens of this UserPermissions.  # noqa: E501
        :type: list[TokenType]
        """

        self._tokens = tokens

    @property
    def personalize_nfc_tokens(self):
        """Gets the personalize_nfc_tokens of this UserPermissions.  # noqa: E501

        NFC tokens the authenticated user can personalize for the given user   # noqa: E501

        :return: The personalize_nfc_tokens of this UserPermissions.  # noqa: E501
        :rtype: list[TokenType]
        """
        return self._personalize_nfc_tokens

    @personalize_nfc_tokens.setter
    def personalize_nfc_tokens(self, personalize_nfc_tokens):
        """Sets the personalize_nfc_tokens of this UserPermissions.

        NFC tokens the authenticated user can personalize for the given user   # noqa: E501

        :param personalize_nfc_tokens: The personalize_nfc_tokens of this UserPermissions.  # noqa: E501
        :type: list[TokenType]
        """

        self._personalize_nfc_tokens = personalize_nfc_tokens

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserPermissions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserPermissions):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UserPermissions):
            return True

        return self.to_dict() != other.to_dict()
