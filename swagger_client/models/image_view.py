# coding: utf-8

"""
    Cyclos 4.11.5 API

    The REST API for Cyclos 4.11.5  # noqa: E501

    OpenAPI spec version: 4.11.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class ImageView(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'kind': 'ImageKind',
        'converted_to_jpeg': 'bool'
    }

    attribute_map = {
        'kind': 'kind',
        'converted_to_jpeg': 'convertedToJpeg'
    }

    def __init__(self, kind=None, converted_to_jpeg=None, _configuration=None):  # noqa: E501
        """ImageView - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._kind = None
        self._converted_to_jpeg = None
        self.discriminator = None

        if kind is not None:
            self.kind = kind
        if converted_to_jpeg is not None:
            self.converted_to_jpeg = converted_to_jpeg

    @property
    def kind(self):
        """Gets the kind of this ImageView.  # noqa: E501

        Determines the kind of an image Possible values are: * contactInfo: An image of an additional contact information * customFieldValue: An image used as custom field value * marketplace: Advertisement images are associated with an advertisement, be it simple or for web shop. * marketplaceCategory: An image of an advertisement (simple or webshop) * profile: User profile images are those associated with the user profile. The first profile image is used to depict the user on search results. * systemCustom: System custom images are additional images an administrator that can be used on rich text contents. * temp: A temporary image which can upload for later associating with an entity being registered (for example, user or advertisement). * userCustom: User custom images are additional images that can be used on rich text contents. * voucherType: An image of a voucher type   # noqa: E501

        :return: The kind of this ImageView.  # noqa: E501
        :rtype: ImageKind
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this ImageView.

        Determines the kind of an image Possible values are: * contactInfo: An image of an additional contact information * customFieldValue: An image used as custom field value * marketplace: Advertisement images are associated with an advertisement, be it simple or for web shop. * marketplaceCategory: An image of an advertisement (simple or webshop) * profile: User profile images are those associated with the user profile. The first profile image is used to depict the user on search results. * systemCustom: System custom images are additional images an administrator that can be used on rich text contents. * temp: A temporary image which can upload for later associating with an entity being registered (for example, user or advertisement). * userCustom: User custom images are additional images that can be used on rich text contents. * voucherType: An image of a voucher type   # noqa: E501

        :param kind: The kind of this ImageView.  # noqa: E501
        :type: ImageKind
        """

        self._kind = kind

    @property
    def converted_to_jpeg(self):
        """Gets the converted_to_jpeg of this ImageView.  # noqa: E501

        Indicates whether this was originally a PNG format that exceeded the maximum allowed size and was automatically converted to JPEG.   # noqa: E501

        :return: The converted_to_jpeg of this ImageView.  # noqa: E501
        :rtype: bool
        """
        return self._converted_to_jpeg

    @converted_to_jpeg.setter
    def converted_to_jpeg(self, converted_to_jpeg):
        """Sets the converted_to_jpeg of this ImageView.

        Indicates whether this was originally a PNG format that exceeded the maximum allowed size and was automatically converted to JPEG.   # noqa: E501

        :param converted_to_jpeg: The converted_to_jpeg of this ImageView.  # noqa: E501
        :type: bool
        """

        self._converted_to_jpeg = converted_to_jpeg

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ImageView, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ImageView):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ImageView):
            return True

        return self.to_dict() != other.to_dict()
