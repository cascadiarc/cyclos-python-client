# coding: utf-8

"""
    Cyclos 4.11.5 API

    The REST API for Cyclos 4.11.5  # noqa: E501

    OpenAPI spec version: 4.11.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class NfcInitializeResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'tag_key': 'str',
        'application_key': 'str',
        'operational_key': 'str',
        'token_label': 'str'
    }

    attribute_map = {
        'tag_key': 'tagKey',
        'application_key': 'applicationKey',
        'operational_key': 'operationalKey',
        'token_label': 'tokenLabel'
    }

    def __init__(self, tag_key=None, application_key=None, operational_key=None, token_label=None, _configuration=None):  # noqa: E501
        """NfcInitializeResult - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._tag_key = None
        self._application_key = None
        self._operational_key = None
        self._token_label = None
        self.discriminator = None

        if tag_key is not None:
            self.tag_key = tag_key
        if application_key is not None:
            self.application_key = application_key
        if operational_key is not None:
            self.operational_key = operational_key
        if token_label is not None:
            self.token_label = token_label

    @property
    def tag_key(self):
        """Gets the tag_key of this NfcInitializeResult.  # noqa: E501

        The PICC Master Key that should be used to seal the NFC tag, encoded as hex.   # noqa: E501

        :return: The tag_key of this NfcInitializeResult.  # noqa: E501
        :rtype: str
        """
        return self._tag_key

    @tag_key.setter
    def tag_key(self, tag_key):
        """Sets the tag_key of this NfcInitializeResult.

        The PICC Master Key that should be used to seal the NFC tag, encoded as hex.   # noqa: E501

        :param tag_key: The tag_key of this NfcInitializeResult.  # noqa: E501
        :type: str
        """

        self._tag_key = tag_key

    @property
    def application_key(self):
        """Gets the application_key of this NfcInitializeResult.  # noqa: E501

        The Application Master Key that should be used on the application entry of the NFC tag, encoded as hex.   # noqa: E501

        :return: The application_key of this NfcInitializeResult.  # noqa: E501
        :rtype: str
        """
        return self._application_key

    @application_key.setter
    def application_key(self, application_key):
        """Sets the application_key of this NfcInitializeResult.

        The Application Master Key that should be used on the application entry of the NFC tag, encoded as hex.   # noqa: E501

        :param application_key: The application_key of this NfcInitializeResult.  # noqa: E501
        :type: str
        """

        self._application_key = application_key

    @property
    def operational_key(self):
        """Gets the operational_key of this NfcInitializeResult.  # noqa: E501

        The Application Key used to operate with the tag, encoded as hex. Used when making a payment or to assign an already initialized tag to a user.   # noqa: E501

        :return: The operational_key of this NfcInitializeResult.  # noqa: E501
        :rtype: str
        """
        return self._operational_key

    @operational_key.setter
    def operational_key(self, operational_key):
        """Sets the operational_key of this NfcInitializeResult.

        The Application Key used to operate with the tag, encoded as hex. Used when making a payment or to assign an already initialized tag to a user.   # noqa: E501

        :param operational_key: The operational_key of this NfcInitializeResult.  # noqa: E501
        :type: str
        """

        self._operational_key = operational_key

    @property
    def token_label(self):
        """Gets the token_label of this NfcInitializeResult.  # noqa: E501

        The same label given by the client at initialization or the label generated according the the pattern defined.   # noqa: E501

        :return: The token_label of this NfcInitializeResult.  # noqa: E501
        :rtype: str
        """
        return self._token_label

    @token_label.setter
    def token_label(self, token_label):
        """Sets the token_label of this NfcInitializeResult.

        The same label given by the client at initialization or the label generated according the the pattern defined.   # noqa: E501

        :param token_label: The token_label of this NfcInitializeResult.  # noqa: E501
        :type: str
        """

        self._token_label = token_label

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NfcInitializeResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NfcInitializeResult):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, NfcInitializeResult):
            return True

        return self.to_dict() != other.to_dict()
