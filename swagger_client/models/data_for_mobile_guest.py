# coding: utf-8

"""
    Cyclos 4.11.5 API

    The REST API for Cyclos 4.11.5  # noqa: E501

    OpenAPI spec version: 4.11.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class DataForMobileGuest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'allow_quick_payment': 'bool',
        'data_for_login': 'DataForLogin',
        'groups_for_registration': 'list[GroupForRegistration]',
        'header': 'UIElementWithContent',
        'footer': 'UIElementWithContent'
    }

    attribute_map = {
        'allow_quick_payment': 'allowQuickPayment',
        'data_for_login': 'dataForLogin',
        'groups_for_registration': 'groupsForRegistration',
        'header': 'header',
        'footer': 'footer'
    }

    def __init__(self, allow_quick_payment=None, data_for_login=None, groups_for_registration=None, header=None, footer=None, _configuration=None):  # noqa: E501
        """DataForMobileGuest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._allow_quick_payment = None
        self._data_for_login = None
        self._groups_for_registration = None
        self._header = None
        self._footer = None
        self.discriminator = None

        if allow_quick_payment is not None:
            self.allow_quick_payment = allow_quick_payment
        if data_for_login is not None:
            self.data_for_login = data_for_login
        if groups_for_registration is not None:
            self.groups_for_registration = groups_for_registration
        if header is not None:
            self.header = header
        if footer is not None:
            self.footer = footer

    @property
    def allow_quick_payment(self):
        """Gets the allow_quick_payment of this DataForMobileGuest.  # noqa: E501

        Enables a quick payment action by showing the option to scan a QR code at login page.   # noqa: E501

        :return: The allow_quick_payment of this DataForMobileGuest.  # noqa: E501
        :rtype: bool
        """
        return self._allow_quick_payment

    @allow_quick_payment.setter
    def allow_quick_payment(self, allow_quick_payment):
        """Sets the allow_quick_payment of this DataForMobileGuest.

        Enables a quick payment action by showing the option to scan a QR code at login page.   # noqa: E501

        :param allow_quick_payment: The allow_quick_payment of this DataForMobileGuest.  # noqa: E501
        :type: bool
        """

        self._allow_quick_payment = allow_quick_payment

    @property
    def data_for_login(self):
        """Gets the data_for_login of this DataForMobileGuest.  # noqa: E501

        The data for user login  # noqa: E501

        :return: The data_for_login of this DataForMobileGuest.  # noqa: E501
        :rtype: DataForLogin
        """
        return self._data_for_login

    @data_for_login.setter
    def data_for_login(self, data_for_login):
        """Sets the data_for_login of this DataForMobileGuest.

        The data for user login  # noqa: E501

        :param data_for_login: The data_for_login of this DataForMobileGuest.  # noqa: E501
        :type: DataForLogin
        """

        self._data_for_login = data_for_login

    @property
    def groups_for_registration(self):
        """Gets the groups_for_registration of this DataForMobileGuest.  # noqa: E501

        The list of groups the authenticated user can use to perform a new user registration  # noqa: E501

        :return: The groups_for_registration of this DataForMobileGuest.  # noqa: E501
        :rtype: list[GroupForRegistration]
        """
        return self._groups_for_registration

    @groups_for_registration.setter
    def groups_for_registration(self, groups_for_registration):
        """Sets the groups_for_registration of this DataForMobileGuest.

        The list of groups the authenticated user can use to perform a new user registration  # noqa: E501

        :param groups_for_registration: The groups_for_registration of this DataForMobileGuest.  # noqa: E501
        :type: list[GroupForRegistration]
        """

        self._groups_for_registration = groups_for_registration

    @property
    def header(self):
        """Gets the header of this DataForMobileGuest.  # noqa: E501

        The mobile header  # noqa: E501

        :return: The header of this DataForMobileGuest.  # noqa: E501
        :rtype: UIElementWithContent
        """
        return self._header

    @header.setter
    def header(self, header):
        """Sets the header of this DataForMobileGuest.

        The mobile header  # noqa: E501

        :param header: The header of this DataForMobileGuest.  # noqa: E501
        :type: UIElementWithContent
        """

        self._header = header

    @property
    def footer(self):
        """Gets the footer of this DataForMobileGuest.  # noqa: E501

        The mobile footer  # noqa: E501

        :return: The footer of this DataForMobileGuest.  # noqa: E501
        :rtype: UIElementWithContent
        """
        return self._footer

    @footer.setter
    def footer(self, footer):
        """Sets the footer of this DataForMobileGuest.

        The mobile footer  # noqa: E501

        :param footer: The footer of this DataForMobileGuest.  # noqa: E501
        :type: UIElementWithContent
        """

        self._footer = footer

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DataForMobileGuest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataForMobileGuest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DataForMobileGuest):
            return True

        return self.to_dict() != other.to_dict()
