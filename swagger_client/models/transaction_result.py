# coding: utf-8

"""
    Cyclos 4.11.5 API

    The REST API for Cyclos 4.11.5  # noqa: E501

    OpenAPI spec version: 4.11.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class TransactionResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'kind': 'TransactionKind',
        'transaction_number': 'str',
        '_date': 'datetime',
        'amount': 'BigDecimal',
        'related_kind': 'AccountKind',
        'related_user': 'User',
        'type': 'TransferType',
        'currency': 'str',
        'authorization_status': 'TransactionAuthorizationStatusEnum',
        'description': 'str',
        'installment_count': 'int',
        'processed_installments': 'int',
        'scheduled_payment_status': 'ScheduledPaymentStatusEnum',
        'first_installment': 'ScheduledPaymentInstallment',
        'first_open_installment': 'ScheduledPaymentInstallment',
        'next_occurrence_date': 'datetime',
        'recurring_payment_status': 'RecurringPaymentStatusEnum',
        'payment_request_status': 'PaymentRequestStatusEnum',
        'ticket_status': 'TicketStatusEnum',
        'to_principal_type': 'EntityReference',
        'to_principal_value': 'str',
        'external_payment_status': 'ExternalPaymentStatusEnum'
    }

    attribute_map = {
        'kind': 'kind',
        'transaction_number': 'transactionNumber',
        '_date': 'date',
        'amount': 'amount',
        'related_kind': 'relatedKind',
        'related_user': 'relatedUser',
        'type': 'type',
        'currency': 'currency',
        'authorization_status': 'authorizationStatus',
        'description': 'description',
        'installment_count': 'installmentCount',
        'processed_installments': 'processedInstallments',
        'scheduled_payment_status': 'scheduledPaymentStatus',
        'first_installment': 'firstInstallment',
        'first_open_installment': 'firstOpenInstallment',
        'next_occurrence_date': 'nextOccurrenceDate',
        'recurring_payment_status': 'recurringPaymentStatus',
        'payment_request_status': 'paymentRequestStatus',
        'ticket_status': 'ticketStatus',
        'to_principal_type': 'toPrincipalType',
        'to_principal_value': 'toPrincipalValue',
        'external_payment_status': 'externalPaymentStatus'
    }

    def __init__(self, kind=None, transaction_number=None, _date=None, amount=None, related_kind=None, related_user=None, type=None, currency=None, authorization_status=None, description=None, installment_count=None, processed_installments=None, scheduled_payment_status=None, first_installment=None, first_open_installment=None, next_occurrence_date=None, recurring_payment_status=None, payment_request_status=None, ticket_status=None, to_principal_type=None, to_principal_value=None, external_payment_status=None, _configuration=None):  # noqa: E501
        """TransactionResult - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._kind = None
        self._transaction_number = None
        self.__date = None
        self._amount = None
        self._related_kind = None
        self._related_user = None
        self._type = None
        self._currency = None
        self._authorization_status = None
        self._description = None
        self._installment_count = None
        self._processed_installments = None
        self._scheduled_payment_status = None
        self._first_installment = None
        self._first_open_installment = None
        self._next_occurrence_date = None
        self._recurring_payment_status = None
        self._payment_request_status = None
        self._ticket_status = None
        self._to_principal_type = None
        self._to_principal_value = None
        self._external_payment_status = None
        self.discriminator = None

        if kind is not None:
            self.kind = kind
        if transaction_number is not None:
            self.transaction_number = transaction_number
        if _date is not None:
            self._date = _date
        if amount is not None:
            self.amount = amount
        if related_kind is not None:
            self.related_kind = related_kind
        if related_user is not None:
            self.related_user = related_user
        if type is not None:
            self.type = type
        if currency is not None:
            self.currency = currency
        if authorization_status is not None:
            self.authorization_status = authorization_status
        if description is not None:
            self.description = description
        if installment_count is not None:
            self.installment_count = installment_count
        if processed_installments is not None:
            self.processed_installments = processed_installments
        if scheduled_payment_status is not None:
            self.scheduled_payment_status = scheduled_payment_status
        if first_installment is not None:
            self.first_installment = first_installment
        if first_open_installment is not None:
            self.first_open_installment = first_open_installment
        if next_occurrence_date is not None:
            self.next_occurrence_date = next_occurrence_date
        if recurring_payment_status is not None:
            self.recurring_payment_status = recurring_payment_status
        if payment_request_status is not None:
            self.payment_request_status = payment_request_status
        if ticket_status is not None:
            self.ticket_status = ticket_status
        if to_principal_type is not None:
            self.to_principal_type = to_principal_type
        if to_principal_value is not None:
            self.to_principal_value = to_principal_value
        if external_payment_status is not None:
            self.external_payment_status = external_payment_status

    @property
    def kind(self):
        """Gets the kind of this TransactionResult.  # noqa: E501

        The transaction kind. For example, if the front end has distinct views for a regular payment, scheduled payment and so on, this information is useful to determine the actual view. Possible values are: * chargeback: Chargeback of a given transfer * externalPayment: A payment to an external user * import: An imported transaction * order: Transaction generated by confirming an order * payment: A direct payment * paymentRequest: A request for another user to accept a payment  * recurringPayment: A payment which is processed again periodically * scheduledPayment: A scheduled payment which is either a payment scheduled for a future date or has multiple installments * ticket: A payment whose the payer is unknown   # noqa: E501

        :return: The kind of this TransactionResult.  # noqa: E501
        :rtype: TransactionKind
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this TransactionResult.

        The transaction kind. For example, if the front end has distinct views for a regular payment, scheduled payment and so on, this information is useful to determine the actual view. Possible values are: * chargeback: Chargeback of a given transfer * externalPayment: A payment to an external user * import: An imported transaction * order: Transaction generated by confirming an order * payment: A direct payment * paymentRequest: A request for another user to accept a payment  * recurringPayment: A payment which is processed again periodically * scheduledPayment: A scheduled payment which is either a payment scheduled for a future date or has multiple installments * ticket: A payment whose the payer is unknown   # noqa: E501

        :param kind: The kind of this TransactionResult.  # noqa: E501
        :type: TransactionKind
        """

        self._kind = kind

    @property
    def transaction_number(self):
        """Gets the transaction_number of this TransactionResult.  # noqa: E501

        The transaction number identifying this balance transfer. The currency configuration has the definition on whether transaction numbers are enabled and which format they have.   # noqa: E501

        :return: The transaction_number of this TransactionResult.  # noqa: E501
        :rtype: str
        """
        return self._transaction_number

    @transaction_number.setter
    def transaction_number(self, transaction_number):
        """Sets the transaction_number of this TransactionResult.

        The transaction number identifying this balance transfer. The currency configuration has the definition on whether transaction numbers are enabled and which format they have.   # noqa: E501

        :param transaction_number: The transaction_number of this TransactionResult.  # noqa: E501
        :type: str
        """

        self._transaction_number = transaction_number

    @property
    def _date(self):
        """Gets the _date of this TransactionResult.  # noqa: E501

        The transfer date and time  # noqa: E501

        :return: The _date of this TransactionResult.  # noqa: E501
        :rtype: datetime
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this TransactionResult.

        The transfer date and time  # noqa: E501

        :param _date: The _date of this TransactionResult.  # noqa: E501
        :type: datetime
        """

        self.__date = _date

    @property
    def amount(self):
        """Gets the amount of this TransactionResult.  # noqa: E501

        The transfer amount. May be positive or negative.  # noqa: E501

        :return: The amount of this TransactionResult.  # noqa: E501
        :rtype: BigDecimal
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this TransactionResult.

        The transfer amount. May be positive or negative.  # noqa: E501

        :param amount: The amount of this TransactionResult.  # noqa: E501
        :type: BigDecimal
        """

        self._amount = amount

    @property
    def related_kind(self):
        """Gets the related_kind of this TransactionResult.  # noqa: E501

        The related account owner kind  # noqa: E501

        :return: The related_kind of this TransactionResult.  # noqa: E501
        :rtype: AccountKind
        """
        return self._related_kind

    @related_kind.setter
    def related_kind(self, related_kind):
        """Sets the related_kind of this TransactionResult.

        The related account owner kind  # noqa: E501

        :param related_kind: The related_kind of this TransactionResult.  # noqa: E501
        :type: AccountKind
        """

        self._related_kind = related_kind

    @property
    def related_user(self):
        """Gets the related_user of this TransactionResult.  # noqa: E501

        The user that either performed or received this transaction. Is only returned if `relatedKind` is `user`.   # noqa: E501

        :return: The related_user of this TransactionResult.  # noqa: E501
        :rtype: User
        """
        return self._related_user

    @related_user.setter
    def related_user(self, related_user):
        """Sets the related_user of this TransactionResult.

        The user that either performed or received this transaction. Is only returned if `relatedKind` is `user`.   # noqa: E501

        :param related_user: The related_user of this TransactionResult.  # noqa: E501
        :type: User
        """

        self._related_user = related_user

    @property
    def type(self):
        """Gets the type of this TransactionResult.  # noqa: E501

        The transaction type  # noqa: E501

        :return: The type of this TransactionResult.  # noqa: E501
        :rtype: TransferType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this TransactionResult.

        The transaction type  # noqa: E501

        :param type: The type of this TransactionResult.  # noqa: E501
        :type: TransferType
        """

        self._type = type

    @property
    def currency(self):
        """Gets the currency of this TransactionResult.  # noqa: E501

        Either internal name or id of the transaction currency.   # noqa: E501

        :return: The currency of this TransactionResult.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this TransactionResult.

        Either internal name or id of the transaction currency.   # noqa: E501

        :param currency: The currency of this TransactionResult.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def authorization_status(self):
        """Gets the authorization_status of this TransactionResult.  # noqa: E501

        The status regarding authorization a transaction is in. If configured, transactions can require one or more levels of authorization in order to be processed. If a transaction has the this status null, it means it never went through the authorization process.  Possible values are: * authorized: The transaction was fully authorized and is processed * canceled: The authorization submission was canceled by the submitter * denied: The authorization was denied * pending: The transaction is pending authorization   # noqa: E501

        :return: The authorization_status of this TransactionResult.  # noqa: E501
        :rtype: TransactionAuthorizationStatusEnum
        """
        return self._authorization_status

    @authorization_status.setter
    def authorization_status(self, authorization_status):
        """Sets the authorization_status of this TransactionResult.

        The status regarding authorization a transaction is in. If configured, transactions can require one or more levels of authorization in order to be processed. If a transaction has the this status null, it means it never went through the authorization process.  Possible values are: * authorized: The transaction was fully authorized and is processed * canceled: The authorization submission was canceled by the submitter * denied: The authorization was denied * pending: The transaction is pending authorization   # noqa: E501

        :param authorization_status: The authorization_status of this TransactionResult.  # noqa: E501
        :type: TransactionAuthorizationStatusEnum
        """

        self._authorization_status = authorization_status

    @property
    def description(self):
        """Gets the description of this TransactionResult.  # noqa: E501

        The transaction description. Is optional.  # noqa: E501

        :return: The description of this TransactionResult.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this TransactionResult.

        The transaction description. Is optional.  # noqa: E501

        :param description: The description of this TransactionResult.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def installment_count(self):
        """Gets the installment_count of this TransactionResult.  # noqa: E501

        The total number of installments. Only returned if `kind` is `scheduledPayment`.   # noqa: E501

        :return: The installment_count of this TransactionResult.  # noqa: E501
        :rtype: int
        """
        return self._installment_count

    @installment_count.setter
    def installment_count(self, installment_count):
        """Sets the installment_count of this TransactionResult.

        The total number of installments. Only returned if `kind` is `scheduledPayment`.   # noqa: E501

        :param installment_count: The installment_count of this TransactionResult.  # noqa: E501
        :type: int
        """

        self._installment_count = installment_count

    @property
    def processed_installments(self):
        """Gets the processed_installments of this TransactionResult.  # noqa: E501

        The number of processed installments. Only returned if `kind` is `scheduledPayment`.   # noqa: E501

        :return: The processed_installments of this TransactionResult.  # noqa: E501
        :rtype: int
        """
        return self._processed_installments

    @processed_installments.setter
    def processed_installments(self, processed_installments):
        """Sets the processed_installments of this TransactionResult.

        The number of processed installments. Only returned if `kind` is `scheduledPayment`.   # noqa: E501

        :param processed_installments: The processed_installments of this TransactionResult.  # noqa: E501
        :type: int
        """

        self._processed_installments = processed_installments

    @property
    def scheduled_payment_status(self):
        """Gets the scheduled_payment_status of this TransactionResult.  # noqa: E501

        The scheduled payment status. Only returned if `kind` is `scheduledPayment`. Possible values are: * blocked: The scheduled payment is blocked - won't have any installment processed until being unblocked again * canceled: The scheduled payment, as well as all open installments were canceled * closed: The scheduled payment is closed * open: The scheduled payment has open installments   # noqa: E501

        :return: The scheduled_payment_status of this TransactionResult.  # noqa: E501
        :rtype: ScheduledPaymentStatusEnum
        """
        return self._scheduled_payment_status

    @scheduled_payment_status.setter
    def scheduled_payment_status(self, scheduled_payment_status):
        """Sets the scheduled_payment_status of this TransactionResult.

        The scheduled payment status. Only returned if `kind` is `scheduledPayment`. Possible values are: * blocked: The scheduled payment is blocked - won't have any installment processed until being unblocked again * canceled: The scheduled payment, as well as all open installments were canceled * closed: The scheduled payment is closed * open: The scheduled payment has open installments   # noqa: E501

        :param scheduled_payment_status: The scheduled_payment_status of this TransactionResult.  # noqa: E501
        :type: ScheduledPaymentStatusEnum
        """

        self._scheduled_payment_status = scheduled_payment_status

    @property
    def first_installment(self):
        """Gets the first_installment of this TransactionResult.  # noqa: E501

        A reference to the first installment of this scheduled payment. Only returned if `kind` is `scheduledPayment`.   # noqa: E501

        :return: The first_installment of this TransactionResult.  # noqa: E501
        :rtype: ScheduledPaymentInstallment
        """
        return self._first_installment

    @first_installment.setter
    def first_installment(self, first_installment):
        """Sets the first_installment of this TransactionResult.

        A reference to the first installment of this scheduled payment. Only returned if `kind` is `scheduledPayment`.   # noqa: E501

        :param first_installment: The first_installment of this TransactionResult.  # noqa: E501
        :type: ScheduledPaymentInstallment
        """

        self._first_installment = first_installment

    @property
    def first_open_installment(self):
        """Gets the first_open_installment of this TransactionResult.  # noqa: E501

        A reference to the first installment which is still open. Only returned if `kind` is `scheduledPayment`.   # noqa: E501

        :return: The first_open_installment of this TransactionResult.  # noqa: E501
        :rtype: ScheduledPaymentInstallment
        """
        return self._first_open_installment

    @first_open_installment.setter
    def first_open_installment(self, first_open_installment):
        """Sets the first_open_installment of this TransactionResult.

        A reference to the first installment which is still open. Only returned if `kind` is `scheduledPayment`.   # noqa: E501

        :param first_open_installment: The first_open_installment of this TransactionResult.  # noqa: E501
        :type: ScheduledPaymentInstallment
        """

        self._first_open_installment = first_open_installment

    @property
    def next_occurrence_date(self):
        """Gets the next_occurrence_date of this TransactionResult.  # noqa: E501

        When the next recurring payment occurrence will be processed. Only returned if `kind` is `recurringPayment`.   # noqa: E501

        :return: The next_occurrence_date of this TransactionResult.  # noqa: E501
        :rtype: datetime
        """
        return self._next_occurrence_date

    @next_occurrence_date.setter
    def next_occurrence_date(self, next_occurrence_date):
        """Sets the next_occurrence_date of this TransactionResult.

        When the next recurring payment occurrence will be processed. Only returned if `kind` is `recurringPayment`.   # noqa: E501

        :param next_occurrence_date: The next_occurrence_date of this TransactionResult.  # noqa: E501
        :type: datetime
        """

        self._next_occurrence_date = next_occurrence_date

    @property
    def recurring_payment_status(self):
        """Gets the recurring_payment_status of this TransactionResult.  # noqa: E501

        The recurring payment status. Only returned if `kind` is `recurringPayment`. Possible values are: * canceled: The recurring payment was manually canceled * closed: The recurring payment is closed, as the last scheduled occurrence was processed * open: The recurring payment is open, as there are more future occurrences   # noqa: E501

        :return: The recurring_payment_status of this TransactionResult.  # noqa: E501
        :rtype: RecurringPaymentStatusEnum
        """
        return self._recurring_payment_status

    @recurring_payment_status.setter
    def recurring_payment_status(self, recurring_payment_status):
        """Sets the recurring_payment_status of this TransactionResult.

        The recurring payment status. Only returned if `kind` is `recurringPayment`. Possible values are: * canceled: The recurring payment was manually canceled * closed: The recurring payment is closed, as the last scheduled occurrence was processed * open: The recurring payment is open, as there are more future occurrences   # noqa: E501

        :param recurring_payment_status: The recurring_payment_status of this TransactionResult.  # noqa: E501
        :type: RecurringPaymentStatusEnum
        """

        self._recurring_payment_status = recurring_payment_status

    @property
    def payment_request_status(self):
        """Gets the payment_request_status of this TransactionResult.  # noqa: E501

        The ticket status. Only returned if `kind` is `ticket`. Possible values are: * canceled: The payment request was canceled * denied: The payment request was denied by the receiver * expired: The payment request has expired - the received did not respond until the expiration date * open: The payment request is open and can be accepted * processed: The payment request was processed, and either a direct or scheduled payment was created from it * scheduled: The payment request has been accepted, and scheduled for processing on a future date   # noqa: E501

        :return: The payment_request_status of this TransactionResult.  # noqa: E501
        :rtype: PaymentRequestStatusEnum
        """
        return self._payment_request_status

    @payment_request_status.setter
    def payment_request_status(self, payment_request_status):
        """Sets the payment_request_status of this TransactionResult.

        The ticket status. Only returned if `kind` is `ticket`. Possible values are: * canceled: The payment request was canceled * denied: The payment request was denied by the receiver * expired: The payment request has expired - the received did not respond until the expiration date * open: The payment request is open and can be accepted * processed: The payment request was processed, and either a direct or scheduled payment was created from it * scheduled: The payment request has been accepted, and scheduled for processing on a future date   # noqa: E501

        :param payment_request_status: The payment_request_status of this TransactionResult.  # noqa: E501
        :type: PaymentRequestStatusEnum
        """

        self._payment_request_status = payment_request_status

    @property
    def ticket_status(self):
        """Gets the ticket_status of this TransactionResult.  # noqa: E501

        The ticket status. Only returned if `kind` is `ticket`. Possible values are: * approved: The ticket was approved by the payer and is waiting to be processed by the receiver to generate the payment * canceled: The ticket was canceled by the receiver before being approved * expired: The ticket has expired without being approved by a payer or canceled by the receiver until the expiration date * open: The ticket was created, but not approved yet * processed: The ticket was approved and processed and the payment was generated   # noqa: E501

        :return: The ticket_status of this TransactionResult.  # noqa: E501
        :rtype: TicketStatusEnum
        """
        return self._ticket_status

    @ticket_status.setter
    def ticket_status(self, ticket_status):
        """Sets the ticket_status of this TransactionResult.

        The ticket status. Only returned if `kind` is `ticket`. Possible values are: * approved: The ticket was approved by the payer and is waiting to be processed by the receiver to generate the payment * canceled: The ticket was canceled by the receiver before being approved * expired: The ticket has expired without being approved by a payer or canceled by the receiver until the expiration date * open: The ticket was created, but not approved yet * processed: The ticket was approved and processed and the payment was generated   # noqa: E501

        :param ticket_status: The ticket_status of this TransactionResult.  # noqa: E501
        :type: TicketStatusEnum
        """

        self._ticket_status = ticket_status

    @property
    def to_principal_type(self):
        """Gets the to_principal_type of this TransactionResult.  # noqa: E501

        The principal type an external payment was sent to. Only returned if `kind` is `externalPayment`.   # noqa: E501

        :return: The to_principal_type of this TransactionResult.  # noqa: E501
        :rtype: EntityReference
        """
        return self._to_principal_type

    @to_principal_type.setter
    def to_principal_type(self, to_principal_type):
        """Sets the to_principal_type of this TransactionResult.

        The principal type an external payment was sent to. Only returned if `kind` is `externalPayment`.   # noqa: E501

        :param to_principal_type: The to_principal_type of this TransactionResult.  # noqa: E501
        :type: EntityReference
        """

        self._to_principal_type = to_principal_type

    @property
    def to_principal_value(self):
        """Gets the to_principal_value of this TransactionResult.  # noqa: E501

        The principal to which an external payment was sent to. Only returned if `kind` is `externalPayment`.   # noqa: E501

        :return: The to_principal_value of this TransactionResult.  # noqa: E501
        :rtype: str
        """
        return self._to_principal_value

    @to_principal_value.setter
    def to_principal_value(self, to_principal_value):
        """Sets the to_principal_value of this TransactionResult.

        The principal to which an external payment was sent to. Only returned if `kind` is `externalPayment`.   # noqa: E501

        :param to_principal_value: The to_principal_value of this TransactionResult.  # noqa: E501
        :type: str
        """

        self._to_principal_value = to_principal_value

    @property
    def external_payment_status(self):
        """Gets the external_payment_status of this TransactionResult.  # noqa: E501

        The external payment status. Only returned if `kind` is `externalPayment`. Possible values are: * canceled: The external payment was canceled * expired: The external payment has expired without the destination user activation * failed: The external payment has failed processing * pending: The external payment is pending, awaiting the destination user to be activated in Cyclos * processed: The external payment was processed, and the destination payment was created   # noqa: E501

        :return: The external_payment_status of this TransactionResult.  # noqa: E501
        :rtype: ExternalPaymentStatusEnum
        """
        return self._external_payment_status

    @external_payment_status.setter
    def external_payment_status(self, external_payment_status):
        """Sets the external_payment_status of this TransactionResult.

        The external payment status. Only returned if `kind` is `externalPayment`. Possible values are: * canceled: The external payment was canceled * expired: The external payment has expired without the destination user activation * failed: The external payment has failed processing * pending: The external payment is pending, awaiting the destination user to be activated in Cyclos * processed: The external payment was processed, and the destination payment was created   # noqa: E501

        :param external_payment_status: The external_payment_status of this TransactionResult.  # noqa: E501
        :type: ExternalPaymentStatusEnum
        """

        self._external_payment_status = external_payment_status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TransactionResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TransactionResult):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TransactionResult):
            return True

        return self.to_dict() != other.to_dict()
