# coding: utf-8

"""
    Cyclos 4.11.5 API

    The REST API for Cyclos 4.11.5  # noqa: E501

    OpenAPI spec version: 4.11.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class AdResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'promotional_price': 'BigDecimal',
        'address': 'Address',
        'distance': 'float',
        'categories': 'list[str]',
        'currency': 'str',
        'editable': 'bool'
    }

    attribute_map = {
        'promotional_price': 'promotionalPrice',
        'address': 'address',
        'distance': 'distance',
        'categories': 'categories',
        'currency': 'currency',
        'editable': 'editable'
    }

    def __init__(self, promotional_price=None, address=None, distance=None, categories=None, currency=None, editable=None, _configuration=None):  # noqa: E501
        """AdResult - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._promotional_price = None
        self._address = None
        self._distance = None
        self._categories = None
        self._currency = None
        self._editable = None
        self.discriminator = None

        if promotional_price is not None:
            self.promotional_price = promotional_price
        if address is not None:
            self.address = address
        if distance is not None:
            self.distance = distance
        if categories is not None:
            self.categories = categories
        if currency is not None:
            self.currency = currency
        if editable is not None:
            self.editable = editable

    @property
    def promotional_price(self):
        """Gets the promotional_price of this AdResult.  # noqa: E501

        The promotional price, only returned if there is a promotional price set and the promotional period is active   # noqa: E501

        :return: The promotional_price of this AdResult.  # noqa: E501
        :rtype: BigDecimal
        """
        return self._promotional_price

    @promotional_price.setter
    def promotional_price(self, promotional_price):
        """Sets the promotional_price of this AdResult.

        The promotional price, only returned if there is a promotional price set and the promotional period is active   # noqa: E501

        :param promotional_price: The promotional_price of this AdResult.  # noqa: E501
        :type: BigDecimal
        """

        self._promotional_price = promotional_price

    @property
    def address(self):
        """Gets the address of this AdResult.  # noqa: E501

        Address to be placed on map. Is only returned when the search result type is `map`.   # noqa: E501

        :return: The address of this AdResult.  # noqa: E501
        :rtype: Address
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this AdResult.

        Address to be placed on map. Is only returned when the search result type is `map`.   # noqa: E501

        :param address: The address of this AdResult.  # noqa: E501
        :type: Address
        """

        self._address = address

    @property
    def distance(self):
        """Gets the distance of this AdResult.  # noqa: E501

        Only returned when there is a base location to calculate the distance from. The unit (kilometers or miles) depends on configuration.   # noqa: E501

        :return: The distance of this AdResult.  # noqa: E501
        :rtype: float
        """
        return self._distance

    @distance.setter
    def distance(self, distance):
        """Sets the distance of this AdResult.

        Only returned when there is a base location to calculate the distance from. The unit (kilometers or miles) depends on configuration.   # noqa: E501

        :param distance: The distance of this AdResult.  # noqa: E501
        :type: float
        """

        self._distance = distance

    @property
    def categories(self):
        """Gets the categories of this AdResult.  # noqa: E501

        Either internal name or id of categories this advertisement belongs to. In most cases an advertisement will have a single category, but this depends on the Cyclos configuration.   # noqa: E501

        :return: The categories of this AdResult.  # noqa: E501
        :rtype: list[str]
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """Sets the categories of this AdResult.

        Either internal name or id of categories this advertisement belongs to. In most cases an advertisement will have a single category, but this depends on the Cyclos configuration.   # noqa: E501

        :param categories: The categories of this AdResult.  # noqa: E501
        :type: list[str]
        """

        self._categories = categories

    @property
    def currency(self):
        """Gets the currency of this AdResult.  # noqa: E501

        Either internal name or id of the advertisement's price currency   # noqa: E501

        :return: The currency of this AdResult.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this AdResult.

        Either internal name or id of the advertisement's price currency   # noqa: E501

        :param currency: The currency of this AdResult.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def editable(self):
        """Gets the editable of this AdResult.  # noqa: E501

        Indicates if the advertisement can be edited according to the logged  user's permissions and advertisement status.   # noqa: E501

        :return: The editable of this AdResult.  # noqa: E501
        :rtype: bool
        """
        return self._editable

    @editable.setter
    def editable(self, editable):
        """Sets the editable of this AdResult.

        Indicates if the advertisement can be edited according to the logged  user's permissions and advertisement status.   # noqa: E501

        :param editable: The editable of this AdResult.  # noqa: E501
        :type: bool
        """

        self._editable = editable

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AdResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AdResult):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AdResult):
            return True

        return self.to_dict() != other.to_dict()
