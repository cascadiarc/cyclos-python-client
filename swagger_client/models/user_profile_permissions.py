# coding: utf-8

"""
    Cyclos 4.11.5 API

    The REST API for Cyclos 4.11.5  # noqa: E501

    OpenAPI spec version: 4.11.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class UserProfilePermissions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'edit_profile': 'bool',
        'manage_addresses': 'bool',
        'manage_addresses_privacy': 'bool',
        'manage_phones': 'bool',
        'manage_phones_privacy': 'bool',
        'manage_images': 'bool',
        'manage_contact_infos': 'bool',
        'can_create_address': 'bool',
        'can_create_land_line': 'bool',
        'can_create_mobile': 'bool',
        'can_create_image': 'bool',
        'can_create_contact_info': 'bool',
        'max_addresses': 'int',
        'max_mobiles': 'int',
        'max_land_lines': 'int',
        'max_images': 'int',
        'max_contact_infos': 'int',
        'address_availability': 'AvailabilityEnum',
        'mobile_availability': 'AvailabilityEnum',
        'land_line_availability': 'AvailabilityEnum',
        'profile_image_availability': 'AvailabilityEnum',
        'contact_info_availability': 'AvailabilityEnum'
    }

    attribute_map = {
        'edit_profile': 'editProfile',
        'manage_addresses': 'manageAddresses',
        'manage_addresses_privacy': 'manageAddressesPrivacy',
        'manage_phones': 'managePhones',
        'manage_phones_privacy': 'managePhonesPrivacy',
        'manage_images': 'manageImages',
        'manage_contact_infos': 'manageContactInfos',
        'can_create_address': 'canCreateAddress',
        'can_create_land_line': 'canCreateLandLine',
        'can_create_mobile': 'canCreateMobile',
        'can_create_image': 'canCreateImage',
        'can_create_contact_info': 'canCreateContactInfo',
        'max_addresses': 'maxAddresses',
        'max_mobiles': 'maxMobiles',
        'max_land_lines': 'maxLandLines',
        'max_images': 'maxImages',
        'max_contact_infos': 'maxContactInfos',
        'address_availability': 'addressAvailability',
        'mobile_availability': 'mobileAvailability',
        'land_line_availability': 'landLineAvailability',
        'profile_image_availability': 'profileImageAvailability',
        'contact_info_availability': 'contactInfoAvailability'
    }

    def __init__(self, edit_profile=None, manage_addresses=None, manage_addresses_privacy=None, manage_phones=None, manage_phones_privacy=None, manage_images=None, manage_contact_infos=None, can_create_address=None, can_create_land_line=None, can_create_mobile=None, can_create_image=None, can_create_contact_info=None, max_addresses=None, max_mobiles=None, max_land_lines=None, max_images=None, max_contact_infos=None, address_availability=None, mobile_availability=None, land_line_availability=None, profile_image_availability=None, contact_info_availability=None, _configuration=None):  # noqa: E501
        """UserProfilePermissions - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._edit_profile = None
        self._manage_addresses = None
        self._manage_addresses_privacy = None
        self._manage_phones = None
        self._manage_phones_privacy = None
        self._manage_images = None
        self._manage_contact_infos = None
        self._can_create_address = None
        self._can_create_land_line = None
        self._can_create_mobile = None
        self._can_create_image = None
        self._can_create_contact_info = None
        self._max_addresses = None
        self._max_mobiles = None
        self._max_land_lines = None
        self._max_images = None
        self._max_contact_infos = None
        self._address_availability = None
        self._mobile_availability = None
        self._land_line_availability = None
        self._profile_image_availability = None
        self._contact_info_availability = None
        self.discriminator = None

        if edit_profile is not None:
            self.edit_profile = edit_profile
        if manage_addresses is not None:
            self.manage_addresses = manage_addresses
        if manage_addresses_privacy is not None:
            self.manage_addresses_privacy = manage_addresses_privacy
        if manage_phones is not None:
            self.manage_phones = manage_phones
        if manage_phones_privacy is not None:
            self.manage_phones_privacy = manage_phones_privacy
        if manage_images is not None:
            self.manage_images = manage_images
        if manage_contact_infos is not None:
            self.manage_contact_infos = manage_contact_infos
        if can_create_address is not None:
            self.can_create_address = can_create_address
        if can_create_land_line is not None:
            self.can_create_land_line = can_create_land_line
        if can_create_mobile is not None:
            self.can_create_mobile = can_create_mobile
        if can_create_image is not None:
            self.can_create_image = can_create_image
        if can_create_contact_info is not None:
            self.can_create_contact_info = can_create_contact_info
        if max_addresses is not None:
            self.max_addresses = max_addresses
        if max_mobiles is not None:
            self.max_mobiles = max_mobiles
        if max_land_lines is not None:
            self.max_land_lines = max_land_lines
        if max_images is not None:
            self.max_images = max_images
        if max_contact_infos is not None:
            self.max_contact_infos = max_contact_infos
        if address_availability is not None:
            self.address_availability = address_availability
        if mobile_availability is not None:
            self.mobile_availability = mobile_availability
        if land_line_availability is not None:
            self.land_line_availability = land_line_availability
        if profile_image_availability is not None:
            self.profile_image_availability = profile_image_availability
        if contact_info_availability is not None:
            self.contact_info_availability = contact_info_availability

    @property
    def edit_profile(self):
        """Gets the edit_profile of this UserProfilePermissions.  # noqa: E501

        Can edit the user profile?  # noqa: E501

        :return: The edit_profile of this UserProfilePermissions.  # noqa: E501
        :rtype: bool
        """
        return self._edit_profile

    @edit_profile.setter
    def edit_profile(self, edit_profile):
        """Sets the edit_profile of this UserProfilePermissions.

        Can edit the user profile?  # noqa: E501

        :param edit_profile: The edit_profile of this UserProfilePermissions.  # noqa: E501
        :type: bool
        """

        self._edit_profile = edit_profile

    @property
    def manage_addresses(self):
        """Gets the manage_addresses of this UserProfilePermissions.  # noqa: E501

        Can manage addresses?  # noqa: E501

        :return: The manage_addresses of this UserProfilePermissions.  # noqa: E501
        :rtype: bool
        """
        return self._manage_addresses

    @manage_addresses.setter
    def manage_addresses(self, manage_addresses):
        """Sets the manage_addresses of this UserProfilePermissions.

        Can manage addresses?  # noqa: E501

        :param manage_addresses: The manage_addresses of this UserProfilePermissions.  # noqa: E501
        :type: bool
        """

        self._manage_addresses = manage_addresses

    @property
    def manage_addresses_privacy(self):
        """Gets the manage_addresses_privacy of this UserProfilePermissions.  # noqa: E501

        Can manage the addresses privacy?  # noqa: E501

        :return: The manage_addresses_privacy of this UserProfilePermissions.  # noqa: E501
        :rtype: bool
        """
        return self._manage_addresses_privacy

    @manage_addresses_privacy.setter
    def manage_addresses_privacy(self, manage_addresses_privacy):
        """Sets the manage_addresses_privacy of this UserProfilePermissions.

        Can manage the addresses privacy?  # noqa: E501

        :param manage_addresses_privacy: The manage_addresses_privacy of this UserProfilePermissions.  # noqa: E501
        :type: bool
        """

        self._manage_addresses_privacy = manage_addresses_privacy

    @property
    def manage_phones(self):
        """Gets the manage_phones of this UserProfilePermissions.  # noqa: E501

        Can manage phones?  # noqa: E501

        :return: The manage_phones of this UserProfilePermissions.  # noqa: E501
        :rtype: bool
        """
        return self._manage_phones

    @manage_phones.setter
    def manage_phones(self, manage_phones):
        """Sets the manage_phones of this UserProfilePermissions.

        Can manage phones?  # noqa: E501

        :param manage_phones: The manage_phones of this UserProfilePermissions.  # noqa: E501
        :type: bool
        """

        self._manage_phones = manage_phones

    @property
    def manage_phones_privacy(self):
        """Gets the manage_phones_privacy of this UserProfilePermissions.  # noqa: E501

        Can manage the phones privacy?  # noqa: E501

        :return: The manage_phones_privacy of this UserProfilePermissions.  # noqa: E501
        :rtype: bool
        """
        return self._manage_phones_privacy

    @manage_phones_privacy.setter
    def manage_phones_privacy(self, manage_phones_privacy):
        """Sets the manage_phones_privacy of this UserProfilePermissions.

        Can manage the phones privacy?  # noqa: E501

        :param manage_phones_privacy: The manage_phones_privacy of this UserProfilePermissions.  # noqa: E501
        :type: bool
        """

        self._manage_phones_privacy = manage_phones_privacy

    @property
    def manage_images(self):
        """Gets the manage_images of this UserProfilePermissions.  # noqa: E501

        Can manage profile images?  # noqa: E501

        :return: The manage_images of this UserProfilePermissions.  # noqa: E501
        :rtype: bool
        """
        return self._manage_images

    @manage_images.setter
    def manage_images(self, manage_images):
        """Sets the manage_images of this UserProfilePermissions.

        Can manage profile images?  # noqa: E501

        :param manage_images: The manage_images of this UserProfilePermissions.  # noqa: E501
        :type: bool
        """

        self._manage_images = manage_images

    @property
    def manage_contact_infos(self):
        """Gets the manage_contact_infos of this UserProfilePermissions.  # noqa: E501

        Can manage additional contact informations?  # noqa: E501

        :return: The manage_contact_infos of this UserProfilePermissions.  # noqa: E501
        :rtype: bool
        """
        return self._manage_contact_infos

    @manage_contact_infos.setter
    def manage_contact_infos(self, manage_contact_infos):
        """Sets the manage_contact_infos of this UserProfilePermissions.

        Can manage additional contact informations?  # noqa: E501

        :param manage_contact_infos: The manage_contact_infos of this UserProfilePermissions.  # noqa: E501
        :type: bool
        """

        self._manage_contact_infos = manage_contact_infos

    @property
    def can_create_address(self):
        """Gets the can_create_address of this UserProfilePermissions.  # noqa: E501

        Will be true if the authenticated user can manage addresses and the user for which we are viewing its profile  has not reached the maximum allowed addresses. Only if `manageAddresses` is true           # noqa: E501

        :return: The can_create_address of this UserProfilePermissions.  # noqa: E501
        :rtype: bool
        """
        return self._can_create_address

    @can_create_address.setter
    def can_create_address(self, can_create_address):
        """Sets the can_create_address of this UserProfilePermissions.

        Will be true if the authenticated user can manage addresses and the user for which we are viewing its profile  has not reached the maximum allowed addresses. Only if `manageAddresses` is true           # noqa: E501

        :param can_create_address: The can_create_address of this UserProfilePermissions.  # noqa: E501
        :type: bool
        """

        self._can_create_address = can_create_address

    @property
    def can_create_land_line(self):
        """Gets the can_create_land_line of this UserProfilePermissions.  # noqa: E501

        Will be true if the authenticated user can manage phones and the user for whom we are viewing its profile  has not reached the maximum allowed landline phones. Only if `managePhones` is true   # noqa: E501

        :return: The can_create_land_line of this UserProfilePermissions.  # noqa: E501
        :rtype: bool
        """
        return self._can_create_land_line

    @can_create_land_line.setter
    def can_create_land_line(self, can_create_land_line):
        """Sets the can_create_land_line of this UserProfilePermissions.

        Will be true if the authenticated user can manage phones and the user for whom we are viewing its profile  has not reached the maximum allowed landline phones. Only if `managePhones` is true   # noqa: E501

        :param can_create_land_line: The can_create_land_line of this UserProfilePermissions.  # noqa: E501
        :type: bool
        """

        self._can_create_land_line = can_create_land_line

    @property
    def can_create_mobile(self):
        """Gets the can_create_mobile of this UserProfilePermissions.  # noqa: E501

        Will be true if the authenticated user can manage phones and the user for whom we are viewing its profile  has not reached the maximum allowed mobile phones. Only if `managePhones` is true           # noqa: E501

        :return: The can_create_mobile of this UserProfilePermissions.  # noqa: E501
        :rtype: bool
        """
        return self._can_create_mobile

    @can_create_mobile.setter
    def can_create_mobile(self, can_create_mobile):
        """Sets the can_create_mobile of this UserProfilePermissions.

        Will be true if the authenticated user can manage phones and the user for whom we are viewing its profile  has not reached the maximum allowed mobile phones. Only if `managePhones` is true           # noqa: E501

        :param can_create_mobile: The can_create_mobile of this UserProfilePermissions.  # noqa: E501
        :type: bool
        """

        self._can_create_mobile = can_create_mobile

    @property
    def can_create_image(self):
        """Gets the can_create_image of this UserProfilePermissions.  # noqa: E501

        Will be true if the authenticated user can manage images and the user for whom we are viewing its profile  has not reached the maximum allowed profile images. Only if `manageImages` is true           # noqa: E501

        :return: The can_create_image of this UserProfilePermissions.  # noqa: E501
        :rtype: bool
        """
        return self._can_create_image

    @can_create_image.setter
    def can_create_image(self, can_create_image):
        """Sets the can_create_image of this UserProfilePermissions.

        Will be true if the authenticated user can manage images and the user for whom we are viewing its profile  has not reached the maximum allowed profile images. Only if `manageImages` is true           # noqa: E501

        :param can_create_image: The can_create_image of this UserProfilePermissions.  # noqa: E501
        :type: bool
        """

        self._can_create_image = can_create_image

    @property
    def can_create_contact_info(self):
        """Gets the can_create_contact_info of this UserProfilePermissions.  # noqa: E501

        Will be true if the authenticated user can manage additional contact informations and the user for whom we are  viewing its profile has not reached the maximum allowed additional contact informations. Only if `manageContactInfos` is true   # noqa: E501

        :return: The can_create_contact_info of this UserProfilePermissions.  # noqa: E501
        :rtype: bool
        """
        return self._can_create_contact_info

    @can_create_contact_info.setter
    def can_create_contact_info(self, can_create_contact_info):
        """Sets the can_create_contact_info of this UserProfilePermissions.

        Will be true if the authenticated user can manage additional contact informations and the user for whom we are  viewing its profile has not reached the maximum allowed additional contact informations. Only if `manageContactInfos` is true   # noqa: E501

        :param can_create_contact_info: The can_create_contact_info of this UserProfilePermissions.  # noqa: E501
        :type: bool
        """

        self._can_create_contact_info = can_create_contact_info

    @property
    def max_addresses(self):
        """Gets the max_addresses of this UserProfilePermissions.  # noqa: E501

        The maximum number of addresses the user can own. Only if `manageAddresses` is true    # noqa: E501

        :return: The max_addresses of this UserProfilePermissions.  # noqa: E501
        :rtype: int
        """
        return self._max_addresses

    @max_addresses.setter
    def max_addresses(self, max_addresses):
        """Sets the max_addresses of this UserProfilePermissions.

        The maximum number of addresses the user can own. Only if `manageAddresses` is true    # noqa: E501

        :param max_addresses: The max_addresses of this UserProfilePermissions.  # noqa: E501
        :type: int
        """

        self._max_addresses = max_addresses

    @property
    def max_mobiles(self):
        """Gets the max_mobiles of this UserProfilePermissions.  # noqa: E501

        The maximum number of mobile phones the user can own. Only if `managePhones` is true.   # noqa: E501

        :return: The max_mobiles of this UserProfilePermissions.  # noqa: E501
        :rtype: int
        """
        return self._max_mobiles

    @max_mobiles.setter
    def max_mobiles(self, max_mobiles):
        """Sets the max_mobiles of this UserProfilePermissions.

        The maximum number of mobile phones the user can own. Only if `managePhones` is true.   # noqa: E501

        :param max_mobiles: The max_mobiles of this UserProfilePermissions.  # noqa: E501
        :type: int
        """

        self._max_mobiles = max_mobiles

    @property
    def max_land_lines(self):
        """Gets the max_land_lines of this UserProfilePermissions.  # noqa: E501

        The maximum number of land-line phones the user can own. Only if `managePhones` is true.   # noqa: E501

        :return: The max_land_lines of this UserProfilePermissions.  # noqa: E501
        :rtype: int
        """
        return self._max_land_lines

    @max_land_lines.setter
    def max_land_lines(self, max_land_lines):
        """Sets the max_land_lines of this UserProfilePermissions.

        The maximum number of land-line phones the user can own. Only if `managePhones` is true.   # noqa: E501

        :param max_land_lines: The max_land_lines of this UserProfilePermissions.  # noqa: E501
        :type: int
        """

        self._max_land_lines = max_land_lines

    @property
    def max_images(self):
        """Gets the max_images of this UserProfilePermissions.  # noqa: E501

        The maximum number of profile images  the user can own. Only if `manageImages` is true.   # noqa: E501

        :return: The max_images of this UserProfilePermissions.  # noqa: E501
        :rtype: int
        """
        return self._max_images

    @max_images.setter
    def max_images(self, max_images):
        """Sets the max_images of this UserProfilePermissions.

        The maximum number of profile images  the user can own. Only if `manageImages` is true.   # noqa: E501

        :param max_images: The max_images of this UserProfilePermissions.  # noqa: E501
        :type: int
        """

        self._max_images = max_images

    @property
    def max_contact_infos(self):
        """Gets the max_contact_infos of this UserProfilePermissions.  # noqa: E501

        The maximum number of additional contacts the user can own.  Only if `manageContactInfos` is true.   # noqa: E501

        :return: The max_contact_infos of this UserProfilePermissions.  # noqa: E501
        :rtype: int
        """
        return self._max_contact_infos

    @max_contact_infos.setter
    def max_contact_infos(self, max_contact_infos):
        """Sets the max_contact_infos of this UserProfilePermissions.

        The maximum number of additional contacts the user can own.  Only if `manageContactInfos` is true.   # noqa: E501

        :param max_contact_infos: The max_contact_infos of this UserProfilePermissions.  # noqa: E501
        :type: int
        """

        self._max_contact_infos = max_contact_infos

    @property
    def address_availability(self):
        """Gets the address_availability of this UserProfilePermissions.  # noqa: E501

        The availability for addresses. Only if `manageAddresses` is true Possible values are: * disabled: The data is disabled * optional: The data is enabled and optional * required: The data is enabled and required   # noqa: E501

        :return: The address_availability of this UserProfilePermissions.  # noqa: E501
        :rtype: AvailabilityEnum
        """
        return self._address_availability

    @address_availability.setter
    def address_availability(self, address_availability):
        """Sets the address_availability of this UserProfilePermissions.

        The availability for addresses. Only if `manageAddresses` is true Possible values are: * disabled: The data is disabled * optional: The data is enabled and optional * required: The data is enabled and required   # noqa: E501

        :param address_availability: The address_availability of this UserProfilePermissions.  # noqa: E501
        :type: AvailabilityEnum
        """

        self._address_availability = address_availability

    @property
    def mobile_availability(self):
        """Gets the mobile_availability of this UserProfilePermissions.  # noqa: E501

        The availability for mobile phones Only if `managePhones` is true Possible values are: * disabled: The data is disabled * optional: The data is enabled and optional * required: The data is enabled and required   # noqa: E501

        :return: The mobile_availability of this UserProfilePermissions.  # noqa: E501
        :rtype: AvailabilityEnum
        """
        return self._mobile_availability

    @mobile_availability.setter
    def mobile_availability(self, mobile_availability):
        """Sets the mobile_availability of this UserProfilePermissions.

        The availability for mobile phones Only if `managePhones` is true Possible values are: * disabled: The data is disabled * optional: The data is enabled and optional * required: The data is enabled and required   # noqa: E501

        :param mobile_availability: The mobile_availability of this UserProfilePermissions.  # noqa: E501
        :type: AvailabilityEnum
        """

        self._mobile_availability = mobile_availability

    @property
    def land_line_availability(self):
        """Gets the land_line_availability of this UserProfilePermissions.  # noqa: E501

        The availability for land-line phones Only if `managePhones` is true Possible values are: * disabled: The data is disabled * optional: The data is enabled and optional * required: The data is enabled and required   # noqa: E501

        :return: The land_line_availability of this UserProfilePermissions.  # noqa: E501
        :rtype: AvailabilityEnum
        """
        return self._land_line_availability

    @land_line_availability.setter
    def land_line_availability(self, land_line_availability):
        """Sets the land_line_availability of this UserProfilePermissions.

        The availability for land-line phones Only if `managePhones` is true Possible values are: * disabled: The data is disabled * optional: The data is enabled and optional * required: The data is enabled and required   # noqa: E501

        :param land_line_availability: The land_line_availability of this UserProfilePermissions.  # noqa: E501
        :type: AvailabilityEnum
        """

        self._land_line_availability = land_line_availability

    @property
    def profile_image_availability(self):
        """Gets the profile_image_availability of this UserProfilePermissions.  # noqa: E501

        The availability for profile images Only if `manageImages` is true       Possible values are: * disabled: The data is disabled * optional: The data is enabled and optional * required: The data is enabled and required   # noqa: E501

        :return: The profile_image_availability of this UserProfilePermissions.  # noqa: E501
        :rtype: AvailabilityEnum
        """
        return self._profile_image_availability

    @profile_image_availability.setter
    def profile_image_availability(self, profile_image_availability):
        """Sets the profile_image_availability of this UserProfilePermissions.

        The availability for profile images Only if `manageImages` is true       Possible values are: * disabled: The data is disabled * optional: The data is enabled and optional * required: The data is enabled and required   # noqa: E501

        :param profile_image_availability: The profile_image_availability of this UserProfilePermissions.  # noqa: E501
        :type: AvailabilityEnum
        """

        self._profile_image_availability = profile_image_availability

    @property
    def contact_info_availability(self):
        """Gets the contact_info_availability of this UserProfilePermissions.  # noqa: E501

        The availability for additional contacts Only if `manageContactInfos` is true Possible values are: * disabled: The data is disabled * optional: The data is enabled and optional * required: The data is enabled and required   # noqa: E501

        :return: The contact_info_availability of this UserProfilePermissions.  # noqa: E501
        :rtype: AvailabilityEnum
        """
        return self._contact_info_availability

    @contact_info_availability.setter
    def contact_info_availability(self, contact_info_availability):
        """Sets the contact_info_availability of this UserProfilePermissions.

        The availability for additional contacts Only if `manageContactInfos` is true Possible values are: * disabled: The data is disabled * optional: The data is enabled and optional * required: The data is enabled and required   # noqa: E501

        :param contact_info_availability: The contact_info_availability of this UserProfilePermissions.  # noqa: E501
        :type: AvailabilityEnum
        """

        self._contact_info_availability = contact_info_availability

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserProfilePermissions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserProfilePermissions):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UserProfilePermissions):
            return True

        return self.to_dict() != other.to_dict()
