# coding: utf-8

"""
    Cyclos 4.11.5 API

    The REST API for Cyclos 4.11.5  # noqa: E501

    OpenAPI spec version: 4.11.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class DataForMobileUser(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'auto_complete_results': 'int',
        'hide_users_search_menu': 'bool',
        'auth': 'Auth',
        'name_of_user': 'str',
        'mobile_help': 'UIElementWithContent',
        'pos_help': 'UIElementWithContent',
        'map_browser_api_key': 'str',
        'pages': 'list[MobilePage]',
        'operations': 'list[Operation]',
        'can_receive_from_nfc_tag': 'bool',
        'personalize_other_users': 'bool',
        'mobile_camera_on_payment': 'bool',
        'principals_allowing_qr_code': 'list[Principal]',
        'shopping_cart_web_shop_count': 'int',
        'notifications_status': 'NotificationsStatus',
        'allowed_operations': 'list[MobileOperationEnum]'
    }

    attribute_map = {
        'auto_complete_results': 'autoCompleteResults',
        'hide_users_search_menu': 'hideUsersSearchMenu',
        'auth': 'auth',
        'name_of_user': 'nameOfUser',
        'mobile_help': 'mobileHelp',
        'pos_help': 'posHelp',
        'map_browser_api_key': 'mapBrowserApiKey',
        'pages': 'pages',
        'operations': 'operations',
        'can_receive_from_nfc_tag': 'canReceiveFromNfcTag',
        'personalize_other_users': 'personalizeOtherUsers',
        'mobile_camera_on_payment': 'mobileCameraOnPayment',
        'principals_allowing_qr_code': 'principalsAllowingQRCode',
        'shopping_cart_web_shop_count': 'shoppingCartWebShopCount',
        'notifications_status': 'notificationsStatus',
        'allowed_operations': 'allowedOperations'
    }

    def __init__(self, auto_complete_results=None, hide_users_search_menu=None, auth=None, name_of_user=None, mobile_help=None, pos_help=None, map_browser_api_key=None, pages=None, operations=None, can_receive_from_nfc_tag=None, personalize_other_users=None, mobile_camera_on_payment=None, principals_allowing_qr_code=None, shopping_cart_web_shop_count=None, notifications_status=None, allowed_operations=None, _configuration=None):  # noqa: E501
        """DataForMobileUser - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._auto_complete_results = None
        self._hide_users_search_menu = None
        self._auth = None
        self._name_of_user = None
        self._mobile_help = None
        self._pos_help = None
        self._map_browser_api_key = None
        self._pages = None
        self._operations = None
        self._can_receive_from_nfc_tag = None
        self._personalize_other_users = None
        self._mobile_camera_on_payment = None
        self._principals_allowing_qr_code = None
        self._shopping_cart_web_shop_count = None
        self._notifications_status = None
        self._allowed_operations = None
        self.discriminator = None

        if auto_complete_results is not None:
            self.auto_complete_results = auto_complete_results
        if hide_users_search_menu is not None:
            self.hide_users_search_menu = hide_users_search_menu
        if auth is not None:
            self.auth = auth
        if name_of_user is not None:
            self.name_of_user = name_of_user
        if mobile_help is not None:
            self.mobile_help = mobile_help
        if pos_help is not None:
            self.pos_help = pos_help
        if map_browser_api_key is not None:
            self.map_browser_api_key = map_browser_api_key
        if pages is not None:
            self.pages = pages
        if operations is not None:
            self.operations = operations
        if can_receive_from_nfc_tag is not None:
            self.can_receive_from_nfc_tag = can_receive_from_nfc_tag
        if personalize_other_users is not None:
            self.personalize_other_users = personalize_other_users
        if mobile_camera_on_payment is not None:
            self.mobile_camera_on_payment = mobile_camera_on_payment
        if principals_allowing_qr_code is not None:
            self.principals_allowing_qr_code = principals_allowing_qr_code
        if shopping_cart_web_shop_count is not None:
            self.shopping_cart_web_shop_count = shopping_cart_web_shop_count
        if notifications_status is not None:
            self.notifications_status = notifications_status
        if allowed_operations is not None:
            self.allowed_operations = allowed_operations

    @property
    def auto_complete_results(self):
        """Gets the auto_complete_results of this DataForMobileUser.  # noqa: E501

        Number of search results for user autocomplete component  # noqa: E501

        :return: The auto_complete_results of this DataForMobileUser.  # noqa: E501
        :rtype: int
        """
        return self._auto_complete_results

    @auto_complete_results.setter
    def auto_complete_results(self, auto_complete_results):
        """Sets the auto_complete_results of this DataForMobileUser.

        Number of search results for user autocomplete component  # noqa: E501

        :param auto_complete_results: The auto_complete_results of this DataForMobileUser.  # noqa: E501
        :type: int
        """

        self._auto_complete_results = auto_complete_results

    @property
    def hide_users_search_menu(self):
        """Gets the hide_users_search_menu of this DataForMobileUser.  # noqa: E501

        Indicates if the user search menu should be hidden.  # noqa: E501

        :return: The hide_users_search_menu of this DataForMobileUser.  # noqa: E501
        :rtype: bool
        """
        return self._hide_users_search_menu

    @hide_users_search_menu.setter
    def hide_users_search_menu(self, hide_users_search_menu):
        """Sets the hide_users_search_menu of this DataForMobileUser.

        Indicates if the user search menu should be hidden.  # noqa: E501

        :param hide_users_search_menu: The hide_users_search_menu of this DataForMobileUser.  # noqa: E501
        :type: bool
        """

        self._hide_users_search_menu = hide_users_search_menu

    @property
    def auth(self):
        """Gets the auth of this DataForMobileUser.  # noqa: E501

        The authenticated user  # noqa: E501

        :return: The auth of this DataForMobileUser.  # noqa: E501
        :rtype: Auth
        """
        return self._auth

    @auth.setter
    def auth(self, auth):
        """Sets the auth of this DataForMobileUser.

        The authenticated user  # noqa: E501

        :param auth: The auth of this DataForMobileUser.  # noqa: E501
        :type: Auth
        """

        self._auth = auth

    @property
    def name_of_user(self):
        """Gets the name_of_user of this DataForMobileUser.  # noqa: E501

        The name of the current user (if any)  # noqa: E501

        :return: The name_of_user of this DataForMobileUser.  # noqa: E501
        :rtype: str
        """
        return self._name_of_user

    @name_of_user.setter
    def name_of_user(self, name_of_user):
        """Sets the name_of_user of this DataForMobileUser.

        The name of the current user (if any)  # noqa: E501

        :param name_of_user: The name_of_user of this DataForMobileUser.  # noqa: E501
        :type: str
        """

        self._name_of_user = name_of_user

    @property
    def mobile_help(self):
        """Gets the mobile_help of this DataForMobileUser.  # noqa: E501

        The help content for mobile mode  # noqa: E501

        :return: The mobile_help of this DataForMobileUser.  # noqa: E501
        :rtype: UIElementWithContent
        """
        return self._mobile_help

    @mobile_help.setter
    def mobile_help(self, mobile_help):
        """Sets the mobile_help of this DataForMobileUser.

        The help content for mobile mode  # noqa: E501

        :param mobile_help: The mobile_help of this DataForMobileUser.  # noqa: E501
        :type: UIElementWithContent
        """

        self._mobile_help = mobile_help

    @property
    def pos_help(self):
        """Gets the pos_help of this DataForMobileUser.  # noqa: E501

        The help content for mobile mode  # noqa: E501

        :return: The pos_help of this DataForMobileUser.  # noqa: E501
        :rtype: UIElementWithContent
        """
        return self._pos_help

    @pos_help.setter
    def pos_help(self, pos_help):
        """Sets the pos_help of this DataForMobileUser.

        The help content for mobile mode  # noqa: E501

        :param pos_help: The pos_help of this DataForMobileUser.  # noqa: E501
        :type: UIElementWithContent
        """

        self._pos_help = pos_help

    @property
    def map_browser_api_key(self):
        """Gets the map_browser_api_key of this DataForMobileUser.  # noqa: E501

        The Google Maps browser API key  # noqa: E501

        :return: The map_browser_api_key of this DataForMobileUser.  # noqa: E501
        :rtype: str
        """
        return self._map_browser_api_key

    @map_browser_api_key.setter
    def map_browser_api_key(self, map_browser_api_key):
        """Sets the map_browser_api_key of this DataForMobileUser.

        The Google Maps browser API key  # noqa: E501

        :param map_browser_api_key: The map_browser_api_key of this DataForMobileUser.  # noqa: E501
        :type: str
        """

        self._map_browser_api_key = map_browser_api_key

    @property
    def pages(self):
        """Gets the pages of this DataForMobileUser.  # noqa: E501

        The visible mobile pages  # noqa: E501

        :return: The pages of this DataForMobileUser.  # noqa: E501
        :rtype: list[MobilePage]
        """
        return self._pages

    @pages.setter
    def pages(self, pages):
        """Sets the pages of this DataForMobileUser.

        The visible mobile pages  # noqa: E501

        :param pages: The pages of this DataForMobileUser.  # noqa: E501
        :type: list[MobilePage]
        """

        self._pages = pages

    @property
    def operations(self):
        """Gets the operations of this DataForMobileUser.  # noqa: E501

        The custom operations the user can run  # noqa: E501

        :return: The operations of this DataForMobileUser.  # noqa: E501
        :rtype: list[Operation]
        """
        return self._operations

    @operations.setter
    def operations(self, operations):
        """Sets the operations of this DataForMobileUser.

        The custom operations the user can run  # noqa: E501

        :param operations: The operations of this DataForMobileUser.  # noqa: E501
        :type: list[Operation]
        """

        self._operations = operations

    @property
    def can_receive_from_nfc_tag(self):
        """Gets the can_receive_from_nfc_tag of this DataForMobileUser.  # noqa: E501

        Indicates whether there is at least one NFC tag the user can use to receive payments   # noqa: E501

        :return: The can_receive_from_nfc_tag of this DataForMobileUser.  # noqa: E501
        :rtype: bool
        """
        return self._can_receive_from_nfc_tag

    @can_receive_from_nfc_tag.setter
    def can_receive_from_nfc_tag(self, can_receive_from_nfc_tag):
        """Sets the can_receive_from_nfc_tag of this DataForMobileUser.

        Indicates whether there is at least one NFC tag the user can use to receive payments   # noqa: E501

        :param can_receive_from_nfc_tag: The can_receive_from_nfc_tag of this DataForMobileUser.  # noqa: E501
        :type: bool
        """

        self._can_receive_from_nfc_tag = can_receive_from_nfc_tag

    @property
    def personalize_other_users(self):
        """Gets the personalize_other_users of this DataForMobileUser.  # noqa: E501

        Indicates if the current user can personalize NFC tags for other users (as member)  # noqa: E501

        :return: The personalize_other_users of this DataForMobileUser.  # noqa: E501
        :rtype: bool
        """
        return self._personalize_other_users

    @personalize_other_users.setter
    def personalize_other_users(self, personalize_other_users):
        """Sets the personalize_other_users of this DataForMobileUser.

        Indicates if the current user can personalize NFC tags for other users (as member)  # noqa: E501

        :param personalize_other_users: The personalize_other_users of this DataForMobileUser.  # noqa: E501
        :type: bool
        """

        self._personalize_other_users = personalize_other_users

    @property
    def mobile_camera_on_payment(self):
        """Gets the mobile_camera_on_payment of this DataForMobileUser.  # noqa: E501

        Indicates whether the scan QR code option should be displayed for payments            # noqa: E501

        :return: The mobile_camera_on_payment of this DataForMobileUser.  # noqa: E501
        :rtype: bool
        """
        return self._mobile_camera_on_payment

    @mobile_camera_on_payment.setter
    def mobile_camera_on_payment(self, mobile_camera_on_payment):
        """Sets the mobile_camera_on_payment of this DataForMobileUser.

        Indicates whether the scan QR code option should be displayed for payments            # noqa: E501

        :param mobile_camera_on_payment: The mobile_camera_on_payment of this DataForMobileUser.  # noqa: E501
        :type: bool
        """

        self._mobile_camera_on_payment = mobile_camera_on_payment

    @property
    def principals_allowing_qr_code(self):
        """Gets the principals_allowing_qr_code of this DataForMobileUser.  # noqa: E501

        Indicates the possible principals which are allowed to be used in QR code generation  # noqa: E501

        :return: The principals_allowing_qr_code of this DataForMobileUser.  # noqa: E501
        :rtype: list[Principal]
        """
        return self._principals_allowing_qr_code

    @principals_allowing_qr_code.setter
    def principals_allowing_qr_code(self, principals_allowing_qr_code):
        """Sets the principals_allowing_qr_code of this DataForMobileUser.

        Indicates the possible principals which are allowed to be used in QR code generation  # noqa: E501

        :param principals_allowing_qr_code: The principals_allowing_qr_code of this DataForMobileUser.  # noqa: E501
        :type: list[Principal]
        """

        self._principals_allowing_qr_code = principals_allowing_qr_code

    @property
    def shopping_cart_web_shop_count(self):
        """Gets the shopping_cart_web_shop_count of this DataForMobileUser.  # noqa: E501

        The total number of webshop ads present in the shopping cart  # noqa: E501

        :return: The shopping_cart_web_shop_count of this DataForMobileUser.  # noqa: E501
        :rtype: int
        """
        return self._shopping_cart_web_shop_count

    @shopping_cart_web_shop_count.setter
    def shopping_cart_web_shop_count(self, shopping_cart_web_shop_count):
        """Sets the shopping_cart_web_shop_count of this DataForMobileUser.

        The total number of webshop ads present in the shopping cart  # noqa: E501

        :param shopping_cart_web_shop_count: The shopping_cart_web_shop_count of this DataForMobileUser.  # noqa: E501
        :type: int
        """

        self._shopping_cart_web_shop_count = shopping_cart_web_shop_count

    @property
    def notifications_status(self):
        """Gets the notifications_status of this DataForMobileUser.  # noqa: E501

        Status of user notifications, like new received or unread notifications  # noqa: E501

        :return: The notifications_status of this DataForMobileUser.  # noqa: E501
        :rtype: NotificationsStatus
        """
        return self._notifications_status

    @notifications_status.setter
    def notifications_status(self, notifications_status):
        """Sets the notifications_status of this DataForMobileUser.

        Status of user notifications, like new received or unread notifications  # noqa: E501

        :param notifications_status: The notifications_status of this DataForMobileUser.  # noqa: E501
        :type: NotificationsStatus
        """

        self._notifications_status = notifications_status

    @property
    def allowed_operations(self):
        """Gets the allowed_operations of this DataForMobileUser.  # noqa: E501

        The possible operations the mobile application can perform Possibles values for each array element are: * acceptTicket: Accepts a generated QR code for performing a payment * activateNfcDevice: Activate the phone as NFC device * assignPos: Assign an access client for POS mode * boughtVouchers: View bought vouchers * buyVoucher: Buy a voucher * createTicket: Generate a QR Code for receive payment * deactivateNfcDevice: Deactivate the phone as NFC device * formatNfc: Format NFC tags * initializeNfc: Initialize NFC tags * makeSystemPayment: Perform payments to system * makeUserPayment: Perform payments to other users * manageContacts: Manage own contacts * manageOperators: Manage own/user operators * managePasswords: Manage passwords * mapDirectory: View the user directory (map) * paymentRequests: Search and view payment requests * personalizeNfc: Personalize NFC tags  * personalizeNfcSelf: Personalize NFC tags for the logged user or its operators * purchases: Search and view purchased webshops * readNfc: Read NFC tags * receivePayment: Receive payments from other users * redeemVoucher: Redeem vouchers * registerUsersAsManager: Register other users as user manager * registerUsersAsMember: Register other users as member or operator * sendPaymentRequestToSystem: Send payment requests to system * sendPaymentRequestToUser: Send payment requests to users * unassignPos: Unassign the current access client from POS mode * usersSearch: Search other users * viewAccountInformation: View own accounts * viewAdvertisements: Search and view advertisements and webshop * viewRedeemed: View redeemed vouchers * viewUserProfile: View the profile of other users   # noqa: E501

        :return: The allowed_operations of this DataForMobileUser.  # noqa: E501
        :rtype: list[MobileOperationEnum]
        """
        return self._allowed_operations

    @allowed_operations.setter
    def allowed_operations(self, allowed_operations):
        """Sets the allowed_operations of this DataForMobileUser.

        The possible operations the mobile application can perform Possibles values for each array element are: * acceptTicket: Accepts a generated QR code for performing a payment * activateNfcDevice: Activate the phone as NFC device * assignPos: Assign an access client for POS mode * boughtVouchers: View bought vouchers * buyVoucher: Buy a voucher * createTicket: Generate a QR Code for receive payment * deactivateNfcDevice: Deactivate the phone as NFC device * formatNfc: Format NFC tags * initializeNfc: Initialize NFC tags * makeSystemPayment: Perform payments to system * makeUserPayment: Perform payments to other users * manageContacts: Manage own contacts * manageOperators: Manage own/user operators * managePasswords: Manage passwords * mapDirectory: View the user directory (map) * paymentRequests: Search and view payment requests * personalizeNfc: Personalize NFC tags  * personalizeNfcSelf: Personalize NFC tags for the logged user or its operators * purchases: Search and view purchased webshops * readNfc: Read NFC tags * receivePayment: Receive payments from other users * redeemVoucher: Redeem vouchers * registerUsersAsManager: Register other users as user manager * registerUsersAsMember: Register other users as member or operator * sendPaymentRequestToSystem: Send payment requests to system * sendPaymentRequestToUser: Send payment requests to users * unassignPos: Unassign the current access client from POS mode * usersSearch: Search other users * viewAccountInformation: View own accounts * viewAdvertisements: Search and view advertisements and webshop * viewRedeemed: View redeemed vouchers * viewUserProfile: View the profile of other users   # noqa: E501

        :param allowed_operations: The allowed_operations of this DataForMobileUser.  # noqa: E501
        :type: list[MobileOperationEnum]
        """

        self._allowed_operations = allowed_operations

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DataForMobileUser, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataForMobileUser):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DataForMobileUser):
            return True

        return self.to_dict() != other.to_dict()
