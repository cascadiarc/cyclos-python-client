# coding: utf-8

"""
    Cyclos 4.11.5 API

    The REST API for Cyclos 4.11.5  # noqa: E501

    OpenAPI spec version: 4.11.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class DataForLogin(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'access_password_type': 'EntityReference',
        'principal_types': 'list[PrincipalTypeInput]',
        'default_principal_type': 'str',
        'extra_forgot_password_principal_types': 'list[PrincipalTypeInput]',
        'login_password_input': 'PasswordInput',
        'forgot_password_captcha_provider': 'CaptchaProviderEnum',
        'forgot_password_mediums': 'list[SendMediumEnum]'
    }

    attribute_map = {
        'access_password_type': 'accessPasswordType',
        'principal_types': 'principalTypes',
        'default_principal_type': 'defaultPrincipalType',
        'extra_forgot_password_principal_types': 'extraForgotPasswordPrincipalTypes',
        'login_password_input': 'loginPasswordInput',
        'forgot_password_captcha_provider': 'forgotPasswordCaptchaProvider',
        'forgot_password_mediums': 'forgotPasswordMediums'
    }

    def __init__(self, access_password_type=None, principal_types=None, default_principal_type=None, extra_forgot_password_principal_types=None, login_password_input=None, forgot_password_captcha_provider=None, forgot_password_mediums=None, _configuration=None):  # noqa: E501
        """DataForLogin - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._access_password_type = None
        self._principal_types = None
        self._default_principal_type = None
        self._extra_forgot_password_principal_types = None
        self._login_password_input = None
        self._forgot_password_captcha_provider = None
        self._forgot_password_mediums = None
        self.discriminator = None

        if access_password_type is not None:
            self.access_password_type = access_password_type
        if principal_types is not None:
            self.principal_types = principal_types
        if default_principal_type is not None:
            self.default_principal_type = default_principal_type
        if extra_forgot_password_principal_types is not None:
            self.extra_forgot_password_principal_types = extra_forgot_password_principal_types
        if login_password_input is not None:
            self.login_password_input = login_password_input
        if forgot_password_captcha_provider is not None:
            self.forgot_password_captcha_provider = forgot_password_captcha_provider
        if forgot_password_mediums is not None:
            self.forgot_password_mediums = forgot_password_mediums

    @property
    def access_password_type(self):
        """Gets the access_password_type of this DataForLogin.  # noqa: E501

        The password type used for login access   # noqa: E501

        :return: The access_password_type of this DataForLogin.  # noqa: E501
        :rtype: EntityReference
        """
        return self._access_password_type

    @access_password_type.setter
    def access_password_type(self, access_password_type):
        """Sets the access_password_type of this DataForLogin.

        The password type used for login access   # noqa: E501

        :param access_password_type: The access_password_type of this DataForLogin.  # noqa: E501
        :type: EntityReference
        """

        self._access_password_type = access_password_type

    @property
    def principal_types(self):
        """Gets the principal_types of this DataForLogin.  # noqa: E501

        The identification methods accepted for login  # noqa: E501

        :return: The principal_types of this DataForLogin.  # noqa: E501
        :rtype: list[PrincipalTypeInput]
        """
        return self._principal_types

    @principal_types.setter
    def principal_types(self, principal_types):
        """Sets the principal_types of this DataForLogin.

        The identification methods accepted for login  # noqa: E501

        :param principal_types: The principal_types of this DataForLogin.  # noqa: E501
        :type: list[PrincipalTypeInput]
        """

        self._principal_types = principal_types

    @property
    def default_principal_type(self):
        """Gets the default_principal_type of this DataForLogin.  # noqa: E501

        The internal name of the identification method that is marked as default for the current channel configuration. This is optional, and if there is no default, all possible identification methods will be attempted for login.   # noqa: E501

        :return: The default_principal_type of this DataForLogin.  # noqa: E501
        :rtype: str
        """
        return self._default_principal_type

    @default_principal_type.setter
    def default_principal_type(self, default_principal_type):
        """Sets the default_principal_type of this DataForLogin.

        The internal name of the identification method that is marked as default for the current channel configuration. This is optional, and if there is no default, all possible identification methods will be attempted for login.   # noqa: E501

        :param default_principal_type: The default_principal_type of this DataForLogin.  # noqa: E501
        :type: str
        """

        self._default_principal_type = default_principal_type

    @property
    def extra_forgot_password_principal_types(self):
        """Gets the extra_forgot_password_principal_types of this DataForLogin.  # noqa: E501

        The additional identification methods also accepted for the  forgotten password request.   # noqa: E501

        :return: The extra_forgot_password_principal_types of this DataForLogin.  # noqa: E501
        :rtype: list[PrincipalTypeInput]
        """
        return self._extra_forgot_password_principal_types

    @extra_forgot_password_principal_types.setter
    def extra_forgot_password_principal_types(self, extra_forgot_password_principal_types):
        """Sets the extra_forgot_password_principal_types of this DataForLogin.

        The additional identification methods also accepted for the  forgotten password request.   # noqa: E501

        :param extra_forgot_password_principal_types: The extra_forgot_password_principal_types of this DataForLogin.  # noqa: E501
        :type: list[PrincipalTypeInput]
        """

        self._extra_forgot_password_principal_types = extra_forgot_password_principal_types

    @property
    def login_password_input(self):
        """Gets the login_password_input of this DataForLogin.  # noqa: E501

        Contains data for the password used on login  # noqa: E501

        :return: The login_password_input of this DataForLogin.  # noqa: E501
        :rtype: PasswordInput
        """
        return self._login_password_input

    @login_password_input.setter
    def login_password_input(self, login_password_input):
        """Sets the login_password_input of this DataForLogin.

        Contains data for the password used on login  # noqa: E501

        :param login_password_input: The login_password_input of this DataForLogin.  # noqa: E501
        :type: PasswordInput
        """

        self._login_password_input = login_password_input

    @property
    def forgot_password_captcha_provider(self):
        """Gets the forgot_password_captcha_provider of this DataForLogin.  # noqa: E501

        If the forgot password request requires a captcha, will be the  provider used to request one. Otherwise will be null. Possible values are: * internal: Default provider using images   # noqa: E501

        :return: The forgot_password_captcha_provider of this DataForLogin.  # noqa: E501
        :rtype: CaptchaProviderEnum
        """
        return self._forgot_password_captcha_provider

    @forgot_password_captcha_provider.setter
    def forgot_password_captcha_provider(self, forgot_password_captcha_provider):
        """Sets the forgot_password_captcha_provider of this DataForLogin.

        If the forgot password request requires a captcha, will be the  provider used to request one. Otherwise will be null. Possible values are: * internal: Default provider using images   # noqa: E501

        :param forgot_password_captcha_provider: The forgot_password_captcha_provider of this DataForLogin.  # noqa: E501
        :type: CaptchaProviderEnum
        """

        self._forgot_password_captcha_provider = forgot_password_captcha_provider

    @property
    def forgot_password_mediums(self):
        """Gets the forgot_password_mediums of this DataForLogin.  # noqa: E501

        If the forgot password request is enabled, returns the mediums the user can choose to receive the confirmation key or code.  If nothing is returned, forgot password is not enabled. Possibles values for each array element are: * email: The user will receive an email with the information * sms: The user will receive a sms with the information (only if there is at least one phone enabled for sms)   # noqa: E501

        :return: The forgot_password_mediums of this DataForLogin.  # noqa: E501
        :rtype: list[SendMediumEnum]
        """
        return self._forgot_password_mediums

    @forgot_password_mediums.setter
    def forgot_password_mediums(self, forgot_password_mediums):
        """Sets the forgot_password_mediums of this DataForLogin.

        If the forgot password request is enabled, returns the mediums the user can choose to receive the confirmation key or code.  If nothing is returned, forgot password is not enabled. Possibles values for each array element are: * email: The user will receive an email with the information * sms: The user will receive a sms with the information (only if there is at least one phone enabled for sms)   # noqa: E501

        :param forgot_password_mediums: The forgot_password_mediums of this DataForLogin.  # noqa: E501
        :type: list[SendMediumEnum]
        """

        self._forgot_password_mediums = forgot_password_mediums

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DataForLogin, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataForLogin):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DataForLogin):
            return True

        return self.to_dict() != other.to_dict()
