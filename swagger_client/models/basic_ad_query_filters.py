# coding: utf-8

"""
    Cyclos 4.11.5 API

    The REST API for Cyclos 4.11.5  # noqa: E501

    OpenAPI spec version: 4.11.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class BasicAdQueryFilters(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'custom_fields': 'list[str]',
        'category': 'str',
        'currency': 'str',
        'price_range': 'list[BigDecimal]',
        'has_images': 'bool',
        'publication_period': 'list[datetime]',
        'expiration_period': 'list[datetime]',
        'kind': 'AdKind',
        'statuses': 'list[AdStatusEnum]',
        'order_by': 'AdOrderByEnum',
        'address_result': 'AdAddressResultEnum'
    }

    attribute_map = {
        'custom_fields': 'customFields',
        'category': 'category',
        'currency': 'currency',
        'price_range': 'priceRange',
        'has_images': 'hasImages',
        'publication_period': 'publicationPeriod',
        'expiration_period': 'expirationPeriod',
        'kind': 'kind',
        'statuses': 'statuses',
        'order_by': 'orderBy',
        'address_result': 'addressResult'
    }

    def __init__(self, custom_fields=None, category=None, currency=None, price_range=None, has_images=None, publication_period=None, expiration_period=None, kind=None, statuses=None, order_by=None, address_result=None, _configuration=None):  # noqa: E501
        """BasicAdQueryFilters - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._custom_fields = None
        self._category = None
        self._currency = None
        self._price_range = None
        self._has_images = None
        self._publication_period = None
        self._expiration_period = None
        self._kind = None
        self._statuses = None
        self._order_by = None
        self._address_result = None
        self.discriminator = None

        if custom_fields is not None:
            self.custom_fields = custom_fields
        if category is not None:
            self.category = category
        if currency is not None:
            self.currency = currency
        if price_range is not None:
            self.price_range = price_range
        if has_images is not None:
            self.has_images = has_images
        if publication_period is not None:
            self.publication_period = publication_period
        if expiration_period is not None:
            self.expiration_period = expiration_period
        if kind is not None:
            self.kind = kind
        if statuses is not None:
            self.statuses = statuses
        if order_by is not None:
            self.order_by = order_by
        if address_result is not None:
            self.address_result = address_result

    @property
    def custom_fields(self):
        """Gets the custom_fields of this BasicAdQueryFilters.  # noqa: E501

        Advertisement custom field values used as filters. Is a comma-separated array, where each part consists in two parts: the internal name (or custom field id) of the field, and a value, both separated by : (colon).  For example, `customFields=field1:value1,field2:value2`. Sometimes multiple values are accepted. In this case, the multiple values are separated by pipes. For example, customFields=field1:valueA|valueB. Enumerated fields accept multiple values, while numeric and date fields also accept ranges, which are two values, pipe-separated. For example, `customFields=tradeType:offer|search,extraDate:2000-01-01|2001-12-31` would match results whose custom field with internal name `tradeType` is either `offer` or `search`, and whose `extraDate` is between January 1, 2000 and December 31, 2001. To specify a single bound in ranges (like birth dates before December 31, 2001), use a pipe in one of the values, like `customFields=extraDate:|2001-12-31`.  A note for dynamic custom fields: If a script is used to generate possible values for search, the list will be returned in the  corresponding data, and it is sent as a pipe-separated list of values (not labels). For example: `customFields=dynamic:a|b|c`. However, it is also possible to perform a keywords-like (full-text) search using the dynamic value label. In this case a single value, prefixed by single quotes should be used. For example: `customFields=dynamic:'business`.   # noqa: E501

        :return: The custom_fields of this BasicAdQueryFilters.  # noqa: E501
        :rtype: list[str]
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this BasicAdQueryFilters.

        Advertisement custom field values used as filters. Is a comma-separated array, where each part consists in two parts: the internal name (or custom field id) of the field, and a value, both separated by : (colon).  For example, `customFields=field1:value1,field2:value2`. Sometimes multiple values are accepted. In this case, the multiple values are separated by pipes. For example, customFields=field1:valueA|valueB. Enumerated fields accept multiple values, while numeric and date fields also accept ranges, which are two values, pipe-separated. For example, `customFields=tradeType:offer|search,extraDate:2000-01-01|2001-12-31` would match results whose custom field with internal name `tradeType` is either `offer` or `search`, and whose `extraDate` is between January 1, 2000 and December 31, 2001. To specify a single bound in ranges (like birth dates before December 31, 2001), use a pipe in one of the values, like `customFields=extraDate:|2001-12-31`.  A note for dynamic custom fields: If a script is used to generate possible values for search, the list will be returned in the  corresponding data, and it is sent as a pipe-separated list of values (not labels). For example: `customFields=dynamic:a|b|c`. However, it is also possible to perform a keywords-like (full-text) search using the dynamic value label. In this case a single value, prefixed by single quotes should be used. For example: `customFields=dynamic:'business`.   # noqa: E501

        :param custom_fields: The custom_fields of this BasicAdQueryFilters.  # noqa: E501
        :type: list[str]
        """

        self._custom_fields = custom_fields

    @property
    def category(self):
        """Gets the category of this BasicAdQueryFilters.  # noqa: E501

        Either id or internal name of a category  # noqa: E501

        :return: The category of this BasicAdQueryFilters.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this BasicAdQueryFilters.

        Either id or internal name of a category  # noqa: E501

        :param category: The category of this BasicAdQueryFilters.  # noqa: E501
        :type: str
        """

        self._category = category

    @property
    def currency(self):
        """Gets the currency of this BasicAdQueryFilters.  # noqa: E501

        Either id or internal name of a currency for the price  # noqa: E501

        :return: The currency of this BasicAdQueryFilters.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this BasicAdQueryFilters.

        Either id or internal name of a currency for the price  # noqa: E501

        :param currency: The currency of this BasicAdQueryFilters.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def price_range(self):
        """Gets the price_range of this BasicAdQueryFilters.  # noqa: E501

        The minumum / maximum price. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma.   # noqa: E501

        :return: The price_range of this BasicAdQueryFilters.  # noqa: E501
        :rtype: list[BigDecimal]
        """
        return self._price_range

    @price_range.setter
    def price_range(self, price_range):
        """Sets the price_range of this BasicAdQueryFilters.

        The minumum / maximum price. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma.   # noqa: E501

        :param price_range: The price_range of this BasicAdQueryFilters.  # noqa: E501
        :type: list[BigDecimal]
        """

        self._price_range = price_range

    @property
    def has_images(self):
        """Gets the has_images of this BasicAdQueryFilters.  # noqa: E501

        When set to `true` only advertisements with images are returned   # noqa: E501

        :return: The has_images of this BasicAdQueryFilters.  # noqa: E501
        :rtype: bool
        """
        return self._has_images

    @has_images.setter
    def has_images(self, has_images):
        """Sets the has_images of this BasicAdQueryFilters.

        When set to `true` only advertisements with images are returned   # noqa: E501

        :param has_images: The has_images of this BasicAdQueryFilters.  # noqa: E501
        :type: bool
        """

        self._has_images = has_images

    @property
    def publication_period(self):
        """Gets the publication_period of this BasicAdQueryFilters.  # noqa: E501

        The minimum / maximum publication date. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma.   # noqa: E501

        :return: The publication_period of this BasicAdQueryFilters.  # noqa: E501
        :rtype: list[datetime]
        """
        return self._publication_period

    @publication_period.setter
    def publication_period(self, publication_period):
        """Sets the publication_period of this BasicAdQueryFilters.

        The minimum / maximum publication date. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma.   # noqa: E501

        :param publication_period: The publication_period of this BasicAdQueryFilters.  # noqa: E501
        :type: list[datetime]
        """

        self._publication_period = publication_period

    @property
    def expiration_period(self):
        """Gets the expiration_period of this BasicAdQueryFilters.  # noqa: E501

        The minimum / maximum expiration date. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma.   # noqa: E501

        :return: The expiration_period of this BasicAdQueryFilters.  # noqa: E501
        :rtype: list[datetime]
        """
        return self._expiration_period

    @expiration_period.setter
    def expiration_period(self, expiration_period):
        """Sets the expiration_period of this BasicAdQueryFilters.

        The minimum / maximum expiration date. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma.   # noqa: E501

        :param expiration_period: The expiration_period of this BasicAdQueryFilters.  # noqa: E501
        :type: list[datetime]
        """

        self._expiration_period = expiration_period

    @property
    def kind(self):
        """Gets the kind of this BasicAdQueryFilters.  # noqa: E501

        The possible kinds of an advertisement Possible values are: * simple: A simple advertisement that can be viewed, but not directly bought * webshop: An advertisement that is part of an webshop. Can be bought, there is stock management, etc.   # noqa: E501

        :return: The kind of this BasicAdQueryFilters.  # noqa: E501
        :rtype: AdKind
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this BasicAdQueryFilters.

        The possible kinds of an advertisement Possible values are: * simple: A simple advertisement that can be viewed, but not directly bought * webshop: An advertisement that is part of an webshop. Can be bought, there is stock management, etc.   # noqa: E501

        :param kind: The kind of this BasicAdQueryFilters.  # noqa: E501
        :type: AdKind
        """

        self._kind = kind

    @property
    def statuses(self):
        """Gets the statuses of this BasicAdQueryFilters.  # noqa: E501

        The possible status for an advertisement Possibles values for each array element are: * active: The advertisement is published and can be seen by other users. * disabled: The advertisement is disabled because the owner no longer has access to the currency of the advertisement. It cannot be seen by other users. * draft: In draft status, only the owner can see and edit the advertisement. This status is only possible if the system is configured to require authorizations. * expired: The advertisement publication period has already expired, and cannot be seen by other users. * hidden: The advertisement is manually hidden from other users * pending: The advertisement is pending for an authorization and cannot be seen by other users. This status is only possible if the system is configured to require authorizations. * scheduled: The advertisement has a future publication period, and cannot be seen by other users.    # noqa: E501

        :return: The statuses of this BasicAdQueryFilters.  # noqa: E501
        :rtype: list[AdStatusEnum]
        """
        return self._statuses

    @statuses.setter
    def statuses(self, statuses):
        """Sets the statuses of this BasicAdQueryFilters.

        The possible status for an advertisement Possibles values for each array element are: * active: The advertisement is published and can be seen by other users. * disabled: The advertisement is disabled because the owner no longer has access to the currency of the advertisement. It cannot be seen by other users. * draft: In draft status, only the owner can see and edit the advertisement. This status is only possible if the system is configured to require authorizations. * expired: The advertisement publication period has already expired, and cannot be seen by other users. * hidden: The advertisement is manually hidden from other users * pending: The advertisement is pending for an authorization and cannot be seen by other users. This status is only possible if the system is configured to require authorizations. * scheduled: The advertisement has a future publication period, and cannot be seen by other users.    # noqa: E501

        :param statuses: The statuses of this BasicAdQueryFilters.  # noqa: E501
        :type: list[AdStatusEnum]
        """

        self._statuses = statuses

    @property
    def order_by(self):
        """Gets the order_by of this BasicAdQueryFilters.  # noqa: E501

        Indicates how advertisements results are ordered. Possible values are: * date: Newest advertisements are returned first. * distance: Only useful when providing a location, will return nearer advertisements first. * priceAsc: Smaller prices are returned first. Advertisements without price are returned last. * priceDesc: Higher prices are returned first. Advertisements without price are returned last. * random: Without definite order * relevance: This is the default if keywords are used. Best matching advertisements come first.   # noqa: E501

        :return: The order_by of this BasicAdQueryFilters.  # noqa: E501
        :rtype: AdOrderByEnum
        """
        return self._order_by

    @order_by.setter
    def order_by(self, order_by):
        """Sets the order_by of this BasicAdQueryFilters.

        Indicates how advertisements results are ordered. Possible values are: * date: Newest advertisements are returned first. * distance: Only useful when providing a location, will return nearer advertisements first. * priceAsc: Smaller prices are returned first. Advertisements without price are returned last. * priceDesc: Higher prices are returned first. Advertisements without price are returned last. * random: Without definite order * relevance: This is the default if keywords are used. Best matching advertisements come first.   # noqa: E501

        :param order_by: The order_by of this BasicAdQueryFilters.  # noqa: E501
        :type: AdOrderByEnum
        """

        self._order_by = order_by

    @property
    def address_result(self):
        """Gets the address_result of this BasicAdQueryFilters.  # noqa: E501

        Determines which address is returned on the search, if any. By default no addresses are returned. This option is useful for displaying results as locations on a map. In all cases only located addresses (those that have the geographical coordinates set) are returned. When returning all addresses, data related with multiple addresses is returned multiple times. Possible values are: * all: All addresses are returned. * nearest: The nearest address from the reference location is returned. Only usable if a reference coordinate (`latitude` and `longitude`) * none: Addresses are not returned.   # noqa: E501

        :return: The address_result of this BasicAdQueryFilters.  # noqa: E501
        :rtype: AdAddressResultEnum
        """
        return self._address_result

    @address_result.setter
    def address_result(self, address_result):
        """Sets the address_result of this BasicAdQueryFilters.

        Determines which address is returned on the search, if any. By default no addresses are returned. This option is useful for displaying results as locations on a map. In all cases only located addresses (those that have the geographical coordinates set) are returned. When returning all addresses, data related with multiple addresses is returned multiple times. Possible values are: * all: All addresses are returned. * nearest: The nearest address from the reference location is returned. Only usable if a reference coordinate (`latitude` and `longitude`) * none: Addresses are not returned.   # noqa: E501

        :param address_result: The address_result of this BasicAdQueryFilters.  # noqa: E501
        :type: AdAddressResultEnum
        """

        self._address_result = address_result

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BasicAdQueryFilters, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BasicAdQueryFilters):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BasicAdQueryFilters):
            return True

        return self.to_dict() != other.to_dict()
