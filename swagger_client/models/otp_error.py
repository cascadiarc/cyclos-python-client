# coding: utf-8

"""
    Cyclos 4.11.5 API

    The REST API for Cyclos 4.11.5  # noqa: E501

    OpenAPI spec version: 4.11.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class OtpError(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'code': 'OtpErrorCode',
        'sms_status': 'OutboundSmsStatusEnum'
    }

    attribute_map = {
        'code': 'code',
        'sms_status': 'smsStatus'
    }

    def __init__(self, code=None, sms_status=None, _configuration=None):  # noqa: E501
        """OtpError - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._code = None
        self._sms_status = None
        self.discriminator = None

        if code is not None:
            self.code = code
        if sms_status is not None:
            self.sms_status = sms_status

    @property
    def code(self):
        """Gets the code of this OtpError.  # noqa: E501

        Application-specific error codes for an OTP error. Possible values are: * errorSendingSms: An error has occurred trying to send the OTP through SMS. * unexpected: An unexpected error has occurred.    # noqa: E501

        :return: The code of this OtpError.  # noqa: E501
        :rtype: OtpErrorCode
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this OtpError.

        Application-specific error codes for an OTP error. Possible values are: * errorSendingSms: An error has occurred trying to send the OTP through SMS. * unexpected: An unexpected error has occurred.    # noqa: E501

        :param code: The code of this OtpError.  # noqa: E501
        :type: OtpErrorCode
        """

        self._code = code

    @property
    def sms_status(self):
        """Gets the sms_status of this OtpError.  # noqa: E501

        Only if code is `errorSendingSms` Possible values are: * gatewayUreachable: Network problem, or gateway server down * invalid: The parameters for sending an SMS message were invalid * maxMessagesReached: The maximum SMS messages for the user (or guest) have been reached * rejected: The gateway has rejected the SMS message * success: The SMS message was successfully sent * timeout: Timeout while connecting or waiting for a gateway server reply * unexpected: An unexpected error has occurred   # noqa: E501

        :return: The sms_status of this OtpError.  # noqa: E501
        :rtype: OutboundSmsStatusEnum
        """
        return self._sms_status

    @sms_status.setter
    def sms_status(self, sms_status):
        """Sets the sms_status of this OtpError.

        Only if code is `errorSendingSms` Possible values are: * gatewayUreachable: Network problem, or gateway server down * invalid: The parameters for sending an SMS message were invalid * maxMessagesReached: The maximum SMS messages for the user (or guest) have been reached * rejected: The gateway has rejected the SMS message * success: The SMS message was successfully sent * timeout: Timeout while connecting or waiting for a gateway server reply * unexpected: An unexpected error has occurred   # noqa: E501

        :param sms_status: The sms_status of this OtpError.  # noqa: E501
        :type: OutboundSmsStatusEnum
        """

        self._sms_status = sms_status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OtpError, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OtpError):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OtpError):
            return True

        return self.to_dict() != other.to_dict()
