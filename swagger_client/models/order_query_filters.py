# coding: utf-8

"""
    Cyclos 4.11.5 API

    The REST API for Cyclos 4.11.5  # noqa: E501

    OpenAPI spec version: 4.11.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class OrderQueryFilters(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'related_user': 'str',
        'statuses': 'list[OrderStatusEnum]',
        'number': 'str',
        'creation_period': 'list[datetime]',
        'sales': 'bool'
    }

    attribute_map = {
        'related_user': 'relatedUser',
        'statuses': 'statuses',
        'number': 'number',
        'creation_period': 'creationPeriod',
        'sales': 'sales'
    }

    def __init__(self, related_user=None, statuses=None, number=None, creation_period=None, sales=None, _configuration=None):  # noqa: E501
        """OrderQueryFilters - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._related_user = None
        self._statuses = None
        self._number = None
        self._creation_period = None
        self._sales = None
        self.discriminator = None

        if related_user is not None:
            self.related_user = related_user
        if statuses is not None:
            self.statuses = statuses
        if number is not None:
            self.number = number
        if creation_period is not None:
            self.creation_period = creation_period
        if sales is not None:
            self.sales = sales

    @property
    def related_user(self):
        """Gets the related_user of this OrderQueryFilters.  # noqa: E501

        Either id or an identification, such as login name, e-mail, etc, for the seller or buyer according whether we are searching for purchases  or sales. The allowed identification methods are those the authenticated user can use on keywords search.       # noqa: E501

        :return: The related_user of this OrderQueryFilters.  # noqa: E501
        :rtype: str
        """
        return self._related_user

    @related_user.setter
    def related_user(self, related_user):
        """Sets the related_user of this OrderQueryFilters.

        Either id or an identification, such as login name, e-mail, etc, for the seller or buyer according whether we are searching for purchases  or sales. The allowed identification methods are those the authenticated user can use on keywords search.       # noqa: E501

        :param related_user: The related_user of this OrderQueryFilters.  # noqa: E501
        :type: str
        """

        self._related_user = related_user

    @property
    def statuses(self):
        """Gets the statuses of this OrderQueryFilters.  # noqa: E501

        The possible statuses for an order Possibles values for each array element are: * completed: The order was accepted by the seller and/or buyer and the related payment was done. * disposed: The order was marked as disposed because the seller and/or buyer were removed or they do not have any account in the order's currency. * draft: The order has been created by the seller, but has not yet been sent to the buyer for approval * paymentCanceled: The related payment was not done because was canceled after finish the authorization process. * paymentDenied: The related payment was not done because was denied. * paymentPending: The order was accepted by the seller and/or buyer and the related payment is waiting for authorization. * pendingBuyer: The order is pending by the buyer's action. * pendingSeller: The order is pending by the seller's action. * rejectedByBuyer: The order was rejected by the buyer. * rejectedBySeller: The order was rejected by the seller.   # noqa: E501

        :return: The statuses of this OrderQueryFilters.  # noqa: E501
        :rtype: list[OrderStatusEnum]
        """
        return self._statuses

    @statuses.setter
    def statuses(self, statuses):
        """Sets the statuses of this OrderQueryFilters.

        The possible statuses for an order Possibles values for each array element are: * completed: The order was accepted by the seller and/or buyer and the related payment was done. * disposed: The order was marked as disposed because the seller and/or buyer were removed or they do not have any account in the order's currency. * draft: The order has been created by the seller, but has not yet been sent to the buyer for approval * paymentCanceled: The related payment was not done because was canceled after finish the authorization process. * paymentDenied: The related payment was not done because was denied. * paymentPending: The order was accepted by the seller and/or buyer and the related payment is waiting for authorization. * pendingBuyer: The order is pending by the buyer's action. * pendingSeller: The order is pending by the seller's action. * rejectedByBuyer: The order was rejected by the buyer. * rejectedBySeller: The order was rejected by the seller.   # noqa: E501

        :param statuses: The statuses of this OrderQueryFilters.  # noqa: E501
        :type: list[OrderStatusEnum]
        """

        self._statuses = statuses

    @property
    def number(self):
        """Gets the number of this OrderQueryFilters.  # noqa: E501

        The generated order number according to the webshop settings.  # noqa: E501

        :return: The number of this OrderQueryFilters.  # noqa: E501
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this OrderQueryFilters.

        The generated order number according to the webshop settings.  # noqa: E501

        :param number: The number of this OrderQueryFilters.  # noqa: E501
        :type: str
        """

        self._number = number

    @property
    def creation_period(self):
        """Gets the creation_period of this OrderQueryFilters.  # noqa: E501

        The minimum / maximum order creation date. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma.   # noqa: E501

        :return: The creation_period of this OrderQueryFilters.  # noqa: E501
        :rtype: list[datetime]
        """
        return self._creation_period

    @creation_period.setter
    def creation_period(self, creation_period):
        """Sets the creation_period of this OrderQueryFilters.

        The minimum / maximum order creation date. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma.   # noqa: E501

        :param creation_period: The creation_period of this OrderQueryFilters.  # noqa: E501
        :type: list[datetime]
        """

        self._creation_period = creation_period

    @property
    def sales(self):
        """Gets the sales of this OrderQueryFilters.  # noqa: E501

        Are we searching for sales or purchases? If not specified it's assumed purchases (i.e `false`)  # noqa: E501

        :return: The sales of this OrderQueryFilters.  # noqa: E501
        :rtype: bool
        """
        return self._sales

    @sales.setter
    def sales(self, sales):
        """Sets the sales of this OrderQueryFilters.

        Are we searching for sales or purchases? If not specified it's assumed purchases (i.e `false`)  # noqa: E501

        :param sales: The sales of this OrderQueryFilters.  # noqa: E501
        :type: bool
        """

        self._sales = sales

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OrderQueryFilters, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrderQueryFilters):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OrderQueryFilters):
            return True

        return self.to_dict() != other.to_dict()
