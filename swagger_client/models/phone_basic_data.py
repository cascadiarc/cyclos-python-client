# coding: utf-8

"""
    Cyclos 4.11.5 API

    The REST API for Cyclos 4.11.5  # noqa: E501

    OpenAPI spec version: 4.11.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class PhoneBasicData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'PhoneKind',
        'country': 'str',
        'always_show_international_number': 'bool',
        'example': 'str',
        'extension_enabled': 'bool',
        'sms_enabled': 'bool',
        'manage_privacy': 'bool',
        'manually_verify': 'bool',
        'confirmation_password_input': 'PasswordInput'
    }

    attribute_map = {
        'type': 'type',
        'country': 'country',
        'always_show_international_number': 'alwaysShowInternationalNumber',
        'example': 'example',
        'extension_enabled': 'extensionEnabled',
        'sms_enabled': 'smsEnabled',
        'manage_privacy': 'managePrivacy',
        'manually_verify': 'manuallyVerify',
        'confirmation_password_input': 'confirmationPasswordInput'
    }

    def __init__(self, type=None, country=None, always_show_international_number=None, example=None, extension_enabled=None, sms_enabled=None, manage_privacy=None, manually_verify=None, confirmation_password_input=None, _configuration=None):  # noqa: E501
        """PhoneBasicData - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._type = None
        self._country = None
        self._always_show_international_number = None
        self._example = None
        self._extension_enabled = None
        self._sms_enabled = None
        self._manage_privacy = None
        self._manually_verify = None
        self._confirmation_password_input = None
        self.discriminator = None

        if type is not None:
            self.type = type
        if country is not None:
            self.country = country
        if always_show_international_number is not None:
            self.always_show_international_number = always_show_international_number
        if example is not None:
            self.example = example
        if extension_enabled is not None:
            self.extension_enabled = extension_enabled
        if sms_enabled is not None:
            self.sms_enabled = sms_enabled
        if manage_privacy is not None:
            self.manage_privacy = manage_privacy
        if manually_verify is not None:
            self.manually_verify = manually_verify
        if confirmation_password_input is not None:
            self.confirmation_password_input = confirmation_password_input

    @property
    def type(self):
        """Gets the type of this PhoneBasicData.  # noqa: E501

        Type of phone Possible values are: * landLine: A landline phone * mobile: A mobile phone   # noqa: E501

        :return: The type of this PhoneBasicData.  # noqa: E501
        :rtype: PhoneKind
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PhoneBasicData.

        Type of phone Possible values are: * landLine: A landline phone * mobile: A mobile phone   # noqa: E501

        :param type: The type of this PhoneBasicData.  # noqa: E501
        :type: PhoneKind
        """

        self._type = type

    @property
    def country(self):
        """Gets the country of this PhoneBasicData.  # noqa: E501

        The 2-letter country code used by default for numbers. Unless an international number is specified (using the `+` prefix), the phone number is assumed to belong to this country.   # noqa: E501

        :return: The country of this PhoneBasicData.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this PhoneBasicData.

        The 2-letter country code used by default for numbers. Unless an international number is specified (using the `+` prefix), the phone number is assumed to belong to this country.   # noqa: E501

        :param country: The country of this PhoneBasicData.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def always_show_international_number(self):
        """Gets the always_show_international_number of this PhoneBasicData.  # noqa: E501

        Indicates the it is configured to always format numbers using the international format. If set to false, numbers will be formatted in the national format.   # noqa: E501

        :return: The always_show_international_number of this PhoneBasicData.  # noqa: E501
        :rtype: bool
        """
        return self._always_show_international_number

    @always_show_international_number.setter
    def always_show_international_number(self, always_show_international_number):
        """Sets the always_show_international_number of this PhoneBasicData.

        Indicates the it is configured to always format numbers using the international format. If set to false, numbers will be formatted in the national format.   # noqa: E501

        :param always_show_international_number: The always_show_international_number of this PhoneBasicData.  # noqa: E501
        :type: bool
        """

        self._always_show_international_number = always_show_international_number

    @property
    def example(self):
        """Gets the example of this PhoneBasicData.  # noqa: E501

        An example phone number. Can be either a land-line or mobile phone number example, depending on this phone kind phone   # noqa: E501

        :return: The example of this PhoneBasicData.  # noqa: E501
        :rtype: str
        """
        return self._example

    @example.setter
    def example(self, example):
        """Sets the example of this PhoneBasicData.

        An example phone number. Can be either a land-line or mobile phone number example, depending on this phone kind phone   # noqa: E501

        :param example: The example of this PhoneBasicData.  # noqa: E501
        :type: str
        """

        self._example = example

    @property
    def extension_enabled(self):
        """Gets the extension_enabled of this PhoneBasicData.  # noqa: E501

        Only returned for land line phones. Indicates whether the extension is enabled.   # noqa: E501

        :return: The extension_enabled of this PhoneBasicData.  # noqa: E501
        :rtype: bool
        """
        return self._extension_enabled

    @extension_enabled.setter
    def extension_enabled(self, extension_enabled):
        """Sets the extension_enabled of this PhoneBasicData.

        Only returned for land line phones. Indicates whether the extension is enabled.   # noqa: E501

        :param extension_enabled: The extension_enabled of this PhoneBasicData.  # noqa: E501
        :type: bool
        """

        self._extension_enabled = extension_enabled

    @property
    def sms_enabled(self):
        """Gets the sms_enabled of this PhoneBasicData.  # noqa: E501

        Only returned for mobile phones. Indicates whether outbound SMS is enabled in Cyclos   # noqa: E501

        :return: The sms_enabled of this PhoneBasicData.  # noqa: E501
        :rtype: bool
        """
        return self._sms_enabled

    @sms_enabled.setter
    def sms_enabled(self, sms_enabled):
        """Sets the sms_enabled of this PhoneBasicData.

        Only returned for mobile phones. Indicates whether outbound SMS is enabled in Cyclos   # noqa: E501

        :param sms_enabled: The sms_enabled of this PhoneBasicData.  # noqa: E501
        :type: bool
        """

        self._sms_enabled = sms_enabled

    @property
    def manage_privacy(self):
        """Gets the manage_privacy of this PhoneBasicData.  # noqa: E501

        Can the authenticated user manage the privacy of this phone?  # noqa: E501

        :return: The manage_privacy of this PhoneBasicData.  # noqa: E501
        :rtype: bool
        """
        return self._manage_privacy

    @manage_privacy.setter
    def manage_privacy(self, manage_privacy):
        """Sets the manage_privacy of this PhoneBasicData.

        Can the authenticated user manage the privacy of this phone?  # noqa: E501

        :param manage_privacy: The manage_privacy of this PhoneBasicData.  # noqa: E501
        :type: bool
        """

        self._manage_privacy = manage_privacy

    @property
    def manually_verify(self):
        """Gets the manually_verify of this PhoneBasicData.  # noqa: E501

        Can the authenticated user manully verify a mobile phone?  # noqa: E501

        :return: The manually_verify of this PhoneBasicData.  # noqa: E501
        :rtype: bool
        """
        return self._manually_verify

    @manually_verify.setter
    def manually_verify(self, manually_verify):
        """Sets the manually_verify of this PhoneBasicData.

        Can the authenticated user manully verify a mobile phone?  # noqa: E501

        :param manually_verify: The manually_verify of this PhoneBasicData.  # noqa: E501
        :type: bool
        """

        self._manually_verify = manually_verify

    @property
    def confirmation_password_input(self):
        """Gets the confirmation_password_input of this PhoneBasicData.  # noqa: E501

        If a confirmation password is used, contains the definitions on how to request that password from the user. This confirmation password is required when performing sensible actions. Sometimes this is dynamic, for example, the confirmation might be configured to be used only once per session, or operations like payments may have a limit per day to be without confirmation (pinless).   # noqa: E501

        :return: The confirmation_password_input of this PhoneBasicData.  # noqa: E501
        :rtype: PasswordInput
        """
        return self._confirmation_password_input

    @confirmation_password_input.setter
    def confirmation_password_input(self, confirmation_password_input):
        """Sets the confirmation_password_input of this PhoneBasicData.

        If a confirmation password is used, contains the definitions on how to request that password from the user. This confirmation password is required when performing sensible actions. Sometimes this is dynamic, for example, the confirmation might be configured to be used only once per session, or operations like payments may have a limit per day to be without confirmation (pinless).   # noqa: E501

        :param confirmation_password_input: The confirmation_password_input of this PhoneBasicData.  # noqa: E501
        :type: PasswordInput
        """

        self._confirmation_password_input = confirmation_password_input

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PhoneBasicData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PhoneBasicData):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PhoneBasicData):
            return True

        return self.to_dict() != other.to_dict()
