# coding: utf-8

"""
    Cyclos 4.11.5 API

    The REST API for Cyclos 4.11.5  # noqa: E501

    OpenAPI spec version: 4.11.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class CustomFieldPossibleValue(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'value': 'str',
        'default': 'bool',
        'internal_name': 'str',
        'category': 'EntityReference'
    }

    attribute_map = {
        'value': 'value',
        'default': 'default',
        'internal_name': 'internalName',
        'category': 'category'
    }

    def __init__(self, value=None, default=None, internal_name=None, category=None, _configuration=None):  # noqa: E501
        """CustomFieldPossibleValue - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._value = None
        self._default = None
        self._internal_name = None
        self._category = None
        self.discriminator = None

        if value is not None:
            self.value = value
        if default is not None:
            self.default = default
        if internal_name is not None:
            self.internal_name = internal_name
        if category is not None:
            self.category = category

    @property
    def value(self):
        """Gets the value of this CustomFieldPossibleValue.  # noqa: E501

        The display value  # noqa: E501

        :return: The value of this CustomFieldPossibleValue.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this CustomFieldPossibleValue.

        The display value  # noqa: E501

        :param value: The value of this CustomFieldPossibleValue.  # noqa: E501
        :type: str
        """

        self._value = value

    @property
    def default(self):
        """Gets the default of this CustomFieldPossibleValue.  # noqa: E501

        Indicates if this possible value is the default one.  # noqa: E501

        :return: The default of this CustomFieldPossibleValue.  # noqa: E501
        :rtype: bool
        """
        return self._default

    @default.setter
    def default(self, default):
        """Sets the default of this CustomFieldPossibleValue.

        Indicates if this possible value is the default one.  # noqa: E501

        :param default: The default of this CustomFieldPossibleValue.  # noqa: E501
        :type: bool
        """

        self._default = default

    @property
    def internal_name(self):
        """Gets the internal_name of this CustomFieldPossibleValue.  # noqa: E501

        The entity internal name, which can be seen as an extra identifier   # noqa: E501

        :return: The internal_name of this CustomFieldPossibleValue.  # noqa: E501
        :rtype: str
        """
        return self._internal_name

    @internal_name.setter
    def internal_name(self, internal_name):
        """Sets the internal_name of this CustomFieldPossibleValue.

        The entity internal name, which can be seen as an extra identifier   # noqa: E501

        :param internal_name: The internal_name of this CustomFieldPossibleValue.  # noqa: E501
        :type: str
        """

        self._internal_name = internal_name

    @property
    def category(self):
        """Gets the category of this CustomFieldPossibleValue.  # noqa: E501

        The internal name (if available) or id of the possible value category. Optional, and never used if custom field type is dynamic selection.   # noqa: E501

        :return: The category of this CustomFieldPossibleValue.  # noqa: E501
        :rtype: EntityReference
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this CustomFieldPossibleValue.

        The internal name (if available) or id of the possible value category. Optional, and never used if custom field type is dynamic selection.   # noqa: E501

        :param category: The category of this CustomFieldPossibleValue.  # noqa: E501
        :type: EntityReference
        """

        self._category = category

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CustomFieldPossibleValue, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CustomFieldPossibleValue):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CustomFieldPossibleValue):
            return True

        return self.to_dict() != other.to_dict()
