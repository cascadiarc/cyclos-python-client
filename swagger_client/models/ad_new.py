# coding: utf-8

"""
    Cyclos 4.11.5 API

    The REST API for Cyclos 4.11.5  # noqa: E501

    OpenAPI spec version: 4.11.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class AdNew(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'kind': 'AdKind',
        'submit_for_authorization': 'bool',
        'hidden': 'bool',
        'images': 'list[str]'
    }

    attribute_map = {
        'kind': 'kind',
        'submit_for_authorization': 'submitForAuthorization',
        'hidden': 'hidden',
        'images': 'images'
    }

    def __init__(self, kind=None, submit_for_authorization=None, hidden=None, images=None, _configuration=None):  # noqa: E501
        """AdNew - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._kind = None
        self._submit_for_authorization = None
        self._hidden = None
        self._images = None
        self.discriminator = None

        if kind is not None:
            self.kind = kind
        if submit_for_authorization is not None:
            self.submit_for_authorization = submit_for_authorization
        if hidden is not None:
            self.hidden = hidden
        if images is not None:
            self.images = images

    @property
    def kind(self):
        """Gets the kind of this AdNew.  # noqa: E501

        The advertisement kind to be created. Currently only `simple` advertisements can be managed through this API. The default is `simple`. Possible values are: * simple: A simple advertisement that can be viewed, but not directly bought * webshop: An advertisement that is part of an webshop. Can be bought, there is stock management, etc.   # noqa: E501

        :return: The kind of this AdNew.  # noqa: E501
        :rtype: AdKind
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this AdNew.

        The advertisement kind to be created. Currently only `simple` advertisements can be managed through this API. The default is `simple`. Possible values are: * simple: A simple advertisement that can be viewed, but not directly bought * webshop: An advertisement that is part of an webshop. Can be bought, there is stock management, etc.   # noqa: E501

        :param kind: The kind of this AdNew.  # noqa: E501
        :type: AdKind
        """

        self._kind = kind

    @property
    def submit_for_authorization(self):
        """Gets the submit_for_authorization of this AdNew.  # noqa: E501

        Only useful when authorization is required (`AdDataForNew`/`AdDataForEdit`.`requiresAuthorization` flag is `true`). Indicates whether the advertisement will be initially submitted for authorization (status = `pending`) or kept in the `draft` status.    # noqa: E501

        :return: The submit_for_authorization of this AdNew.  # noqa: E501
        :rtype: bool
        """
        return self._submit_for_authorization

    @submit_for_authorization.setter
    def submit_for_authorization(self, submit_for_authorization):
        """Sets the submit_for_authorization of this AdNew.

        Only useful when authorization is required (`AdDataForNew`/`AdDataForEdit`.`requiresAuthorization` flag is `true`). Indicates whether the advertisement will be initially submitted for authorization (status = `pending`) or kept in the `draft` status.    # noqa: E501

        :param submit_for_authorization: The submit_for_authorization of this AdNew.  # noqa: E501
        :type: bool
        """

        self._submit_for_authorization = submit_for_authorization

    @property
    def hidden(self):
        """Gets the hidden of this AdNew.  # noqa: E501

        Only useful when authorization is not required (`AdDataForNew`/`AdDataForEdit`.`requiresAuthorization` flag is `false`). Indicates whether the initial status for the advertisement should be `hidden` (when `true`) or `active` (when `false`).    # noqa: E501

        :return: The hidden of this AdNew.  # noqa: E501
        :rtype: bool
        """
        return self._hidden

    @hidden.setter
    def hidden(self, hidden):
        """Sets the hidden of this AdNew.

        Only useful when authorization is not required (`AdDataForNew`/`AdDataForEdit`.`requiresAuthorization` flag is `false`). Indicates whether the initial status for the advertisement should be `hidden` (when `true`) or `active` (when `false`).    # noqa: E501

        :param hidden: The hidden of this AdNew.  # noqa: E501
        :type: bool
        """

        self._hidden = hidden

    @property
    def images(self):
        """Gets the images of this AdNew.  # noqa: E501

        The ids of previously uploaded user temporary images to be initially used as advertisement images   # noqa: E501

        :return: The images of this AdNew.  # noqa: E501
        :rtype: list[str]
        """
        return self._images

    @images.setter
    def images(self, images):
        """Sets the images of this AdNew.

        The ids of previously uploaded user temporary images to be initially used as advertisement images   # noqa: E501

        :param images: The images of this AdNew.  # noqa: E501
        :type: list[str]
        """

        self._images = images

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AdNew, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AdNew):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AdNew):
            return True

        return self.to_dict() != other.to_dict()
