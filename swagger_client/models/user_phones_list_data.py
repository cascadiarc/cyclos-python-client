# coding: utf-8

"""
    Cyclos 4.11.5 API

    The REST API for Cyclos 4.11.5  # noqa: E501

    OpenAPI spec version: 4.11.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class UserPhonesListData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'can_manage': 'bool',
        'can_create_land_line': 'bool',
        'can_create_mobile': 'bool',
        'sms_enabled': 'bool',
        'can_verify': 'bool',
        'can_enable_for_sms': 'bool',
        'max_mobile_phones': 'int',
        'max_land_line_phones': 'int',
        'land_line_availability': 'AvailabilityEnum',
        'mobile_availability': 'AvailabilityEnum',
        'phones': 'list[PhoneResult]'
    }

    attribute_map = {
        'can_manage': 'canManage',
        'can_create_land_line': 'canCreateLandLine',
        'can_create_mobile': 'canCreateMobile',
        'sms_enabled': 'smsEnabled',
        'can_verify': 'canVerify',
        'can_enable_for_sms': 'canEnableForSms',
        'max_mobile_phones': 'maxMobilePhones',
        'max_land_line_phones': 'maxLandLinePhones',
        'land_line_availability': 'landLineAvailability',
        'mobile_availability': 'mobileAvailability',
        'phones': 'phones'
    }

    def __init__(self, can_manage=None, can_create_land_line=None, can_create_mobile=None, sms_enabled=None, can_verify=None, can_enable_for_sms=None, max_mobile_phones=None, max_land_line_phones=None, land_line_availability=None, mobile_availability=None, phones=None, _configuration=None):  # noqa: E501
        """UserPhonesListData - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._can_manage = None
        self._can_create_land_line = None
        self._can_create_mobile = None
        self._sms_enabled = None
        self._can_verify = None
        self._can_enable_for_sms = None
        self._max_mobile_phones = None
        self._max_land_line_phones = None
        self._land_line_availability = None
        self._mobile_availability = None
        self._phones = None
        self.discriminator = None

        if can_manage is not None:
            self.can_manage = can_manage
        if can_create_land_line is not None:
            self.can_create_land_line = can_create_land_line
        if can_create_mobile is not None:
            self.can_create_mobile = can_create_mobile
        if sms_enabled is not None:
            self.sms_enabled = sms_enabled
        if can_verify is not None:
            self.can_verify = can_verify
        if can_enable_for_sms is not None:
            self.can_enable_for_sms = can_enable_for_sms
        if max_mobile_phones is not None:
            self.max_mobile_phones = max_mobile_phones
        if max_land_line_phones is not None:
            self.max_land_line_phones = max_land_line_phones
        if land_line_availability is not None:
            self.land_line_availability = land_line_availability
        if mobile_availability is not None:
            self.mobile_availability = mobile_availability
        if phones is not None:
            self.phones = phones

    @property
    def can_manage(self):
        """Gets the can_manage of this UserPhonesListData.  # noqa: E501

        Can the authenticated user manage phones of this user?  # noqa: E501

        :return: The can_manage of this UserPhonesListData.  # noqa: E501
        :rtype: bool
        """
        return self._can_manage

    @can_manage.setter
    def can_manage(self, can_manage):
        """Sets the can_manage of this UserPhonesListData.

        Can the authenticated user manage phones of this user?  # noqa: E501

        :param can_manage: The can_manage of this UserPhonesListData.  # noqa: E501
        :type: bool
        """

        self._can_manage = can_manage

    @property
    def can_create_land_line(self):
        """Gets the can_create_land_line of this UserPhonesListData.  # noqa: E501

        Can the authenticated user create new land-line phones for this user?   # noqa: E501

        :return: The can_create_land_line of this UserPhonesListData.  # noqa: E501
        :rtype: bool
        """
        return self._can_create_land_line

    @can_create_land_line.setter
    def can_create_land_line(self, can_create_land_line):
        """Sets the can_create_land_line of this UserPhonesListData.

        Can the authenticated user create new land-line phones for this user?   # noqa: E501

        :param can_create_land_line: The can_create_land_line of this UserPhonesListData.  # noqa: E501
        :type: bool
        """

        self._can_create_land_line = can_create_land_line

    @property
    def can_create_mobile(self):
        """Gets the can_create_mobile of this UserPhonesListData.  # noqa: E501

        Can the authenticated user create new mobile phones for this user?   # noqa: E501

        :return: The can_create_mobile of this UserPhonesListData.  # noqa: E501
        :rtype: bool
        """
        return self._can_create_mobile

    @can_create_mobile.setter
    def can_create_mobile(self, can_create_mobile):
        """Sets the can_create_mobile of this UserPhonesListData.

        Can the authenticated user create new mobile phones for this user?   # noqa: E501

        :param can_create_mobile: The can_create_mobile of this UserPhonesListData.  # noqa: E501
        :type: bool
        """

        self._can_create_mobile = can_create_mobile

    @property
    def sms_enabled(self):
        """Gets the sms_enabled of this UserPhonesListData.  # noqa: E501

        Indicates whether outbound SMS is enabled in Cyclos  # noqa: E501

        :return: The sms_enabled of this UserPhonesListData.  # noqa: E501
        :rtype: bool
        """
        return self._sms_enabled

    @sms_enabled.setter
    def sms_enabled(self, sms_enabled):
        """Sets the sms_enabled of this UserPhonesListData.

        Indicates whether outbound SMS is enabled in Cyclos  # noqa: E501

        :param sms_enabled: The sms_enabled of this UserPhonesListData.  # noqa: E501
        :type: bool
        """

        self._sms_enabled = sms_enabled

    @property
    def can_verify(self):
        """Gets the can_verify of this UserPhonesListData.  # noqa: E501

        Can the authenticated user verify mobile phones of this user?   # noqa: E501

        :return: The can_verify of this UserPhonesListData.  # noqa: E501
        :rtype: bool
        """
        return self._can_verify

    @can_verify.setter
    def can_verify(self, can_verify):
        """Sets the can_verify of this UserPhonesListData.

        Can the authenticated user verify mobile phones of this user?   # noqa: E501

        :param can_verify: The can_verify of this UserPhonesListData.  # noqa: E501
        :type: bool
        """

        self._can_verify = can_verify

    @property
    def can_enable_for_sms(self):
        """Gets the can_enable_for_sms of this UserPhonesListData.  # noqa: E501

        Can the authenticated user enable / disable mobile phones of this user to send / receive SMS?   # noqa: E501

        :return: The can_enable_for_sms of this UserPhonesListData.  # noqa: E501
        :rtype: bool
        """
        return self._can_enable_for_sms

    @can_enable_for_sms.setter
    def can_enable_for_sms(self, can_enable_for_sms):
        """Sets the can_enable_for_sms of this UserPhonesListData.

        Can the authenticated user enable / disable mobile phones of this user to send / receive SMS?   # noqa: E501

        :param can_enable_for_sms: The can_enable_for_sms of this UserPhonesListData.  # noqa: E501
        :type: bool
        """

        self._can_enable_for_sms = can_enable_for_sms

    @property
    def max_mobile_phones(self):
        """Gets the max_mobile_phones of this UserPhonesListData.  # noqa: E501

        Indicates the maximum number of mobile phones this user can have. Is only returned when `canManage` is `true`.   # noqa: E501

        :return: The max_mobile_phones of this UserPhonesListData.  # noqa: E501
        :rtype: int
        """
        return self._max_mobile_phones

    @max_mobile_phones.setter
    def max_mobile_phones(self, max_mobile_phones):
        """Sets the max_mobile_phones of this UserPhonesListData.

        Indicates the maximum number of mobile phones this user can have. Is only returned when `canManage` is `true`.   # noqa: E501

        :param max_mobile_phones: The max_mobile_phones of this UserPhonesListData.  # noqa: E501
        :type: int
        """

        self._max_mobile_phones = max_mobile_phones

    @property
    def max_land_line_phones(self):
        """Gets the max_land_line_phones of this UserPhonesListData.  # noqa: E501

        Indicates the maximum number of land line (fixed) phones this user can have. Is only returned when `canManage` is `true`.   # noqa: E501

        :return: The max_land_line_phones of this UserPhonesListData.  # noqa: E501
        :rtype: int
        """
        return self._max_land_line_phones

    @max_land_line_phones.setter
    def max_land_line_phones(self, max_land_line_phones):
        """Sets the max_land_line_phones of this UserPhonesListData.

        Indicates the maximum number of land line (fixed) phones this user can have. Is only returned when `canManage` is `true`.   # noqa: E501

        :param max_land_line_phones: The max_land_line_phones of this UserPhonesListData.  # noqa: E501
        :type: int
        """

        self._max_land_line_phones = max_land_line_phones

    @property
    def land_line_availability(self):
        """Gets the land_line_availability of this UserPhonesListData.  # noqa: E501

        The availability for land-line phones Possible values are: * disabled: The data is disabled * optional: The data is enabled and optional * required: The data is enabled and required   # noqa: E501

        :return: The land_line_availability of this UserPhonesListData.  # noqa: E501
        :rtype: AvailabilityEnum
        """
        return self._land_line_availability

    @land_line_availability.setter
    def land_line_availability(self, land_line_availability):
        """Sets the land_line_availability of this UserPhonesListData.

        The availability for land-line phones Possible values are: * disabled: The data is disabled * optional: The data is enabled and optional * required: The data is enabled and required   # noqa: E501

        :param land_line_availability: The land_line_availability of this UserPhonesListData.  # noqa: E501
        :type: AvailabilityEnum
        """

        self._land_line_availability = land_line_availability

    @property
    def mobile_availability(self):
        """Gets the mobile_availability of this UserPhonesListData.  # noqa: E501

        The availability for mobile phones Possible values are: * disabled: The data is disabled * optional: The data is enabled and optional * required: The data is enabled and required   # noqa: E501

        :return: The mobile_availability of this UserPhonesListData.  # noqa: E501
        :rtype: AvailabilityEnum
        """
        return self._mobile_availability

    @mobile_availability.setter
    def mobile_availability(self, mobile_availability):
        """Sets the mobile_availability of this UserPhonesListData.

        The availability for mobile phones Possible values are: * disabled: The data is disabled * optional: The data is enabled and optional * required: The data is enabled and required   # noqa: E501

        :param mobile_availability: The mobile_availability of this UserPhonesListData.  # noqa: E501
        :type: AvailabilityEnum
        """

        self._mobile_availability = mobile_availability

    @property
    def phones(self):
        """Gets the phones of this UserPhonesListData.  # noqa: E501

        The list of (visible) phones  # noqa: E501

        :return: The phones of this UserPhonesListData.  # noqa: E501
        :rtype: list[PhoneResult]
        """
        return self._phones

    @phones.setter
    def phones(self, phones):
        """Sets the phones of this UserPhonesListData.

        The list of (visible) phones  # noqa: E501

        :param phones: The phones of this UserPhonesListData.  # noqa: E501
        :type: list[PhoneResult]
        """

        self._phones = phones

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserPhonesListData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserPhonesListData):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UserPhonesListData):
            return True

        return self.to_dict() != other.to_dict()
