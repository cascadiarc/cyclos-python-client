# coding: utf-8

"""
    Cyclos 4.11.5 API

    The REST API for Cyclos 4.11.5  # noqa: E501

    OpenAPI spec version: 4.11.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class ShoppingCartItemDetailed(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'total_price': 'BigDecimal',
        'availability': 'ShoppingCartItemAvailabilityEnum',
        'quantity_adjustment': 'ShoppingCartItemQuantityAdjustmentEnum'
    }

    attribute_map = {
        'total_price': 'totalPrice',
        'availability': 'availability',
        'quantity_adjustment': 'quantityAdjustment'
    }

    def __init__(self, total_price=None, availability=None, quantity_adjustment=None, _configuration=None):  # noqa: E501
        """ShoppingCartItemDetailed - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._total_price = None
        self._availability = None
        self._quantity_adjustment = None
        self.discriminator = None

        if total_price is not None:
            self.total_price = total_price
        if availability is not None:
            self.availability = availability
        if quantity_adjustment is not None:
            self.quantity_adjustment = quantity_adjustment

    @property
    def total_price(self):
        """Gets the total_price of this ShoppingCartItemDetailed.  # noqa: E501

        The total price for this item, i.e the curent price of the product multiplied by its corresponding quantity.    # noqa: E501

        :return: The total_price of this ShoppingCartItemDetailed.  # noqa: E501
        :rtype: BigDecimal
        """
        return self._total_price

    @total_price.setter
    def total_price(self, total_price):
        """Sets the total_price of this ShoppingCartItemDetailed.

        The total price for this item, i.e the curent price of the product multiplied by its corresponding quantity.    # noqa: E501

        :param total_price: The total_price of this ShoppingCartItemDetailed.  # noqa: E501
        :type: BigDecimal
        """

        self._total_price = total_price

    @property
    def availability(self):
        """Gets the availability of this ShoppingCartItemDetailed.  # noqa: E501

        The possible status of a webshop advertisement in relation to its availability  Possible values are: * available: The webshop advertisement is available and can be purchased * outOfStock: The webshop advertisement is now out of stock * unavailable: The webshop advertisement has been made unavailable and cannot be purchased anymore    # noqa: E501

        :return: The availability of this ShoppingCartItemDetailed.  # noqa: E501
        :rtype: ShoppingCartItemAvailabilityEnum
        """
        return self._availability

    @availability.setter
    def availability(self, availability):
        """Sets the availability of this ShoppingCartItemDetailed.

        The possible status of a webshop advertisement in relation to its availability  Possible values are: * available: The webshop advertisement is available and can be purchased * outOfStock: The webshop advertisement is now out of stock * unavailable: The webshop advertisement has been made unavailable and cannot be purchased anymore    # noqa: E501

        :param availability: The availability of this ShoppingCartItemDetailed.  # noqa: E501
        :type: ShoppingCartItemAvailabilityEnum
        """

        self._availability = availability

    @property
    def quantity_adjustment(self):
        """Gets the quantity_adjustment of this ShoppingCartItemDetailed.  # noqa: E501

        The possible adjustments to a quantity-limited product added to shopping cart Possible values are: * max: The quantity was reduced to honor the maximum allowed quantity * min: The quantity was raised to honor the minimum allowed quantity * stock: The quantity was reduced to the maximum available stock quantity   # noqa: E501

        :return: The quantity_adjustment of this ShoppingCartItemDetailed.  # noqa: E501
        :rtype: ShoppingCartItemQuantityAdjustmentEnum
        """
        return self._quantity_adjustment

    @quantity_adjustment.setter
    def quantity_adjustment(self, quantity_adjustment):
        """Sets the quantity_adjustment of this ShoppingCartItemDetailed.

        The possible adjustments to a quantity-limited product added to shopping cart Possible values are: * max: The quantity was reduced to honor the maximum allowed quantity * min: The quantity was raised to honor the minimum allowed quantity * stock: The quantity was reduced to the maximum available stock quantity   # noqa: E501

        :param quantity_adjustment: The quantity_adjustment of this ShoppingCartItemDetailed.  # noqa: E501
        :type: ShoppingCartItemQuantityAdjustmentEnum
        """

        self._quantity_adjustment = quantity_adjustment

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ShoppingCartItemDetailed, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ShoppingCartItemDetailed):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ShoppingCartItemDetailed):
            return True

        return self.to_dict() != other.to_dict()
