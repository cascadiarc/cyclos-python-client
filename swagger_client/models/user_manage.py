# coding: utf-8

"""
    Cyclos 4.11.5 API

    The REST API for Cyclos 4.11.5  # noqa: E501

    OpenAPI spec version: 4.11.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class UserManage(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'username': 'str',
        'email': 'str',
        'custom_values': 'dict(str, str)',
        'hidden_fields': 'list[str]'
    }

    attribute_map = {
        'name': 'name',
        'username': 'username',
        'email': 'email',
        'custom_values': 'customValues',
        'hidden_fields': 'hiddenFields'
    }

    def __init__(self, name=None, username=None, email=None, custom_values=None, hidden_fields=None, _configuration=None):  # noqa: E501
        """UserManage - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._username = None
        self._email = None
        self._custom_values = None
        self._hidden_fields = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if username is not None:
            self.username = username
        if email is not None:
            self.email = email
        if custom_values is not None:
            self.custom_values = custom_values
        if hidden_fields is not None:
            self.hidden_fields = hidden_fields

    @property
    def name(self):
        """Gets the name of this UserManage.  # noqa: E501

        The user's full name  # noqa: E501

        :return: The name of this UserManage.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UserManage.

        The user's full name  # noqa: E501

        :param name: The name of this UserManage.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def username(self):
        """Gets the username of this UserManage.  # noqa: E501

        The user's login name  # noqa: E501

        :return: The username of this UserManage.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this UserManage.

        The user's login name  # noqa: E501

        :param username: The username of this UserManage.  # noqa: E501
        :type: str
        """

        self._username = username

    @property
    def email(self):
        """Gets the email of this UserManage.  # noqa: E501

        The user's e-mail  # noqa: E501

        :return: The email of this UserManage.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this UserManage.

        The user's e-mail  # noqa: E501

        :param email: The email of this UserManage.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def custom_values(self):
        """Gets the custom_values of this UserManage.  # noqa: E501

        Holds the custom field values, keyed by field internal name or id. The format of the value depends on the custom field type. In order to lookup the custom fields, use either the `GET /users/data-for-new` (when creating) or `GET /users/{user}/data-for-edit` (when modifying) a user, and lookup each field by either internal name. Example: `{..., \"customValues\": {\"gender\": \"male\", \"birthDate\": \"1980-10-27\"}}`   # noqa: E501

        :return: The custom_values of this UserManage.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._custom_values

    @custom_values.setter
    def custom_values(self, custom_values):
        """Sets the custom_values of this UserManage.

        Holds the custom field values, keyed by field internal name or id. The format of the value depends on the custom field type. In order to lookup the custom fields, use either the `GET /users/data-for-new` (when creating) or `GET /users/{user}/data-for-edit` (when modifying) a user, and lookup each field by either internal name. Example: `{..., \"customValues\": {\"gender\": \"male\", \"birthDate\": \"1980-10-27\"}}`   # noqa: E501

        :param custom_values: The custom_values of this UserManage.  # noqa: E501
        :type: dict(str, str)
        """

        self._custom_values = custom_values

    @property
    def hidden_fields(self):
        """Gets the hidden_fields of this UserManage.  # noqa: E501

        An array with the internal names of either the basic or custom fields that should be hidden from other users. Currently the only basic profile field that can be hidden is email. Any other will be considered a custom field, and should be the same key as used in the 'customValues' property.   # noqa: E501

        :return: The hidden_fields of this UserManage.  # noqa: E501
        :rtype: list[str]
        """
        return self._hidden_fields

    @hidden_fields.setter
    def hidden_fields(self, hidden_fields):
        """Sets the hidden_fields of this UserManage.

        An array with the internal names of either the basic or custom fields that should be hidden from other users. Currently the only basic profile field that can be hidden is email. Any other will be considered a custom field, and should be the same key as used in the 'customValues' property.   # noqa: E501

        :param hidden_fields: The hidden_fields of this UserManage.  # noqa: E501
        :type: list[str]
        """

        self._hidden_fields = hidden_fields

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserManage, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserManage):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UserManage):
            return True

        return self.to_dict() != other.to_dict()
