# coding: utf-8

"""
    Cyclos 4.11.5 API

    The REST API for Cyclos 4.11.5  # noqa: E501

    OpenAPI spec version: 4.11.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class Permissions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'users': 'UsersPermissions',
        'my_profile': 'UserProfilePermissions',
        'banking': 'BankingPermissions',
        'marketplace': 'MarketplacePermissions',
        'passwords': 'PasswordsPermissions',
        'records': 'RecordsPermissions',
        'operations': 'OperationsPermissions',
        'contacts': 'ContactsPermissions',
        'notifications': 'NotificationsPermissions',
        'tokens': 'TokensPermissions'
    }

    attribute_map = {
        'users': 'users',
        'my_profile': 'myProfile',
        'banking': 'banking',
        'marketplace': 'marketplace',
        'passwords': 'passwords',
        'records': 'records',
        'operations': 'operations',
        'contacts': 'contacts',
        'notifications': 'notifications',
        'tokens': 'tokens'
    }

    def __init__(self, users=None, my_profile=None, banking=None, marketplace=None, passwords=None, records=None, operations=None, contacts=None, notifications=None, tokens=None, _configuration=None):  # noqa: E501
        """Permissions - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._users = None
        self._my_profile = None
        self._banking = None
        self._marketplace = None
        self._passwords = None
        self._records = None
        self._operations = None
        self._contacts = None
        self._notifications = None
        self._tokens = None
        self.discriminator = None

        if users is not None:
            self.users = users
        if my_profile is not None:
            self.my_profile = my_profile
        if banking is not None:
            self.banking = banking
        if marketplace is not None:
            self.marketplace = marketplace
        if passwords is not None:
            self.passwords = passwords
        if records is not None:
            self.records = records
        if operations is not None:
            self.operations = operations
        if contacts is not None:
            self.contacts = contacts
        if notifications is not None:
            self.notifications = notifications
        if tokens is not None:
            self.tokens = tokens

    @property
    def users(self):
        """Gets the users of this Permissions.  # noqa: E501

        Permissions over other users  # noqa: E501

        :return: The users of this Permissions.  # noqa: E501
        :rtype: UsersPermissions
        """
        return self._users

    @users.setter
    def users(self, users):
        """Sets the users of this Permissions.

        Permissions over other users  # noqa: E501

        :param users: The users of this Permissions.  # noqa: E501
        :type: UsersPermissions
        """

        self._users = users

    @property
    def my_profile(self):
        """Gets the my_profile of this Permissions.  # noqa: E501

        Permissions over own profile  # noqa: E501

        :return: The my_profile of this Permissions.  # noqa: E501
        :rtype: UserProfilePermissions
        """
        return self._my_profile

    @my_profile.setter
    def my_profile(self, my_profile):
        """Sets the my_profile of this Permissions.

        Permissions over own profile  # noqa: E501

        :param my_profile: The my_profile of this Permissions.  # noqa: E501
        :type: UserProfilePermissions
        """

        self._my_profile = my_profile

    @property
    def banking(self):
        """Gets the banking of this Permissions.  # noqa: E501

        Permissions over banking / accounts  # noqa: E501

        :return: The banking of this Permissions.  # noqa: E501
        :rtype: BankingPermissions
        """
        return self._banking

    @banking.setter
    def banking(self, banking):
        """Sets the banking of this Permissions.

        Permissions over banking / accounts  # noqa: E501

        :param banking: The banking of this Permissions.  # noqa: E501
        :type: BankingPermissions
        """

        self._banking = banking

    @property
    def marketplace(self):
        """Gets the marketplace of this Permissions.  # noqa: E501

        Permissions for marketplace  # noqa: E501

        :return: The marketplace of this Permissions.  # noqa: E501
        :rtype: MarketplacePermissions
        """
        return self._marketplace

    @marketplace.setter
    def marketplace(self, marketplace):
        """Sets the marketplace of this Permissions.

        Permissions for marketplace  # noqa: E501

        :param marketplace: The marketplace of this Permissions.  # noqa: E501
        :type: MarketplacePermissions
        """

        self._marketplace = marketplace

    @property
    def passwords(self):
        """Gets the passwords of this Permissions.  # noqa: E501

        Permissions over own passwords  # noqa: E501

        :return: The passwords of this Permissions.  # noqa: E501
        :rtype: PasswordsPermissions
        """
        return self._passwords

    @passwords.setter
    def passwords(self, passwords):
        """Sets the passwords of this Permissions.

        Permissions over own passwords  # noqa: E501

        :param passwords: The passwords of this Permissions.  # noqa: E501
        :type: PasswordsPermissions
        """

        self._passwords = passwords

    @property
    def records(self):
        """Gets the records of this Permissions.  # noqa: E501

        Permissions over own records  # noqa: E501

        :return: The records of this Permissions.  # noqa: E501
        :rtype: RecordsPermissions
        """
        return self._records

    @records.setter
    def records(self, records):
        """Sets the records of this Permissions.

        Permissions over own records  # noqa: E501

        :param records: The records of this Permissions.  # noqa: E501
        :type: RecordsPermissions
        """

        self._records = records

    @property
    def operations(self):
        """Gets the operations of this Permissions.  # noqa: E501

        Permissions over own custom operations  # noqa: E501

        :return: The operations of this Permissions.  # noqa: E501
        :rtype: OperationsPermissions
        """
        return self._operations

    @operations.setter
    def operations(self, operations):
        """Sets the operations of this Permissions.

        Permissions over own custom operations  # noqa: E501

        :param operations: The operations of this Permissions.  # noqa: E501
        :type: OperationsPermissions
        """

        self._operations = operations

    @property
    def contacts(self):
        """Gets the contacts of this Permissions.  # noqa: E501

        Permissions over contacts  # noqa: E501

        :return: The contacts of this Permissions.  # noqa: E501
        :rtype: ContactsPermissions
        """
        return self._contacts

    @contacts.setter
    def contacts(self, contacts):
        """Sets the contacts of this Permissions.

        Permissions over contacts  # noqa: E501

        :param contacts: The contacts of this Permissions.  # noqa: E501
        :type: ContactsPermissions
        """

        self._contacts = contacts

    @property
    def notifications(self):
        """Gets the notifications of this Permissions.  # noqa: E501

        Permissions over notifications  # noqa: E501

        :return: The notifications of this Permissions.  # noqa: E501
        :rtype: NotificationsPermissions
        """
        return self._notifications

    @notifications.setter
    def notifications(self, notifications):
        """Sets the notifications of this Permissions.

        Permissions over notifications  # noqa: E501

        :param notifications: The notifications of this Permissions.  # noqa: E501
        :type: NotificationsPermissions
        """

        self._notifications = notifications

    @property
    def tokens(self):
        """Gets the tokens of this Permissions.  # noqa: E501

        Permissions over tokens  # noqa: E501

        :return: The tokens of this Permissions.  # noqa: E501
        :rtype: TokensPermissions
        """
        return self._tokens

    @tokens.setter
    def tokens(self, tokens):
        """Sets the tokens of this Permissions.

        Permissions over tokens  # noqa: E501

        :param tokens: The tokens of this Permissions.  # noqa: E501
        :type: TokensPermissions
        """

        self._tokens = tokens

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Permissions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Permissions):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Permissions):
            return True

        return self.to_dict() != other.to_dict()
