# coding: utf-8

"""
    Cyclos 4.11.5 API

    The REST API for Cyclos 4.11.5  # noqa: E501

    OpenAPI spec version: 4.11.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class UserDataForSearch(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'fields_in_list': 'list[str]',
        'statuses': 'list[UserStatusEnum]',
        'groups_for_registration': 'list[Group]',
        'query': 'UserQueryFilters'
    }

    attribute_map = {
        'fields_in_list': 'fieldsInList',
        'statuses': 'statuses',
        'groups_for_registration': 'groupsForRegistration',
        'query': 'query'
    }

    def __init__(self, fields_in_list=None, statuses=None, groups_for_registration=None, query=None, _configuration=None):  # noqa: E501
        """UserDataForSearch - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._fields_in_list = None
        self._statuses = None
        self._groups_for_registration = None
        self._query = None
        self.discriminator = None

        if fields_in_list is not None:
            self.fields_in_list = fields_in_list
        if statuses is not None:
            self.statuses = statuses
        if groups_for_registration is not None:
            self.groups_for_registration = groups_for_registration
        if query is not None:
            self.query = query

    @property
    def fields_in_list(self):
        """Gets the fields_in_list of this UserDataForSearch.  # noqa: E501

        The internal names of either basic or custom profile fields that are configured to be shown on the list. This actually defines the fields that will be loaded on the result. It is possible that no fields are configured to be returned on list. In this case, the result objects will have the 'display' property loaded with what is configured to be the user formatting field(s).    # noqa: E501

        :return: The fields_in_list of this UserDataForSearch.  # noqa: E501
        :rtype: list[str]
        """
        return self._fields_in_list

    @fields_in_list.setter
    def fields_in_list(self, fields_in_list):
        """Sets the fields_in_list of this UserDataForSearch.

        The internal names of either basic or custom profile fields that are configured to be shown on the list. This actually defines the fields that will be loaded on the result. It is possible that no fields are configured to be returned on list. In this case, the result objects will have the 'display' property loaded with what is configured to be the user formatting field(s).    # noqa: E501

        :param fields_in_list: The fields_in_list of this UserDataForSearch.  # noqa: E501
        :type: list[str]
        """

        self._fields_in_list = fields_in_list

    @property
    def statuses(self):
        """Gets the statuses of this UserDataForSearch.  # noqa: E501

        The possible user statuses the authenticated user can use to filter the search. Only administrators or brokers over their members can filter by status (also depends on permissions) Possibles values for each array element are: * active: The user is active and can use the system normally. * blocked: The user has been blocked from accessing the system. Other users still see him/her. * disabled: The user has been disabled - he/she cannot access the system and is invisible by other users. * pending: The user registration is pending a confirmation. Probably the user has received an e-mail with a link that must be followed to complete the activation. The user is invisible by other users. * purged: The user was permanently removed and had all his private data removed. Only transactions are kept for historical reasons. * removed: The user was permanently removed. It's profile is kept for historical purposes.   # noqa: E501

        :return: The statuses of this UserDataForSearch.  # noqa: E501
        :rtype: list[UserStatusEnum]
        """
        return self._statuses

    @statuses.setter
    def statuses(self, statuses):
        """Sets the statuses of this UserDataForSearch.

        The possible user statuses the authenticated user can use to filter the search. Only administrators or brokers over their members can filter by status (also depends on permissions) Possibles values for each array element are: * active: The user is active and can use the system normally. * blocked: The user has been blocked from accessing the system. Other users still see him/her. * disabled: The user has been disabled - he/she cannot access the system and is invisible by other users. * pending: The user registration is pending a confirmation. Probably the user has received an e-mail with a link that must be followed to complete the activation. The user is invisible by other users. * purged: The user was permanently removed and had all his private data removed. Only transactions are kept for historical reasons. * removed: The user was permanently removed. It's profile is kept for historical purposes.   # noqa: E501

        :param statuses: The statuses of this UserDataForSearch.  # noqa: E501
        :type: list[UserStatusEnum]
        """

        self._statuses = statuses

    @property
    def groups_for_registration(self):
        """Gets the groups_for_registration of this UserDataForSearch.  # noqa: E501

        Possible groups an administrator or broker can use to register users   # noqa: E501

        :return: The groups_for_registration of this UserDataForSearch.  # noqa: E501
        :rtype: list[Group]
        """
        return self._groups_for_registration

    @groups_for_registration.setter
    def groups_for_registration(self, groups_for_registration):
        """Sets the groups_for_registration of this UserDataForSearch.

        Possible groups an administrator or broker can use to register users   # noqa: E501

        :param groups_for_registration: The groups_for_registration of this UserDataForSearch.  # noqa: E501
        :type: list[Group]
        """

        self._groups_for_registration = groups_for_registration

    @property
    def query(self):
        """Gets the query of this UserDataForSearch.  # noqa: E501

        Default query filters to search users   # noqa: E501

        :return: The query of this UserDataForSearch.  # noqa: E501
        :rtype: UserQueryFilters
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this UserDataForSearch.

        Default query filters to search users   # noqa: E501

        :param query: The query of this UserDataForSearch.  # noqa: E501
        :type: UserQueryFilters
        """

        self._query = query

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserDataForSearch, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserDataForSearch):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UserDataForSearch):
            return True

        return self.to_dict() != other.to_dict()
