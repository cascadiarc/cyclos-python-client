# coding: utf-8

"""
    Cyclos 4.11.5 API

    The REST API for Cyclos 4.11.5  # noqa: E501

    OpenAPI spec version: 4.11.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class RecordView(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'RecordTypeDetailed',
        'user': 'User',
        'creation_date': 'datetime',
        'created_by': 'User',
        'last_modification_date': 'datetime',
        'last_modified_by': 'User',
        'custom_values': 'list[RecordCustomFieldValue]',
        'edit': 'bool',
        'remove': 'bool',
        'operations': 'list[Operation]'
    }

    attribute_map = {
        'type': 'type',
        'user': 'user',
        'creation_date': 'creationDate',
        'created_by': 'createdBy',
        'last_modification_date': 'lastModificationDate',
        'last_modified_by': 'lastModifiedBy',
        'custom_values': 'customValues',
        'edit': 'edit',
        'remove': 'remove',
        'operations': 'operations'
    }

    def __init__(self, type=None, user=None, creation_date=None, created_by=None, last_modification_date=None, last_modified_by=None, custom_values=None, edit=None, remove=None, operations=None, _configuration=None):  # noqa: E501
        """RecordView - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._type = None
        self._user = None
        self._creation_date = None
        self._created_by = None
        self._last_modification_date = None
        self._last_modified_by = None
        self._custom_values = None
        self._edit = None
        self._remove = None
        self._operations = None
        self.discriminator = None

        if type is not None:
            self.type = type
        if user is not None:
            self.user = user
        if creation_date is not None:
            self.creation_date = creation_date
        if created_by is not None:
            self.created_by = created_by
        if last_modification_date is not None:
            self.last_modification_date = last_modification_date
        if last_modified_by is not None:
            self.last_modified_by = last_modified_by
        if custom_values is not None:
            self.custom_values = custom_values
        if edit is not None:
            self.edit = edit
        if remove is not None:
            self.remove = remove
        if operations is not None:
            self.operations = operations

    @property
    def type(self):
        """Gets the type of this RecordView.  # noqa: E501

        The record type  # noqa: E501

        :return: The type of this RecordView.  # noqa: E501
        :rtype: RecordTypeDetailed
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this RecordView.

        The record type  # noqa: E501

        :param type: The type of this RecordView.  # noqa: E501
        :type: RecordTypeDetailed
        """

        self._type = type

    @property
    def user(self):
        """Gets the user of this RecordView.  # noqa: E501

        The user which owns this record, only returned if `kind` is `user`   # noqa: E501

        :return: The user of this RecordView.  # noqa: E501
        :rtype: User
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this RecordView.

        The user which owns this record, only returned if `kind` is `user`   # noqa: E501

        :param user: The user of this RecordView.  # noqa: E501
        :type: User
        """

        self._user = user

    @property
    def creation_date(self):
        """Gets the creation_date of this RecordView.  # noqa: E501

        The record creation date  # noqa: E501

        :return: The creation_date of this RecordView.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this RecordView.

        The record creation date  # noqa: E501

        :param creation_date: The creation_date of this RecordView.  # noqa: E501
        :type: datetime
        """

        self._creation_date = creation_date

    @property
    def created_by(self):
        """Gets the created_by of this RecordView.  # noqa: E501

        Reference to the user that created the record  # noqa: E501

        :return: The created_by of this RecordView.  # noqa: E501
        :rtype: User
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this RecordView.

        Reference to the user that created the record  # noqa: E501

        :param created_by: The created_by of this RecordView.  # noqa: E501
        :type: User
        """

        self._created_by = created_by

    @property
    def last_modification_date(self):
        """Gets the last_modification_date of this RecordView.  # noqa: E501

        The record last modification date  # noqa: E501

        :return: The last_modification_date of this RecordView.  # noqa: E501
        :rtype: datetime
        """
        return self._last_modification_date

    @last_modification_date.setter
    def last_modification_date(self, last_modification_date):
        """Sets the last_modification_date of this RecordView.

        The record last modification date  # noqa: E501

        :param last_modification_date: The last_modification_date of this RecordView.  # noqa: E501
        :type: datetime
        """

        self._last_modification_date = last_modification_date

    @property
    def last_modified_by(self):
        """Gets the last_modified_by of this RecordView.  # noqa: E501

        Reference to the user that last modified the record  # noqa: E501

        :return: The last_modified_by of this RecordView.  # noqa: E501
        :rtype: User
        """
        return self._last_modified_by

    @last_modified_by.setter
    def last_modified_by(self, last_modified_by):
        """Sets the last_modified_by of this RecordView.

        Reference to the user that last modified the record  # noqa: E501

        :param last_modified_by: The last_modified_by of this RecordView.  # noqa: E501
        :type: User
        """

        self._last_modified_by = last_modified_by

    @property
    def custom_values(self):
        """Gets the custom_values of this RecordView.  # noqa: E501

        The list of custom field values this record has  # noqa: E501

        :return: The custom_values of this RecordView.  # noqa: E501
        :rtype: list[RecordCustomFieldValue]
        """
        return self._custom_values

    @custom_values.setter
    def custom_values(self, custom_values):
        """Sets the custom_values of this RecordView.

        The list of custom field values this record has  # noqa: E501

        :param custom_values: The custom_values of this RecordView.  # noqa: E501
        :type: list[RecordCustomFieldValue]
        """

        self._custom_values = custom_values

    @property
    def edit(self):
        """Gets the edit of this RecordView.  # noqa: E501

        Can the authenticated user edit this record?  # noqa: E501

        :return: The edit of this RecordView.  # noqa: E501
        :rtype: bool
        """
        return self._edit

    @edit.setter
    def edit(self, edit):
        """Sets the edit of this RecordView.

        Can the authenticated user edit this record?  # noqa: E501

        :param edit: The edit of this RecordView.  # noqa: E501
        :type: bool
        """

        self._edit = edit

    @property
    def remove(self):
        """Gets the remove of this RecordView.  # noqa: E501

        Can the authenticated user remove this record?  # noqa: E501

        :return: The remove of this RecordView.  # noqa: E501
        :rtype: bool
        """
        return self._remove

    @remove.setter
    def remove(self, remove):
        """Sets the remove of this RecordView.

        Can the authenticated user remove this record?  # noqa: E501

        :param remove: The remove of this RecordView.  # noqa: E501
        :type: bool
        """

        self._remove = remove

    @property
    def operations(self):
        """Gets the operations of this RecordView.  # noqa: E501

        List of runnable custom operations.  # noqa: E501

        :return: The operations of this RecordView.  # noqa: E501
        :rtype: list[Operation]
        """
        return self._operations

    @operations.setter
    def operations(self, operations):
        """Sets the operations of this RecordView.

        List of runnable custom operations.  # noqa: E501

        :param operations: The operations of this RecordView.  # noqa: E501
        :type: list[Operation]
        """

        self._operations = operations

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RecordView, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RecordView):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RecordView):
            return True

        return self.to_dict() != other.to_dict()
