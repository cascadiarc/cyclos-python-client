# coding: utf-8

"""
    Cyclos 4.11.5 API

    The REST API for Cyclos 4.11.5  # noqa: E501

    OpenAPI spec version: 4.11.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class MapData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'google_maps_api_key': 'str',
        'default_location': 'GeographicalCoordinate',
        'default_zoom_mobile': 'int',
        'default_zoom': 'int',
        'distance_unit': 'DistanceUnitEnum'
    }

    attribute_map = {
        'google_maps_api_key': 'googleMapsApiKey',
        'default_location': 'defaultLocation',
        'default_zoom_mobile': 'defaultZoomMobile',
        'default_zoom': 'defaultZoom',
        'distance_unit': 'distanceUnit'
    }

    def __init__(self, google_maps_api_key=None, default_location=None, default_zoom_mobile=None, default_zoom=None, distance_unit=None, _configuration=None):  # noqa: E501
        """MapData - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._google_maps_api_key = None
        self._default_location = None
        self._default_zoom_mobile = None
        self._default_zoom = None
        self._distance_unit = None
        self.discriminator = None

        if google_maps_api_key is not None:
            self.google_maps_api_key = google_maps_api_key
        if default_location is not None:
            self.default_location = default_location
        if default_zoom_mobile is not None:
            self.default_zoom_mobile = default_zoom_mobile
        if default_zoom is not None:
            self.default_zoom = default_zoom
        if distance_unit is not None:
            self.distance_unit = distance_unit

    @property
    def google_maps_api_key(self):
        """Gets the google_maps_api_key of this MapData.  # noqa: E501

        The Google Maps API key to be used by clients       # noqa: E501

        :return: The google_maps_api_key of this MapData.  # noqa: E501
        :rtype: str
        """
        return self._google_maps_api_key

    @google_maps_api_key.setter
    def google_maps_api_key(self, google_maps_api_key):
        """Sets the google_maps_api_key of this MapData.

        The Google Maps API key to be used by clients       # noqa: E501

        :param google_maps_api_key: The google_maps_api_key of this MapData.  # noqa: E501
        :type: str
        """

        self._google_maps_api_key = google_maps_api_key

    @property
    def default_location(self):
        """Gets the default_location of this MapData.  # noqa: E501

        The default location, if any, for map displays       # noqa: E501

        :return: The default_location of this MapData.  # noqa: E501
        :rtype: GeographicalCoordinate
        """
        return self._default_location

    @default_location.setter
    def default_location(self, default_location):
        """Sets the default_location of this MapData.

        The default location, if any, for map displays       # noqa: E501

        :param default_location: The default_location of this MapData.  # noqa: E501
        :type: GeographicalCoordinate
        """

        self._default_location = default_location

    @property
    def default_zoom_mobile(self):
        """Gets the default_zoom_mobile of this MapData.  # noqa: E501

        The default zoom level for mobile views       # noqa: E501

        :return: The default_zoom_mobile of this MapData.  # noqa: E501
        :rtype: int
        """
        return self._default_zoom_mobile

    @default_zoom_mobile.setter
    def default_zoom_mobile(self, default_zoom_mobile):
        """Sets the default_zoom_mobile of this MapData.

        The default zoom level for mobile views       # noqa: E501

        :param default_zoom_mobile: The default_zoom_mobile of this MapData.  # noqa: E501
        :type: int
        """

        self._default_zoom_mobile = default_zoom_mobile

    @property
    def default_zoom(self):
        """Gets the default_zoom of this MapData.  # noqa: E501

        The default zoom level for larger views       # noqa: E501

        :return: The default_zoom of this MapData.  # noqa: E501
        :rtype: int
        """
        return self._default_zoom

    @default_zoom.setter
    def default_zoom(self, default_zoom):
        """Sets the default_zoom of this MapData.

        The default zoom level for larger views       # noqa: E501

        :param default_zoom: The default_zoom of this MapData.  # noqa: E501
        :type: int
        """

        self._default_zoom = default_zoom

    @property
    def distance_unit(self):
        """Gets the distance_unit of this MapData.  # noqa: E501

        Determines the unit used to measure distances   # noqa: E501

        :return: The distance_unit of this MapData.  # noqa: E501
        :rtype: DistanceUnitEnum
        """
        return self._distance_unit

    @distance_unit.setter
    def distance_unit(self, distance_unit):
        """Sets the distance_unit of this MapData.

        Determines the unit used to measure distances   # noqa: E501

        :param distance_unit: The distance_unit of this MapData.  # noqa: E501
        :type: DistanceUnitEnum
        """

        self._distance_unit = distance_unit

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MapData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MapData):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MapData):
            return True

        return self.to_dict() != other.to_dict()
