# coding: utf-8

"""
    Cyclos 4.11.5 API

    The REST API for Cyclos 4.11.5  # noqa: E501

    OpenAPI spec version: 4.11.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class RunOperation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'form_parameters': 'dict(str, str)',
        'confirmation_password': 'str',
        'page': 'int',
        'page_size': 'int',
        'page_context': 'OperationPageContextEnum'
    }

    attribute_map = {
        'form_parameters': 'formParameters',
        'confirmation_password': 'confirmationPassword',
        'page': 'page',
        'page_size': 'pageSize',
        'page_context': 'pageContext'
    }

    def __init__(self, form_parameters=None, confirmation_password=None, page=None, page_size=None, page_context=None, _configuration=None):  # noqa: E501
        """RunOperation - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._form_parameters = None
        self._confirmation_password = None
        self._page = None
        self._page_size = None
        self._page_context = None
        self.discriminator = None

        if form_parameters is not None:
            self.form_parameters = form_parameters
        if confirmation_password is not None:
            self.confirmation_password = confirmation_password
        if page is not None:
            self.page = page
        if page_size is not None:
            self.page_size = page_size
        if page_context is not None:
            self.page_context = page_context

    @property
    def form_parameters(self):
        """Gets the form_parameters of this RunOperation.  # noqa: E501

        Holds the form field values, keyed by field internal name or id. The format of the value depends on the custom field type.   # noqa: E501

        :return: The form_parameters of this RunOperation.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._form_parameters

    @form_parameters.setter
    def form_parameters(self, form_parameters):
        """Sets the form_parameters of this RunOperation.

        Holds the form field values, keyed by field internal name or id. The format of the value depends on the custom field type.   # noqa: E501

        :param form_parameters: The form_parameters of this RunOperation.  # noqa: E501
        :type: dict(str, str)
        """

        self._form_parameters = form_parameters

    @property
    def confirmation_password(self):
        """Gets the confirmation_password of this RunOperation.  # noqa: E501

        If the custom operation requires confirmation password, the `OperationDataForRun.confirmationPasswordInput` will contain the data for inputting the confirmation password. When such value is present, the password value should be provided in this property.   # noqa: E501

        :return: The confirmation_password of this RunOperation.  # noqa: E501
        :rtype: str
        """
        return self._confirmation_password

    @confirmation_password.setter
    def confirmation_password(self, confirmation_password):
        """Sets the confirmation_password of this RunOperation.

        If the custom operation requires confirmation password, the `OperationDataForRun.confirmationPasswordInput` will contain the data for inputting the confirmation password. When such value is present, the password value should be provided in this property.   # noqa: E501

        :param confirmation_password: The confirmation_password of this RunOperation.  # noqa: E501
        :type: str
        """

        self._confirmation_password = confirmation_password

    @property
    def page(self):
        """Gets the page of this RunOperation.  # noqa: E501

        When running a custom operation with `resultType` = `resultPage`, determines the current page offset. Whether this is implemented depends on the script code itself.   # noqa: E501

        :return: The page of this RunOperation.  # noqa: E501
        :rtype: int
        """
        return self._page

    @page.setter
    def page(self, page):
        """Sets the page of this RunOperation.

        When running a custom operation with `resultType` = `resultPage`, determines the current page offset. Whether this is implemented depends on the script code itself.   # noqa: E501

        :param page: The page of this RunOperation.  # noqa: E501
        :type: int
        """

        self._page = page

    @property
    def page_size(self):
        """Gets the page_size of this RunOperation.  # noqa: E501

        When running a custom operation with `resultType` = `resultPage`, determines the number of results per page. Whether this is implemented depends on the script code itself.   # noqa: E501

        :return: The page_size of this RunOperation.  # noqa: E501
        :rtype: int
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """Sets the page_size of this RunOperation.

        When running a custom operation with `resultType` = `resultPage`, determines the number of results per page. Whether this is implemented depends on the script code itself.   # noqa: E501

        :param page_size: The page_size of this RunOperation.  # noqa: E501
        :type: int
        """

        self._page_size = page_size

    @property
    def page_context(self):
        """Gets the page_context of this RunOperation.  # noqa: E501

        Only when running a custom operation with `resultType` = `resultPage`. Possible values are: * csv: Export results as Comma-Separated-Values (CSV) * page: Normal search, returning the data as rows in the result * pdf: Export results as printable PDF   # noqa: E501

        :return: The page_context of this RunOperation.  # noqa: E501
        :rtype: OperationPageContextEnum
        """
        return self._page_context

    @page_context.setter
    def page_context(self, page_context):
        """Sets the page_context of this RunOperation.

        Only when running a custom operation with `resultType` = `resultPage`. Possible values are: * csv: Export results as Comma-Separated-Values (CSV) * page: Normal search, returning the data as rows in the result * pdf: Export results as printable PDF   # noqa: E501

        :param page_context: The page_context of this RunOperation.  # noqa: E501
        :type: OperationPageContextEnum
        """

        self._page_context = page_context

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RunOperation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RunOperation):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RunOperation):
            return True

        return self.to_dict() != other.to_dict()
