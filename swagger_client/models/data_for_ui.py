# coding: utf-8

"""
    Cyclos 4.11.5 API

    The REST API for Cyclos 4.11.5  # noqa: E501

    OpenAPI spec version: 4.11.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class DataForUi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cyclos_version': 'str',
        'current_client_time': 'datetime',
        'auth': 'Auth',
        'data_for_login': 'DataForLogin',
        'public_registration_groups': 'list[GroupForRegistration]',
        'map_data': 'MapData',
        'decimal_separator': 'str',
        'grouping_separator': 'str',
        'date_format': 'str',
        'time_format': 'str',
        'time_zone_id': 'str',
        'distance_unit': 'DistanceUnitEnum',
        'root_url': 'str',
        'country': 'str',
        'max_image_width': 'int',
        'max_image_height': 'int',
        'max_upload_size': 'int',
        'jpeg_quality': 'int',
        'language': 'Language',
        'resource_cache_key': 'str',
        'theme': 'ThemeUIElement',
        'header': 'UIElementWithContent',
        'footer': 'UIElementWithContent'
    }

    attribute_map = {
        'cyclos_version': 'cyclosVersion',
        'current_client_time': 'currentClientTime',
        'auth': 'auth',
        'data_for_login': 'dataForLogin',
        'public_registration_groups': 'publicRegistrationGroups',
        'map_data': 'mapData',
        'decimal_separator': 'decimalSeparator',
        'grouping_separator': 'groupingSeparator',
        'date_format': 'dateFormat',
        'time_format': 'timeFormat',
        'time_zone_id': 'timeZoneId',
        'distance_unit': 'distanceUnit',
        'root_url': 'rootUrl',
        'country': 'country',
        'max_image_width': 'maxImageWidth',
        'max_image_height': 'maxImageHeight',
        'max_upload_size': 'maxUploadSize',
        'jpeg_quality': 'jpegQuality',
        'language': 'language',
        'resource_cache_key': 'resourceCacheKey',
        'theme': 'theme',
        'header': 'header',
        'footer': 'footer'
    }

    def __init__(self, cyclos_version=None, current_client_time=None, auth=None, data_for_login=None, public_registration_groups=None, map_data=None, decimal_separator=None, grouping_separator=None, date_format=None, time_format=None, time_zone_id=None, distance_unit=None, root_url=None, country=None, max_image_width=None, max_image_height=None, max_upload_size=None, jpeg_quality=None, language=None, resource_cache_key=None, theme=None, header=None, footer=None, _configuration=None):  # noqa: E501
        """DataForUi - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._cyclos_version = None
        self._current_client_time = None
        self._auth = None
        self._data_for_login = None
        self._public_registration_groups = None
        self._map_data = None
        self._decimal_separator = None
        self._grouping_separator = None
        self._date_format = None
        self._time_format = None
        self._time_zone_id = None
        self._distance_unit = None
        self._root_url = None
        self._country = None
        self._max_image_width = None
        self._max_image_height = None
        self._max_upload_size = None
        self._jpeg_quality = None
        self._language = None
        self._resource_cache_key = None
        self._theme = None
        self._header = None
        self._footer = None
        self.discriminator = None

        if cyclos_version is not None:
            self.cyclos_version = cyclos_version
        if current_client_time is not None:
            self.current_client_time = current_client_time
        if auth is not None:
            self.auth = auth
        if data_for_login is not None:
            self.data_for_login = data_for_login
        if public_registration_groups is not None:
            self.public_registration_groups = public_registration_groups
        if map_data is not None:
            self.map_data = map_data
        if decimal_separator is not None:
            self.decimal_separator = decimal_separator
        if grouping_separator is not None:
            self.grouping_separator = grouping_separator
        if date_format is not None:
            self.date_format = date_format
        if time_format is not None:
            self.time_format = time_format
        if time_zone_id is not None:
            self.time_zone_id = time_zone_id
        if distance_unit is not None:
            self.distance_unit = distance_unit
        if root_url is not None:
            self.root_url = root_url
        if country is not None:
            self.country = country
        if max_image_width is not None:
            self.max_image_width = max_image_width
        if max_image_height is not None:
            self.max_image_height = max_image_height
        if max_upload_size is not None:
            self.max_upload_size = max_upload_size
        if jpeg_quality is not None:
            self.jpeg_quality = jpeg_quality
        if language is not None:
            self.language = language
        if resource_cache_key is not None:
            self.resource_cache_key = resource_cache_key
        if theme is not None:
            self.theme = theme
        if header is not None:
            self.header = header
        if footer is not None:
            self.footer = footer

    @property
    def cyclos_version(self):
        """Gets the cyclos_version of this DataForUi.  # noqa: E501

        The version of the Cyclos server. It will of the form x.y[.z]       # noqa: E501

        :return: The cyclos_version of this DataForUi.  # noqa: E501
        :rtype: str
        """
        return self._cyclos_version

    @cyclos_version.setter
    def cyclos_version(self, cyclos_version):
        """Sets the cyclos_version of this DataForUi.

        The version of the Cyclos server. It will of the form x.y[.z]       # noqa: E501

        :param cyclos_version: The cyclos_version of this DataForUi.  # noqa: E501
        :type: str
        """

        self._cyclos_version = cyclos_version

    @property
    def current_client_time(self):
        """Gets the current_client_time of this DataForUi.  # noqa: E501

        The current time in the the user's time zone.   # noqa: E501

        :return: The current_client_time of this DataForUi.  # noqa: E501
        :rtype: datetime
        """
        return self._current_client_time

    @current_client_time.setter
    def current_client_time(self, current_client_time):
        """Sets the current_client_time of this DataForUi.

        The current time in the the user's time zone.   # noqa: E501

        :param current_client_time: The current_client_time of this DataForUi.  # noqa: E501
        :type: datetime
        """

        self._current_client_time = current_client_time

    @property
    def auth(self):
        """Gets the auth of this DataForUi.  # noqa: E501

        The logged user authentication. Not returned for guests.  # noqa: E501

        :return: The auth of this DataForUi.  # noqa: E501
        :rtype: Auth
        """
        return self._auth

    @auth.setter
    def auth(self, auth):
        """Sets the auth of this DataForUi.

        The logged user authentication. Not returned for guests.  # noqa: E501

        :param auth: The auth of this DataForUi.  # noqa: E501
        :type: Auth
        """

        self._auth = auth

    @property
    def data_for_login(self):
        """Gets the data_for_login of this DataForUi.  # noqa: E501

        The data used for logging the user in. Not returned for logged users.   # noqa: E501

        :return: The data_for_login of this DataForUi.  # noqa: E501
        :rtype: DataForLogin
        """
        return self._data_for_login

    @data_for_login.setter
    def data_for_login(self, data_for_login):
        """Sets the data_for_login of this DataForUi.

        The data used for logging the user in. Not returned for logged users.   # noqa: E501

        :param data_for_login: The data_for_login of this DataForUi.  # noqa: E501
        :type: DataForLogin
        """

        self._data_for_login = data_for_login

    @property
    def public_registration_groups(self):
        """Gets the public_registration_groups of this DataForUi.  # noqa: E501

        Groups that can be used for a public registration. Not returned for logged users.   # noqa: E501

        :return: The public_registration_groups of this DataForUi.  # noqa: E501
        :rtype: list[GroupForRegistration]
        """
        return self._public_registration_groups

    @public_registration_groups.setter
    def public_registration_groups(self, public_registration_groups):
        """Sets the public_registration_groups of this DataForUi.

        Groups that can be used for a public registration. Not returned for logged users.   # noqa: E501

        :param public_registration_groups: The public_registration_groups of this DataForUi.  # noqa: E501
        :type: list[GroupForRegistration]
        """

        self._public_registration_groups = public_registration_groups

    @property
    def map_data(self):
        """Gets the map_data of this DataForUi.  # noqa: E501

        Configuration data for map usage. Is null when maps are not used.    # noqa: E501

        :return: The map_data of this DataForUi.  # noqa: E501
        :rtype: MapData
        """
        return self._map_data

    @map_data.setter
    def map_data(self, map_data):
        """Sets the map_data of this DataForUi.

        Configuration data for map usage. Is null when maps are not used.    # noqa: E501

        :param map_data: The map_data of this DataForUi.  # noqa: E501
        :type: MapData
        """

        self._map_data = map_data

    @property
    def decimal_separator(self):
        """Gets the decimal_separator of this DataForUi.  # noqa: E501

        The character used to specify the decimal point      # noqa: E501

        :return: The decimal_separator of this DataForUi.  # noqa: E501
        :rtype: str
        """
        return self._decimal_separator

    @decimal_separator.setter
    def decimal_separator(self, decimal_separator):
        """Sets the decimal_separator of this DataForUi.

        The character used to specify the decimal point      # noqa: E501

        :param decimal_separator: The decimal_separator of this DataForUi.  # noqa: E501
        :type: str
        """

        self._decimal_separator = decimal_separator

    @property
    def grouping_separator(self):
        """Gets the grouping_separator of this DataForUi.  # noqa: E501

        The character used to separate thousands.       # noqa: E501

        :return: The grouping_separator of this DataForUi.  # noqa: E501
        :rtype: str
        """
        return self._grouping_separator

    @grouping_separator.setter
    def grouping_separator(self, grouping_separator):
        """Sets the grouping_separator of this DataForUi.

        The character used to separate thousands.       # noqa: E501

        :param grouping_separator: The grouping_separator of this DataForUi.  # noqa: E501
        :type: str
        """

        self._grouping_separator = grouping_separator

    @property
    def date_format(self):
        """Gets the date_format of this DataForUi.  # noqa: E501

        The pattern string used to format dates.  The following are the letters used in each supported pattern:  * dd: The day of the month;  * MM: The month ranging from 1 to 12;  * yyyy: The full year number.     # noqa: E501

        :return: The date_format of this DataForUi.  # noqa: E501
        :rtype: str
        """
        return self._date_format

    @date_format.setter
    def date_format(self, date_format):
        """Sets the date_format of this DataForUi.

        The pattern string used to format dates.  The following are the letters used in each supported pattern:  * dd: The day of the month;  * MM: The month ranging from 1 to 12;  * yyyy: The full year number.     # noqa: E501

        :param date_format: The date_format of this DataForUi.  # noqa: E501
        :type: str
        """

        self._date_format = date_format

    @property
    def time_format(self):
        """Gets the time_format of this DataForUi.  # noqa: E501

        The pattern string used to format time.  The following are the letters used in each supported pattern:  * hh: The hour of the morning or afternoon (12-hour clock);  * HH: The hour of the day (24-hour clock);  * mm: The minute within the hour;  * a: Marker to idicate whether the hour (hh) is before or after noon.    # noqa: E501

        :return: The time_format of this DataForUi.  # noqa: E501
        :rtype: str
        """
        return self._time_format

    @time_format.setter
    def time_format(self, time_format):
        """Sets the time_format of this DataForUi.

        The pattern string used to format time.  The following are the letters used in each supported pattern:  * hh: The hour of the morning or afternoon (12-hour clock);  * HH: The hour of the day (24-hour clock);  * mm: The minute within the hour;  * a: Marker to idicate whether the hour (hh) is before or after noon.    # noqa: E501

        :param time_format: The time_format of this DataForUi.  # noqa: E501
        :type: str
        """

        self._time_format = time_format

    @property
    def time_zone_id(self):
        """Gets the time_zone_id of this DataForUi.  # noqa: E501

        The time zone ID set in the configuration (e.g `Europe/Amsterdam`)  # noqa: E501

        :return: The time_zone_id of this DataForUi.  # noqa: E501
        :rtype: str
        """
        return self._time_zone_id

    @time_zone_id.setter
    def time_zone_id(self, time_zone_id):
        """Sets the time_zone_id of this DataForUi.

        The time zone ID set in the configuration (e.g `Europe/Amsterdam`)  # noqa: E501

        :param time_zone_id: The time_zone_id of this DataForUi.  # noqa: E501
        :type: str
        """

        self._time_zone_id = time_zone_id

    @property
    def distance_unit(self):
        """Gets the distance_unit of this DataForUi.  # noqa: E501

        The unit used to measure distances  # noqa: E501

        :return: The distance_unit of this DataForUi.  # noqa: E501
        :rtype: DistanceUnitEnum
        """
        return self._distance_unit

    @distance_unit.setter
    def distance_unit(self, distance_unit):
        """Sets the distance_unit of this DataForUi.

        The unit used to measure distances  # noqa: E501

        :param distance_unit: The distance_unit of this DataForUi.  # noqa: E501
        :type: DistanceUnitEnum
        """

        self._distance_unit = distance_unit

    @property
    def root_url(self):
        """Gets the root_url of this DataForUi.  # noqa: E501

        The main URL set in the configuration  # noqa: E501

        :return: The root_url of this DataForUi.  # noqa: E501
        :rtype: str
        """
        return self._root_url

    @root_url.setter
    def root_url(self, root_url):
        """Sets the root_url of this DataForUi.

        The main URL set in the configuration  # noqa: E501

        :param root_url: The root_url of this DataForUi.  # noqa: E501
        :type: str
        """

        self._root_url = root_url

    @property
    def country(self):
        """Gets the country of this DataForUi.  # noqa: E501

        The ISO 3166-1 alpha-2 country code, as set in the configuration  # noqa: E501

        :return: The country of this DataForUi.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this DataForUi.

        The ISO 3166-1 alpha-2 country code, as set in the configuration  # noqa: E501

        :param country: The country of this DataForUi.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def max_image_width(self):
        """Gets the max_image_width of this DataForUi.  # noqa: E501

        Maximum width (in pixels) for uploaded images  # noqa: E501

        :return: The max_image_width of this DataForUi.  # noqa: E501
        :rtype: int
        """
        return self._max_image_width

    @max_image_width.setter
    def max_image_width(self, max_image_width):
        """Sets the max_image_width of this DataForUi.

        Maximum width (in pixels) for uploaded images  # noqa: E501

        :param max_image_width: The max_image_width of this DataForUi.  # noqa: E501
        :type: int
        """

        self._max_image_width = max_image_width

    @property
    def max_image_height(self):
        """Gets the max_image_height of this DataForUi.  # noqa: E501

        Maximum height (in pixels) for uploaded images  # noqa: E501

        :return: The max_image_height of this DataForUi.  # noqa: E501
        :rtype: int
        """
        return self._max_image_height

    @max_image_height.setter
    def max_image_height(self, max_image_height):
        """Sets the max_image_height of this DataForUi.

        Maximum height (in pixels) for uploaded images  # noqa: E501

        :param max_image_height: The max_image_height of this DataForUi.  # noqa: E501
        :type: int
        """

        self._max_image_height = max_image_height

    @property
    def max_upload_size(self):
        """Gets the max_upload_size of this DataForUi.  # noqa: E501

        Maximum size (in bytes) for uploaded files  # noqa: E501

        :return: The max_upload_size of this DataForUi.  # noqa: E501
        :rtype: int
        """
        return self._max_upload_size

    @max_upload_size.setter
    def max_upload_size(self, max_upload_size):
        """Sets the max_upload_size of this DataForUi.

        Maximum size (in bytes) for uploaded files  # noqa: E501

        :param max_upload_size: The max_upload_size of this DataForUi.  # noqa: E501
        :type: int
        """

        self._max_upload_size = max_upload_size

    @property
    def jpeg_quality(self):
        """Gets the jpeg_quality of this DataForUi.  # noqa: E501

        Quality for JPEG image types (higher means better quality)  # noqa: E501

        :return: The jpeg_quality of this DataForUi.  # noqa: E501
        :rtype: int
        """
        return self._jpeg_quality

    @jpeg_quality.setter
    def jpeg_quality(self, jpeg_quality):
        """Sets the jpeg_quality of this DataForUi.

        Quality for JPEG image types (higher means better quality)  # noqa: E501

        :param jpeg_quality: The jpeg_quality of this DataForUi.  # noqa: E501
        :type: int
        """

        self._jpeg_quality = jpeg_quality

    @property
    def language(self):
        """Gets the language of this DataForUi.  # noqa: E501

        The language set in the configuration  # noqa: E501

        :return: The language of this DataForUi.  # noqa: E501
        :rtype: Language
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this DataForUi.

        The language set in the configuration  # noqa: E501

        :param language: The language of this DataForUi.  # noqa: E501
        :type: Language
        """

        self._language = language

    @property
    def resource_cache_key(self):
        """Gets the resource_cache_key of this DataForUi.  # noqa: E501

        A new key is generated after each server restart  # noqa: E501

        :return: The resource_cache_key of this DataForUi.  # noqa: E501
        :rtype: str
        """
        return self._resource_cache_key

    @resource_cache_key.setter
    def resource_cache_key(self, resource_cache_key):
        """Sets the resource_cache_key of this DataForUi.

        A new key is generated after each server restart  # noqa: E501

        :param resource_cache_key: The resource_cache_key of this DataForUi.  # noqa: E501
        :type: str
        """

        self._resource_cache_key = resource_cache_key

    @property
    def theme(self):
        """Gets the theme of this DataForUi.  # noqa: E501

        The theme content (i.e the CSS or its components according).  Only returned when changed or if the corresponding `themeIf` parameter  was not specified.  The returned theme will be the following according to the UI kind:  * `main`: If there is a logged user then the theme for users associated to the configuration. Otherwise the theme for guests;   * `mobile`: only returned for guest;  * `pay`: The theme defined for the ticket/easy invoice  confirmation application interface (it's the same for logged users and  guest).           # noqa: E501

        :return: The theme of this DataForUi.  # noqa: E501
        :rtype: ThemeUIElement
        """
        return self._theme

    @theme.setter
    def theme(self, theme):
        """Sets the theme of this DataForUi.

        The theme content (i.e the CSS or its components according).  Only returned when changed or if the corresponding `themeIf` parameter  was not specified.  The returned theme will be the following according to the UI kind:  * `main`: If there is a logged user then the theme for users associated to the configuration. Otherwise the theme for guests;   * `mobile`: only returned for guest;  * `pay`: The theme defined for the ticket/easy invoice  confirmation application interface (it's the same for logged users and  guest).           # noqa: E501

        :param theme: The theme of this DataForUi.  # noqa: E501
        :type: ThemeUIElement
        """

        self._theme = theme

    @property
    def header(self):
        """Gets the header of this DataForUi.  # noqa: E501

        The header content. Only returned when changed or if the  corresponding `headerIf` parameter was not specified. For all cases the content returned will be the same for logged users an for guests.  The returned header will be the following according to the UI kind:  * `main`: The header configured for the main web interface;  * `mobile`: The header configured for the mobile  application. Only returned for guests;  * `pay`: The header defined for the ticket/easy invoice  confirmation application interface.   # noqa: E501

        :return: The header of this DataForUi.  # noqa: E501
        :rtype: UIElementWithContent
        """
        return self._header

    @header.setter
    def header(self, header):
        """Sets the header of this DataForUi.

        The header content. Only returned when changed or if the  corresponding `headerIf` parameter was not specified. For all cases the content returned will be the same for logged users an for guests.  The returned header will be the following according to the UI kind:  * `main`: The header configured for the main web interface;  * `mobile`: The header configured for the mobile  application. Only returned for guests;  * `pay`: The header defined for the ticket/easy invoice  confirmation application interface.   # noqa: E501

        :param header: The header of this DataForUi.  # noqa: E501
        :type: UIElementWithContent
        """

        self._header = header

    @property
    def footer(self):
        """Gets the footer of this DataForUi.  # noqa: E501

        The footer content. Only returned when changed or if the  corresponding `footerIf` parameter was not specified. For all cases the content returned will be the same for logged users an for guests.  The returned footer will be the following according to the UI kind:  * `main`: The footer configured for the main web interface;  * `mobile`: The footer configured for the mobile  application. Only returned for guests;  * `pay`: The footer defined for the ticket/easy invoice  confirmation application interface.   # noqa: E501

        :return: The footer of this DataForUi.  # noqa: E501
        :rtype: UIElementWithContent
        """
        return self._footer

    @footer.setter
    def footer(self, footer):
        """Sets the footer of this DataForUi.

        The footer content. Only returned when changed or if the  corresponding `footerIf` parameter was not specified. For all cases the content returned will be the same for logged users an for guests.  The returned footer will be the following according to the UI kind:  * `main`: The footer configured for the main web interface;  * `mobile`: The footer configured for the mobile  application. Only returned for guests;  * `pay`: The footer defined for the ticket/easy invoice  confirmation application interface.   # noqa: E501

        :param footer: The footer of this DataForUi.  # noqa: E501
        :type: UIElementWithContent
        """

        self._footer = footer

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DataForUi, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataForUi):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DataForUi):
            return True

        return self.to_dict() != other.to_dict()
