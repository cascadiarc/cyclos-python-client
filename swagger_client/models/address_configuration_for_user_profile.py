# coding: utf-8

"""
    Cyclos 4.11.5 API

    The REST API for Cyclos 4.11.5  # noqa: E501

    OpenAPI spec version: 4.11.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class AddressConfigurationForUserProfile(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address': 'AddressNew',
        'availability': 'AvailabilityEnum',
        'edit': 'bool',
        'manage_privacy': 'bool',
        'max_addresses': 'int'
    }

    attribute_map = {
        'address': 'address',
        'availability': 'availability',
        'edit': 'edit',
        'manage_privacy': 'managePrivacy',
        'max_addresses': 'maxAddresses'
    }

    def __init__(self, address=None, availability=None, edit=None, manage_privacy=None, max_addresses=None, _configuration=None):  # noqa: E501
        """AddressConfigurationForUserProfile - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._address = None
        self._availability = None
        self._edit = None
        self._manage_privacy = None
        self._max_addresses = None
        self.discriminator = None

        if address is not None:
            self.address = address
        if availability is not None:
            self.availability = availability
        if edit is not None:
            self.edit = edit
        if manage_privacy is not None:
            self.manage_privacy = manage_privacy
        if max_addresses is not None:
            self.max_addresses = max_addresses

    @property
    def address(self):
        """Gets the address of this AddressConfigurationForUserProfile.  # noqa: E501

        Contains the default values for a new address  # noqa: E501

        :return: The address of this AddressConfigurationForUserProfile.  # noqa: E501
        :rtype: AddressNew
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this AddressConfigurationForUserProfile.

        Contains the default values for a new address  # noqa: E501

        :param address: The address of this AddressConfigurationForUserProfile.  # noqa: E501
        :type: AddressNew
        """

        self._address = address

    @property
    def availability(self):
        """Gets the availability of this AddressConfigurationForUserProfile.  # noqa: E501

        The availability for addresses Possible values are: * disabled: The data is disabled * optional: The data is enabled and optional * required: The data is enabled and required   # noqa: E501

        :return: The availability of this AddressConfigurationForUserProfile.  # noqa: E501
        :rtype: AvailabilityEnum
        """
        return self._availability

    @availability.setter
    def availability(self, availability):
        """Sets the availability of this AddressConfigurationForUserProfile.

        The availability for addresses Possible values are: * disabled: The data is disabled * optional: The data is enabled and optional * required: The data is enabled and required   # noqa: E501

        :param availability: The availability of this AddressConfigurationForUserProfile.  # noqa: E501
        :type: AvailabilityEnum
        """

        self._availability = availability

    @property
    def edit(self):
        """Gets the edit of this AddressConfigurationForUserProfile.  # noqa: E501

        Can edit addresses?  # noqa: E501

        :return: The edit of this AddressConfigurationForUserProfile.  # noqa: E501
        :rtype: bool
        """
        return self._edit

    @edit.setter
    def edit(self, edit):
        """Sets the edit of this AddressConfigurationForUserProfile.

        Can edit addresses?  # noqa: E501

        :param edit: The edit of this AddressConfigurationForUserProfile.  # noqa: E501
        :type: bool
        """

        self._edit = edit

    @property
    def manage_privacy(self):
        """Gets the manage_privacy of this AddressConfigurationForUserProfile.  # noqa: E501

        Can manage the privacy of addresses?  # noqa: E501

        :return: The manage_privacy of this AddressConfigurationForUserProfile.  # noqa: E501
        :rtype: bool
        """
        return self._manage_privacy

    @manage_privacy.setter
    def manage_privacy(self, manage_privacy):
        """Sets the manage_privacy of this AddressConfigurationForUserProfile.

        Can manage the privacy of addresses?  # noqa: E501

        :param manage_privacy: The manage_privacy of this AddressConfigurationForUserProfile.  # noqa: E501
        :type: bool
        """

        self._manage_privacy = manage_privacy

    @property
    def max_addresses(self):
        """Gets the max_addresses of this AddressConfigurationForUserProfile.  # noqa: E501

        The maximum number of addresses the user can own  # noqa: E501

        :return: The max_addresses of this AddressConfigurationForUserProfile.  # noqa: E501
        :rtype: int
        """
        return self._max_addresses

    @max_addresses.setter
    def max_addresses(self, max_addresses):
        """Sets the max_addresses of this AddressConfigurationForUserProfile.

        The maximum number of addresses the user can own  # noqa: E501

        :param max_addresses: The max_addresses of this AddressConfigurationForUserProfile.  # noqa: E501
        :type: int
        """

        self._max_addresses = max_addresses

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AddressConfigurationForUserProfile, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AddressConfigurationForUserProfile):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AddressConfigurationForUserProfile):
            return True

        return self.to_dict() != other.to_dict()
