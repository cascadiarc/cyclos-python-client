# coding: utf-8

"""
    Cyclos 4.11.5 API

    The REST API for Cyclos 4.11.5  # noqa: E501

    OpenAPI spec version: 4.11.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class TransactionView(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'channel': 'EntityReference',
        'access_client': 'EntityReference',
        'users_which_can_add_to_contacts': 'TransactionSubjectsEnum',
        'users_which_can_view_profile': 'TransactionSubjectsEnum',
        'by': 'User',
        'received_by': 'User',
        'received': 'bool',
        'custom_values': 'list[CustomFieldValue]',
        'confirmation_password_input': 'PasswordInput',
        'authorization_type': 'TransactionAuthorizationTypeEnum',
        'authorization_level_data': 'TransactionAuthorizationLevelData',
        'authorization_permissions': 'TransactionAuthorizationPermissions',
        'authorizations': 'list[TransactionAuthorization]',
        'transfer': 'TransferView',
        'scheduled_payment_status': 'ScheduledPaymentStatusEnum',
        'scheduled_payment_permissions': 'ScheduledPaymentPermissions',
        'due_amount': 'BigDecimal',
        'installments': 'list[ScheduledPaymentInstallmentView]',
        'recurring_payment_status': 'RecurringPaymentStatusEnum',
        'recurring_payment_permissions': 'RecurringPaymentPermissions',
        'next_occurrence_date': 'datetime',
        'occurrence_interval': 'TimeInterval',
        'occurrences_count': 'int',
        'occurrences': 'list[RecurringPaymentOccurrenceView]',
        'original_transfer': 'Transfer',
        'chargeback_transfer': 'Transfer',
        'payment_request_status': 'PaymentRequestStatusEnum',
        'payment_request_permissions': 'PaymentRequestPermissions',
        'comments': 'str',
        'expiration_date': 'datetime',
        'change_expiration_date_comments': 'str',
        'process_date': 'datetime',
        'transaction': 'Transaction',
        'sms_code': 'str',
        'scheduled': 'bool',
        'installments_count': 'int',
        'first_installment_is_immediate': 'bool',
        'external_payment_status': 'ExternalPaymentStatusEnum',
        'to_principal_type': 'EntityReference',
        'to_principal_value': 'str',
        'ticket_status': 'TicketStatusEnum',
        'payer_principal': 'str',
        'cancel_url': 'str',
        'success_url': 'str',
        'preview': 'PaymentPreview'
    }

    attribute_map = {
        'channel': 'channel',
        'access_client': 'accessClient',
        'users_which_can_add_to_contacts': 'usersWhichCanAddToContacts',
        'users_which_can_view_profile': 'usersWhichCanViewProfile',
        'by': 'by',
        'received_by': 'receivedBy',
        'received': 'received',
        'custom_values': 'customValues',
        'confirmation_password_input': 'confirmationPasswordInput',
        'authorization_type': 'authorizationType',
        'authorization_level_data': 'authorizationLevelData',
        'authorization_permissions': 'authorizationPermissions',
        'authorizations': 'authorizations',
        'transfer': 'transfer',
        'scheduled_payment_status': 'scheduledPaymentStatus',
        'scheduled_payment_permissions': 'scheduledPaymentPermissions',
        'due_amount': 'dueAmount',
        'installments': 'installments',
        'recurring_payment_status': 'recurringPaymentStatus',
        'recurring_payment_permissions': 'recurringPaymentPermissions',
        'next_occurrence_date': 'nextOccurrenceDate',
        'occurrence_interval': 'occurrenceInterval',
        'occurrences_count': 'occurrencesCount',
        'occurrences': 'occurrences',
        'original_transfer': 'originalTransfer',
        'chargeback_transfer': 'chargebackTransfer',
        'payment_request_status': 'paymentRequestStatus',
        'payment_request_permissions': 'paymentRequestPermissions',
        'comments': 'comments',
        'expiration_date': 'expirationDate',
        'change_expiration_date_comments': 'changeExpirationDateComments',
        'process_date': 'processDate',
        'transaction': 'transaction',
        'sms_code': 'smsCode',
        'scheduled': 'scheduled',
        'installments_count': 'installmentsCount',
        'first_installment_is_immediate': 'firstInstallmentIsImmediate',
        'external_payment_status': 'externalPaymentStatus',
        'to_principal_type': 'toPrincipalType',
        'to_principal_value': 'toPrincipalValue',
        'ticket_status': 'ticketStatus',
        'payer_principal': 'payerPrincipal',
        'cancel_url': 'cancelUrl',
        'success_url': 'successUrl',
        'preview': 'preview'
    }

    def __init__(self, channel=None, access_client=None, users_which_can_add_to_contacts=None, users_which_can_view_profile=None, by=None, received_by=None, received=None, custom_values=None, confirmation_password_input=None, authorization_type=None, authorization_level_data=None, authorization_permissions=None, authorizations=None, transfer=None, scheduled_payment_status=None, scheduled_payment_permissions=None, due_amount=None, installments=None, recurring_payment_status=None, recurring_payment_permissions=None, next_occurrence_date=None, occurrence_interval=None, occurrences_count=None, occurrences=None, original_transfer=None, chargeback_transfer=None, payment_request_status=None, payment_request_permissions=None, comments=None, expiration_date=None, change_expiration_date_comments=None, process_date=None, transaction=None, sms_code=None, scheduled=None, installments_count=None, first_installment_is_immediate=None, external_payment_status=None, to_principal_type=None, to_principal_value=None, ticket_status=None, payer_principal=None, cancel_url=None, success_url=None, preview=None, _configuration=None):  # noqa: E501
        """TransactionView - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._channel = None
        self._access_client = None
        self._users_which_can_add_to_contacts = None
        self._users_which_can_view_profile = None
        self._by = None
        self._received_by = None
        self._received = None
        self._custom_values = None
        self._confirmation_password_input = None
        self._authorization_type = None
        self._authorization_level_data = None
        self._authorization_permissions = None
        self._authorizations = None
        self._transfer = None
        self._scheduled_payment_status = None
        self._scheduled_payment_permissions = None
        self._due_amount = None
        self._installments = None
        self._recurring_payment_status = None
        self._recurring_payment_permissions = None
        self._next_occurrence_date = None
        self._occurrence_interval = None
        self._occurrences_count = None
        self._occurrences = None
        self._original_transfer = None
        self._chargeback_transfer = None
        self._payment_request_status = None
        self._payment_request_permissions = None
        self._comments = None
        self._expiration_date = None
        self._change_expiration_date_comments = None
        self._process_date = None
        self._transaction = None
        self._sms_code = None
        self._scheduled = None
        self._installments_count = None
        self._first_installment_is_immediate = None
        self._external_payment_status = None
        self._to_principal_type = None
        self._to_principal_value = None
        self._ticket_status = None
        self._payer_principal = None
        self._cancel_url = None
        self._success_url = None
        self._preview = None
        self.discriminator = None

        if channel is not None:
            self.channel = channel
        if access_client is not None:
            self.access_client = access_client
        if users_which_can_add_to_contacts is not None:
            self.users_which_can_add_to_contacts = users_which_can_add_to_contacts
        if users_which_can_view_profile is not None:
            self.users_which_can_view_profile = users_which_can_view_profile
        if by is not None:
            self.by = by
        if received_by is not None:
            self.received_by = received_by
        if received is not None:
            self.received = received
        if custom_values is not None:
            self.custom_values = custom_values
        if confirmation_password_input is not None:
            self.confirmation_password_input = confirmation_password_input
        if authorization_type is not None:
            self.authorization_type = authorization_type
        if authorization_level_data is not None:
            self.authorization_level_data = authorization_level_data
        if authorization_permissions is not None:
            self.authorization_permissions = authorization_permissions
        if authorizations is not None:
            self.authorizations = authorizations
        if transfer is not None:
            self.transfer = transfer
        if scheduled_payment_status is not None:
            self.scheduled_payment_status = scheduled_payment_status
        if scheduled_payment_permissions is not None:
            self.scheduled_payment_permissions = scheduled_payment_permissions
        if due_amount is not None:
            self.due_amount = due_amount
        if installments is not None:
            self.installments = installments
        if recurring_payment_status is not None:
            self.recurring_payment_status = recurring_payment_status
        if recurring_payment_permissions is not None:
            self.recurring_payment_permissions = recurring_payment_permissions
        if next_occurrence_date is not None:
            self.next_occurrence_date = next_occurrence_date
        if occurrence_interval is not None:
            self.occurrence_interval = occurrence_interval
        if occurrences_count is not None:
            self.occurrences_count = occurrences_count
        if occurrences is not None:
            self.occurrences = occurrences
        if original_transfer is not None:
            self.original_transfer = original_transfer
        if chargeback_transfer is not None:
            self.chargeback_transfer = chargeback_transfer
        if payment_request_status is not None:
            self.payment_request_status = payment_request_status
        if payment_request_permissions is not None:
            self.payment_request_permissions = payment_request_permissions
        if comments is not None:
            self.comments = comments
        if expiration_date is not None:
            self.expiration_date = expiration_date
        if change_expiration_date_comments is not None:
            self.change_expiration_date_comments = change_expiration_date_comments
        if process_date is not None:
            self.process_date = process_date
        if transaction is not None:
            self.transaction = transaction
        if sms_code is not None:
            self.sms_code = sms_code
        if scheduled is not None:
            self.scheduled = scheduled
        if installments_count is not None:
            self.installments_count = installments_count
        if first_installment_is_immediate is not None:
            self.first_installment_is_immediate = first_installment_is_immediate
        if external_payment_status is not None:
            self.external_payment_status = external_payment_status
        if to_principal_type is not None:
            self.to_principal_type = to_principal_type
        if to_principal_value is not None:
            self.to_principal_value = to_principal_value
        if ticket_status is not None:
            self.ticket_status = ticket_status
        if payer_principal is not None:
            self.payer_principal = payer_principal
        if cancel_url is not None:
            self.cancel_url = cancel_url
        if success_url is not None:
            self.success_url = success_url
        if preview is not None:
            self.preview = preview

    @property
    def channel(self):
        """Gets the channel of this TransactionView.  # noqa: E501

        The channel this transaction was performed on  # noqa: E501

        :return: The channel of this TransactionView.  # noqa: E501
        :rtype: EntityReference
        """
        return self._channel

    @channel.setter
    def channel(self, channel):
        """Sets the channel of this TransactionView.

        The channel this transaction was performed on  # noqa: E501

        :param channel: The channel of this TransactionView.  # noqa: E501
        :type: EntityReference
        """

        self._channel = channel

    @property
    def access_client(self):
        """Gets the access_client of this TransactionView.  # noqa: E501

        The access client in use when this transaction was performed   # noqa: E501

        :return: The access_client of this TransactionView.  # noqa: E501
        :rtype: EntityReference
        """
        return self._access_client

    @access_client.setter
    def access_client(self, access_client):
        """Sets the access_client of this TransactionView.

        The access client in use when this transaction was performed   # noqa: E501

        :param access_client: The access_client of this TransactionView.  # noqa: E501
        :type: EntityReference
        """

        self._access_client = access_client

    @property
    def users_which_can_add_to_contacts(self):
        """Gets the users_which_can_add_to_contacts of this TransactionView.  # noqa: E501

        Reference to none, one of (from or to) or both subjects of a transaction (or transfer)  Possible values are: * both: Reference to both from and to subjects of the transaction * from: Reference to the transaction from * none: Reference to none of the transaction subjects * to: Reference to the transaction to   # noqa: E501

        :return: The users_which_can_add_to_contacts of this TransactionView.  # noqa: E501
        :rtype: TransactionSubjectsEnum
        """
        return self._users_which_can_add_to_contacts

    @users_which_can_add_to_contacts.setter
    def users_which_can_add_to_contacts(self, users_which_can_add_to_contacts):
        """Sets the users_which_can_add_to_contacts of this TransactionView.

        Reference to none, one of (from or to) or both subjects of a transaction (or transfer)  Possible values are: * both: Reference to both from and to subjects of the transaction * from: Reference to the transaction from * none: Reference to none of the transaction subjects * to: Reference to the transaction to   # noqa: E501

        :param users_which_can_add_to_contacts: The users_which_can_add_to_contacts of this TransactionView.  # noqa: E501
        :type: TransactionSubjectsEnum
        """

        self._users_which_can_add_to_contacts = users_which_can_add_to_contacts

    @property
    def users_which_can_view_profile(self):
        """Gets the users_which_can_view_profile of this TransactionView.  # noqa: E501

        Reference to none, one of (from or to) or both subjects of a transaction (or transfer)  Possible values are: * both: Reference to both from and to subjects of the transaction * from: Reference to the transaction from * none: Reference to none of the transaction subjects * to: Reference to the transaction to   # noqa: E501

        :return: The users_which_can_view_profile of this TransactionView.  # noqa: E501
        :rtype: TransactionSubjectsEnum
        """
        return self._users_which_can_view_profile

    @users_which_can_view_profile.setter
    def users_which_can_view_profile(self, users_which_can_view_profile):
        """Sets the users_which_can_view_profile of this TransactionView.

        Reference to none, one of (from or to) or both subjects of a transaction (or transfer)  Possible values are: * both: Reference to both from and to subjects of the transaction * from: Reference to the transaction from * none: Reference to none of the transaction subjects * to: Reference to the transaction to   # noqa: E501

        :param users_which_can_view_profile: The users_which_can_view_profile of this TransactionView.  # noqa: E501
        :type: TransactionSubjectsEnum
        """

        self._users_which_can_view_profile = users_which_can_view_profile

    @property
    def by(self):
        """Gets the by of this TransactionView.  # noqa: E501

        The user that actually performed the action. May be different than the from, for example, an administrator can perform payments in behalf of other users   # noqa: E501

        :return: The by of this TransactionView.  # noqa: E501
        :rtype: User
        """
        return self._by

    @by.setter
    def by(self, by):
        """Sets the by of this TransactionView.

        The user that actually performed the action. May be different than the from, for example, an administrator can perform payments in behalf of other users   # noqa: E501

        :param by: The by of this TransactionView.  # noqa: E501
        :type: User
        """

        self._by = by

    @property
    def received_by(self):
        """Gets the received_by of this TransactionView.  # noqa: E501

        The operator that actually received the payment.  Only available if some other user has paid directly to it  or the operator has received the payment vía POS.   # noqa: E501

        :return: The received_by of this TransactionView.  # noqa: E501
        :rtype: User
        """
        return self._received_by

    @received_by.setter
    def received_by(self, received_by):
        """Sets the received_by of this TransactionView.

        The operator that actually received the payment.  Only available if some other user has paid directly to it  or the operator has received the payment vía POS.   # noqa: E501

        :param received_by: The received_by of this TransactionView.  # noqa: E501
        :type: User
        """

        self._received_by = received_by

    @property
    def received(self):
        """Gets the received of this TransactionView.  # noqa: E501

        True if the payment was received vía POS.   # noqa: E501

        :return: The received of this TransactionView.  # noqa: E501
        :rtype: bool
        """
        return self._received

    @received.setter
    def received(self, received):
        """Sets the received of this TransactionView.

        True if the payment was received vía POS.   # noqa: E501

        :param received: The received of this TransactionView.  # noqa: E501
        :type: bool
        """

        self._received = received

    @property
    def custom_values(self):
        """Gets the custom_values of this TransactionView.  # noqa: E501

        The list of custom field values  # noqa: E501

        :return: The custom_values of this TransactionView.  # noqa: E501
        :rtype: list[CustomFieldValue]
        """
        return self._custom_values

    @custom_values.setter
    def custom_values(self, custom_values):
        """Sets the custom_values of this TransactionView.

        The list of custom field values  # noqa: E501

        :param custom_values: The custom_values of this TransactionView.  # noqa: E501
        :type: list[CustomFieldValue]
        """

        self._custom_values = custom_values

    @property
    def confirmation_password_input(self):
        """Gets the confirmation_password_input of this TransactionView.  # noqa: E501

        If a confirmation password is used, contains the definitions on how to request that password from the user. This confirmation password is required when performing sensible actions. Sometimes this is dynamic, for example, the confirmation might be configured to be used only once per session, or operations like payments may have a limit per day to be without confirmation (pinless).   # noqa: E501

        :return: The confirmation_password_input of this TransactionView.  # noqa: E501
        :rtype: PasswordInput
        """
        return self._confirmation_password_input

    @confirmation_password_input.setter
    def confirmation_password_input(self, confirmation_password_input):
        """Sets the confirmation_password_input of this TransactionView.

        If a confirmation password is used, contains the definitions on how to request that password from the user. This confirmation password is required when performing sensible actions. Sometimes this is dynamic, for example, the confirmation might be configured to be used only once per session, or operations like payments may have a limit per day to be without confirmation (pinless).   # noqa: E501

        :param confirmation_password_input: The confirmation_password_input of this TransactionView.  # noqa: E501
        :type: PasswordInput
        """

        self._confirmation_password_input = confirmation_password_input

    @property
    def authorization_type(self):
        """Gets the authorization_type of this TransactionView.  # noqa: E501

        Defines which kind of authorization a transaction is through. Only returned if the `kind` is either `payment`, `scheduledPayment` or `recurringPayment` and the transaction is pending for authorization. Possible values are: * level: A transaction is going through some authorization level * operator: An operator performed a payment that needs to be authorized by his member or other operators   # noqa: E501

        :return: The authorization_type of this TransactionView.  # noqa: E501
        :rtype: TransactionAuthorizationTypeEnum
        """
        return self._authorization_type

    @authorization_type.setter
    def authorization_type(self, authorization_type):
        """Sets the authorization_type of this TransactionView.

        Defines which kind of authorization a transaction is through. Only returned if the `kind` is either `payment`, `scheduledPayment` or `recurringPayment` and the transaction is pending for authorization. Possible values are: * level: A transaction is going through some authorization level * operator: An operator performed a payment that needs to be authorized by his member or other operators   # noqa: E501

        :param authorization_type: The authorization_type of this TransactionView.  # noqa: E501
        :type: TransactionAuthorizationTypeEnum
        """

        self._authorization_type = authorization_type

    @property
    def authorization_level_data(self):
        """Gets the authorization_level_data of this TransactionView.  # noqa: E501

        Only returned if the `kind` is either `payment`, `scheduledPayment` or `recurringPayment` and the transaction is pending for authorization. Contains data related to the current autorization level that can be authorized / denied.   # noqa: E501

        :return: The authorization_level_data of this TransactionView.  # noqa: E501
        :rtype: TransactionAuthorizationLevelData
        """
        return self._authorization_level_data

    @authorization_level_data.setter
    def authorization_level_data(self, authorization_level_data):
        """Sets the authorization_level_data of this TransactionView.

        Only returned if the `kind` is either `payment`, `scheduledPayment` or `recurringPayment` and the transaction is pending for authorization. Contains data related to the current autorization level that can be authorized / denied.   # noqa: E501

        :param authorization_level_data: The authorization_level_data of this TransactionView.  # noqa: E501
        :type: TransactionAuthorizationLevelData
        """

        self._authorization_level_data = authorization_level_data

    @property
    def authorization_permissions(self):
        """Gets the authorization_permissions of this TransactionView.  # noqa: E501

        Permissions the authenticated user has over this payment regarding authorizations.  # noqa: E501

        :return: The authorization_permissions of this TransactionView.  # noqa: E501
        :rtype: TransactionAuthorizationPermissions
        """
        return self._authorization_permissions

    @authorization_permissions.setter
    def authorization_permissions(self, authorization_permissions):
        """Sets the authorization_permissions of this TransactionView.

        Permissions the authenticated user has over this payment regarding authorizations.  # noqa: E501

        :param authorization_permissions: The authorization_permissions of this TransactionView.  # noqa: E501
        :type: TransactionAuthorizationPermissions
        """

        self._authorization_permissions = authorization_permissions

    @property
    def authorizations(self):
        """Gets the authorizations of this TransactionView.  # noqa: E501

        Contains the details of the authorizations this payment has (for the previous levels). To see the final status of the payment please check the `authorizationStatus` property.    # noqa: E501

        :return: The authorizations of this TransactionView.  # noqa: E501
        :rtype: list[TransactionAuthorization]
        """
        return self._authorizations

    @authorizations.setter
    def authorizations(self, authorizations):
        """Sets the authorizations of this TransactionView.

        Contains the details of the authorizations this payment has (for the previous levels). To see the final status of the payment please check the `authorizationStatus` property.    # noqa: E501

        :param authorizations: The authorizations of this TransactionView.  # noqa: E501
        :type: list[TransactionAuthorization]
        """

        self._authorizations = authorizations

    @property
    def transfer(self):
        """Gets the transfer of this TransactionView.  # noqa: E501

        Only returned if the `kind` is `payment`. This is the transfer generated when the payment was processed. Will be null if the went through authorization and was not authorized. Only returned if this `TransactionView` is not already in a `TransactionView`.    # noqa: E501

        :return: The transfer of this TransactionView.  # noqa: E501
        :rtype: TransferView
        """
        return self._transfer

    @transfer.setter
    def transfer(self, transfer):
        """Sets the transfer of this TransactionView.

        Only returned if the `kind` is `payment`. This is the transfer generated when the payment was processed. Will be null if the went through authorization and was not authorized. Only returned if this `TransactionView` is not already in a `TransactionView`.    # noqa: E501

        :param transfer: The transfer of this TransactionView.  # noqa: E501
        :type: TransferView
        """

        self._transfer = transfer

    @property
    def scheduled_payment_status(self):
        """Gets the scheduled_payment_status of this TransactionView.  # noqa: E501

        The status of a scheduled payment Possible values are: * blocked: The scheduled payment is blocked - won't have any installment processed until being unblocked again * canceled: The scheduled payment, as well as all open installments were canceled * closed: The scheduled payment is closed * open: The scheduled payment has open installments   # noqa: E501

        :return: The scheduled_payment_status of this TransactionView.  # noqa: E501
        :rtype: ScheduledPaymentStatusEnum
        """
        return self._scheduled_payment_status

    @scheduled_payment_status.setter
    def scheduled_payment_status(self, scheduled_payment_status):
        """Sets the scheduled_payment_status of this TransactionView.

        The status of a scheduled payment Possible values are: * blocked: The scheduled payment is blocked - won't have any installment processed until being unblocked again * canceled: The scheduled payment, as well as all open installments were canceled * closed: The scheduled payment is closed * open: The scheduled payment has open installments   # noqa: E501

        :param scheduled_payment_status: The scheduled_payment_status of this TransactionView.  # noqa: E501
        :type: ScheduledPaymentStatusEnum
        """

        self._scheduled_payment_status = scheduled_payment_status

    @property
    def scheduled_payment_permissions(self):
        """Gets the scheduled_payment_permissions of this TransactionView.  # noqa: E501

        Only returned if the `kind` is `scheduledPayment`. Permissions over the scheduled payment.      # noqa: E501

        :return: The scheduled_payment_permissions of this TransactionView.  # noqa: E501
        :rtype: ScheduledPaymentPermissions
        """
        return self._scheduled_payment_permissions

    @scheduled_payment_permissions.setter
    def scheduled_payment_permissions(self, scheduled_payment_permissions):
        """Sets the scheduled_payment_permissions of this TransactionView.

        Only returned if the `kind` is `scheduledPayment`. Permissions over the scheduled payment.      # noqa: E501

        :param scheduled_payment_permissions: The scheduled_payment_permissions of this TransactionView.  # noqa: E501
        :type: ScheduledPaymentPermissions
        """

        self._scheduled_payment_permissions = scheduled_payment_permissions

    @property
    def due_amount(self):
        """Gets the due_amount of this TransactionView.  # noqa: E501

        Only returned if the `kind` is `scheduledPayment`. Means the amount that is still needs to be paid until the last installment.   # noqa: E501

        :return: The due_amount of this TransactionView.  # noqa: E501
        :rtype: BigDecimal
        """
        return self._due_amount

    @due_amount.setter
    def due_amount(self, due_amount):
        """Sets the due_amount of this TransactionView.

        Only returned if the `kind` is `scheduledPayment`. Means the amount that is still needs to be paid until the last installment.   # noqa: E501

        :param due_amount: The due_amount of this TransactionView.  # noqa: E501
        :type: BigDecimal
        """

        self._due_amount = due_amount

    @property
    def installments(self):
        """Gets the installments of this TransactionView.  # noqa: E501

        Only returned if the `kind` is `scheduledPayment`. Contains the installment references.   # noqa: E501

        :return: The installments of this TransactionView.  # noqa: E501
        :rtype: list[ScheduledPaymentInstallmentView]
        """
        return self._installments

    @installments.setter
    def installments(self, installments):
        """Sets the installments of this TransactionView.

        Only returned if the `kind` is `scheduledPayment`. Contains the installment references.   # noqa: E501

        :param installments: The installments of this TransactionView.  # noqa: E501
        :type: list[ScheduledPaymentInstallmentView]
        """

        self._installments = installments

    @property
    def recurring_payment_status(self):
        """Gets the recurring_payment_status of this TransactionView.  # noqa: E501

        The status of a recurring payment Possible values are: * canceled: The recurring payment was manually canceled * closed: The recurring payment is closed, as the last scheduled occurrence was processed * open: The recurring payment is open, as there are more future occurrences   # noqa: E501

        :return: The recurring_payment_status of this TransactionView.  # noqa: E501
        :rtype: RecurringPaymentStatusEnum
        """
        return self._recurring_payment_status

    @recurring_payment_status.setter
    def recurring_payment_status(self, recurring_payment_status):
        """Sets the recurring_payment_status of this TransactionView.

        The status of a recurring payment Possible values are: * canceled: The recurring payment was manually canceled * closed: The recurring payment is closed, as the last scheduled occurrence was processed * open: The recurring payment is open, as there are more future occurrences   # noqa: E501

        :param recurring_payment_status: The recurring_payment_status of this TransactionView.  # noqa: E501
        :type: RecurringPaymentStatusEnum
        """

        self._recurring_payment_status = recurring_payment_status

    @property
    def recurring_payment_permissions(self):
        """Gets the recurring_payment_permissions of this TransactionView.  # noqa: E501

        Only returned if the `kind` is `recurringPayment`. Permissions over the scheduled payment.      # noqa: E501

        :return: The recurring_payment_permissions of this TransactionView.  # noqa: E501
        :rtype: RecurringPaymentPermissions
        """
        return self._recurring_payment_permissions

    @recurring_payment_permissions.setter
    def recurring_payment_permissions(self, recurring_payment_permissions):
        """Sets the recurring_payment_permissions of this TransactionView.

        Only returned if the `kind` is `recurringPayment`. Permissions over the scheduled payment.      # noqa: E501

        :param recurring_payment_permissions: The recurring_payment_permissions of this TransactionView.  # noqa: E501
        :type: RecurringPaymentPermissions
        """

        self._recurring_payment_permissions = recurring_payment_permissions

    @property
    def next_occurrence_date(self):
        """Gets the next_occurrence_date of this TransactionView.  # noqa: E501

        Only returned if the `kind` is `recurringPayment`. The scheduled date for the next occurrence.   # noqa: E501

        :return: The next_occurrence_date of this TransactionView.  # noqa: E501
        :rtype: datetime
        """
        return self._next_occurrence_date

    @next_occurrence_date.setter
    def next_occurrence_date(self, next_occurrence_date):
        """Sets the next_occurrence_date of this TransactionView.

        Only returned if the `kind` is `recurringPayment`. The scheduled date for the next occurrence.   # noqa: E501

        :param next_occurrence_date: The next_occurrence_date of this TransactionView.  # noqa: E501
        :type: datetime
        """

        self._next_occurrence_date = next_occurrence_date

    @property
    def occurrence_interval(self):
        """Gets the occurrence_interval of this TransactionView.  # noqa: E501

        Only returned if the `kind` is `recurringPayment`. The interval between occurrences.   # noqa: E501

        :return: The occurrence_interval of this TransactionView.  # noqa: E501
        :rtype: TimeInterval
        """
        return self._occurrence_interval

    @occurrence_interval.setter
    def occurrence_interval(self, occurrence_interval):
        """Sets the occurrence_interval of this TransactionView.

        Only returned if the `kind` is `recurringPayment`. The interval between occurrences.   # noqa: E501

        :param occurrence_interval: The occurrence_interval of this TransactionView.  # noqa: E501
        :type: TimeInterval
        """

        self._occurrence_interval = occurrence_interval

    @property
    def occurrences_count(self):
        """Gets the occurrences_count of this TransactionView.  # noqa: E501

        Only returned if the `kind` is `recurringPayment`. The programmed number of occurrences. If not set, means the payment will be processed until manually canceled.   # noqa: E501

        :return: The occurrences_count of this TransactionView.  # noqa: E501
        :rtype: int
        """
        return self._occurrences_count

    @occurrences_count.setter
    def occurrences_count(self, occurrences_count):
        """Sets the occurrences_count of this TransactionView.

        Only returned if the `kind` is `recurringPayment`. The programmed number of occurrences. If not set, means the payment will be processed until manually canceled.   # noqa: E501

        :param occurrences_count: The occurrences_count of this TransactionView.  # noqa: E501
        :type: int
        """

        self._occurrences_count = occurrences_count

    @property
    def occurrences(self):
        """Gets the occurrences of this TransactionView.  # noqa: E501

        Only returned if the `kind` is `recurringPayment`. A list with all occurrences this payment has.   # noqa: E501

        :return: The occurrences of this TransactionView.  # noqa: E501
        :rtype: list[RecurringPaymentOccurrenceView]
        """
        return self._occurrences

    @occurrences.setter
    def occurrences(self, occurrences):
        """Sets the occurrences of this TransactionView.

        Only returned if the `kind` is `recurringPayment`. A list with all occurrences this payment has.   # noqa: E501

        :param occurrences: The occurrences of this TransactionView.  # noqa: E501
        :type: list[RecurringPaymentOccurrenceView]
        """

        self._occurrences = occurrences

    @property
    def original_transfer(self):
        """Gets the original_transfer of this TransactionView.  # noqa: E501

        Only returned if the `kind` is `chargeback`. This is the original transfer that has been charged back.   # noqa: E501

        :return: The original_transfer of this TransactionView.  # noqa: E501
        :rtype: Transfer
        """
        return self._original_transfer

    @original_transfer.setter
    def original_transfer(self, original_transfer):
        """Sets the original_transfer of this TransactionView.

        Only returned if the `kind` is `chargeback`. This is the original transfer that has been charged back.   # noqa: E501

        :param original_transfer: The original_transfer of this TransactionView.  # noqa: E501
        :type: Transfer
        """

        self._original_transfer = original_transfer

    @property
    def chargeback_transfer(self):
        """Gets the chargeback_transfer of this TransactionView.  # noqa: E501

        Only returned if the `kind` is `chargeback`. This is the transfer which performed the chargeback.   # noqa: E501

        :return: The chargeback_transfer of this TransactionView.  # noqa: E501
        :rtype: Transfer
        """
        return self._chargeback_transfer

    @chargeback_transfer.setter
    def chargeback_transfer(self, chargeback_transfer):
        """Sets the chargeback_transfer of this TransactionView.

        Only returned if the `kind` is `chargeback`. This is the transfer which performed the chargeback.   # noqa: E501

        :param chargeback_transfer: The chargeback_transfer of this TransactionView.  # noqa: E501
        :type: Transfer
        """

        self._chargeback_transfer = chargeback_transfer

    @property
    def payment_request_status(self):
        """Gets the payment_request_status of this TransactionView.  # noqa: E501

        The status of a payment request Possible values are: * canceled: The payment request was canceled * denied: The payment request was denied by the receiver * expired: The payment request has expired - the received did not respond until the expiration date * open: The payment request is open and can be accepted * processed: The payment request was processed, and either a direct or scheduled payment was created from it * scheduled: The payment request has been accepted, and scheduled for processing on a future date   # noqa: E501

        :return: The payment_request_status of this TransactionView.  # noqa: E501
        :rtype: PaymentRequestStatusEnum
        """
        return self._payment_request_status

    @payment_request_status.setter
    def payment_request_status(self, payment_request_status):
        """Sets the payment_request_status of this TransactionView.

        The status of a payment request Possible values are: * canceled: The payment request was canceled * denied: The payment request was denied by the receiver * expired: The payment request has expired - the received did not respond until the expiration date * open: The payment request is open and can be accepted * processed: The payment request was processed, and either a direct or scheduled payment was created from it * scheduled: The payment request has been accepted, and scheduled for processing on a future date   # noqa: E501

        :param payment_request_status: The payment_request_status of this TransactionView.  # noqa: E501
        :type: PaymentRequestStatusEnum
        """

        self._payment_request_status = payment_request_status

    @property
    def payment_request_permissions(self):
        """Gets the payment_request_permissions of this TransactionView.  # noqa: E501

        Permissions the user has over this payment request.  # noqa: E501

        :return: The payment_request_permissions of this TransactionView.  # noqa: E501
        :rtype: PaymentRequestPermissions
        """
        return self._payment_request_permissions

    @payment_request_permissions.setter
    def payment_request_permissions(self, payment_request_permissions):
        """Sets the payment_request_permissions of this TransactionView.

        Permissions the user has over this payment request.  # noqa: E501

        :param payment_request_permissions: The payment_request_permissions of this TransactionView.  # noqa: E501
        :type: PaymentRequestPermissions
        """

        self._payment_request_permissions = payment_request_permissions

    @property
    def comments(self):
        """Gets the comments of this TransactionView.  # noqa: E501

        Only returned if the `kind` is either `paymentRequest` or `externalPayment`. The comments the user informed when performing the payment.   # noqa: E501

        :return: The comments of this TransactionView.  # noqa: E501
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this TransactionView.

        Only returned if the `kind` is either `paymentRequest` or `externalPayment`. The comments the user informed when performing the payment.   # noqa: E501

        :param comments: The comments of this TransactionView.  # noqa: E501
        :type: str
        """

        self._comments = comments

    @property
    def expiration_date(self):
        """Gets the expiration_date of this TransactionView.  # noqa: E501

        Only returned if the `kind` is either `paymentRequest`, `externalPayment` or `ticket`. The deadline for the payment to be processed.  In case of `externalPayment` if no user is registered with either e-mail or mobile phone matching, it is canceled. The same is done in case of `ticket` if it is not accepted by any user.    # noqa: E501

        :return: The expiration_date of this TransactionView.  # noqa: E501
        :rtype: datetime
        """
        return self._expiration_date

    @expiration_date.setter
    def expiration_date(self, expiration_date):
        """Sets the expiration_date of this TransactionView.

        Only returned if the `kind` is either `paymentRequest`, `externalPayment` or `ticket`. The deadline for the payment to be processed.  In case of `externalPayment` if no user is registered with either e-mail or mobile phone matching, it is canceled. The same is done in case of `ticket` if it is not accepted by any user.    # noqa: E501

        :param expiration_date: The expiration_date of this TransactionView.  # noqa: E501
        :type: datetime
        """

        self._expiration_date = expiration_date

    @property
    def change_expiration_date_comments(self):
        """Gets the change_expiration_date_comments of this TransactionView.  # noqa: E501

        Only returned if the `kind` is `paymentRequest`. The comments the user informed when changing the expiration date.   # noqa: E501

        :return: The change_expiration_date_comments of this TransactionView.  # noqa: E501
        :rtype: str
        """
        return self._change_expiration_date_comments

    @change_expiration_date_comments.setter
    def change_expiration_date_comments(self, change_expiration_date_comments):
        """Sets the change_expiration_date_comments of this TransactionView.

        Only returned if the `kind` is `paymentRequest`. The comments the user informed when changing the expiration date.   # noqa: E501

        :param change_expiration_date_comments: The change_expiration_date_comments of this TransactionView.  # noqa: E501
        :type: str
        """

        self._change_expiration_date_comments = change_expiration_date_comments

    @property
    def process_date(self):
        """Gets the process_date of this TransactionView.  # noqa: E501

        Only returned if the `kind` is either `paymentRequest`, `ticket` or `externalPayment` and `status` is `processed`. The date the payment request / ticket was accepted.   # noqa: E501

        :return: The process_date of this TransactionView.  # noqa: E501
        :rtype: datetime
        """
        return self._process_date

    @process_date.setter
    def process_date(self, process_date):
        """Sets the process_date of this TransactionView.

        Only returned if the `kind` is either `paymentRequest`, `ticket` or `externalPayment` and `status` is `processed`. The date the payment request / ticket was accepted.   # noqa: E501

        :param process_date: The process_date of this TransactionView.  # noqa: E501
        :type: datetime
        """

        self._process_date = process_date

    @property
    def transaction(self):
        """Gets the transaction of this TransactionView.  # noqa: E501

        Only returned if the `kind` is `paymentRequest`, `ticket` or `externalPayment`  and `status` is `processed`. Reference to the transaction that was generated when processing this payment request / externalPayment / ticket.   # noqa: E501

        :return: The transaction of this TransactionView.  # noqa: E501
        :rtype: Transaction
        """
        return self._transaction

    @transaction.setter
    def transaction(self, transaction):
        """Sets the transaction of this TransactionView.

        Only returned if the `kind` is `paymentRequest`, `ticket` or `externalPayment`  and `status` is `processed`. Reference to the transaction that was generated when processing this payment request / externalPayment / ticket.   # noqa: E501

        :param transaction: The transaction of this TransactionView.  # noqa: E501
        :type: Transaction
        """

        self._transaction = transaction

    @property
    def sms_code(self):
        """Gets the sms_code of this TransactionView.  # noqa: E501

        Only returned if the `kind` is either `paymentRequest` and `status` is not `processed`. The code that can be used by the receiver to confirm this payment request via SMS operation.   # noqa: E501

        :return: The sms_code of this TransactionView.  # noqa: E501
        :rtype: str
        """
        return self._sms_code

    @sms_code.setter
    def sms_code(self, sms_code):
        """Sets the sms_code of this TransactionView.

        Only returned if the `kind` is either `paymentRequest` and `status` is not `processed`. The code that can be used by the receiver to confirm this payment request via SMS operation.   # noqa: E501

        :param sms_code: The sms_code of this TransactionView.  # noqa: E501
        :type: str
        """

        self._sms_code = sms_code

    @property
    def scheduled(self):
        """Gets the scheduled of this TransactionView.  # noqa: E501

        Only returned if the `kind` is `paymentRequest`. Indicates whether a scheduled payment (`true`) or a regular payment (`false`) will be generated once this payment request is confirmed.   # noqa: E501

        :return: The scheduled of this TransactionView.  # noqa: E501
        :rtype: bool
        """
        return self._scheduled

    @scheduled.setter
    def scheduled(self, scheduled):
        """Sets the scheduled of this TransactionView.

        Only returned if the `kind` is `paymentRequest`. Indicates whether a scheduled payment (`true`) or a regular payment (`false`) will be generated once this payment request is confirmed.   # noqa: E501

        :param scheduled: The scheduled of this TransactionView.  # noqa: E501
        :type: bool
        """

        self._scheduled = scheduled

    @property
    def installments_count(self):
        """Gets the installments_count of this TransactionView.  # noqa: E501

        Only returned if the `kind` is `paymentRequest` and `scheduled` is `true`. Indicates the number of installments to be generated.   # noqa: E501

        :return: The installments_count of this TransactionView.  # noqa: E501
        :rtype: int
        """
        return self._installments_count

    @installments_count.setter
    def installments_count(self, installments_count):
        """Sets the installments_count of this TransactionView.

        Only returned if the `kind` is `paymentRequest` and `scheduled` is `true`. Indicates the number of installments to be generated.   # noqa: E501

        :param installments_count: The installments_count of this TransactionView.  # noqa: E501
        :type: int
        """

        self._installments_count = installments_count

    @property
    def first_installment_is_immediate(self):
        """Gets the first_installment_is_immediate of this TransactionView.  # noqa: E501

        Only returned if the `kind` is `paymentRequest` and `scheduled` is `true`. Indicates whether the first installment should be processed immediately when the payment request is confirmed.   # noqa: E501

        :return: The first_installment_is_immediate of this TransactionView.  # noqa: E501
        :rtype: bool
        """
        return self._first_installment_is_immediate

    @first_installment_is_immediate.setter
    def first_installment_is_immediate(self, first_installment_is_immediate):
        """Sets the first_installment_is_immediate of this TransactionView.

        Only returned if the `kind` is `paymentRequest` and `scheduled` is `true`. Indicates whether the first installment should be processed immediately when the payment request is confirmed.   # noqa: E501

        :param first_installment_is_immediate: The first_installment_is_immediate of this TransactionView.  # noqa: E501
        :type: bool
        """

        self._first_installment_is_immediate = first_installment_is_immediate

    @property
    def external_payment_status(self):
        """Gets the external_payment_status of this TransactionView.  # noqa: E501

        The status of an external payment Possible values are: * canceled: The external payment was canceled * expired: The external payment has expired without the destination user activation * failed: The external payment has failed processing * pending: The external payment is pending, awaiting the destination user to be activated in Cyclos * processed: The external payment was processed, and the destination payment was created   # noqa: E501

        :return: The external_payment_status of this TransactionView.  # noqa: E501
        :rtype: ExternalPaymentStatusEnum
        """
        return self._external_payment_status

    @external_payment_status.setter
    def external_payment_status(self, external_payment_status):
        """Sets the external_payment_status of this TransactionView.

        The status of an external payment Possible values are: * canceled: The external payment was canceled * expired: The external payment has expired without the destination user activation * failed: The external payment has failed processing * pending: The external payment is pending, awaiting the destination user to be activated in Cyclos * processed: The external payment was processed, and the destination payment was created   # noqa: E501

        :param external_payment_status: The external_payment_status of this TransactionView.  # noqa: E501
        :type: ExternalPaymentStatusEnum
        """

        self._external_payment_status = external_payment_status

    @property
    def to_principal_type(self):
        """Gets the to_principal_type of this TransactionView.  # noqa: E501

        Only returned if the `kind` is `externalPayment`. Is the user identification method for this external payment (for example, e-mail or mobile phone).   # noqa: E501

        :return: The to_principal_type of this TransactionView.  # noqa: E501
        :rtype: EntityReference
        """
        return self._to_principal_type

    @to_principal_type.setter
    def to_principal_type(self, to_principal_type):
        """Sets the to_principal_type of this TransactionView.

        Only returned if the `kind` is `externalPayment`. Is the user identification method for this external payment (for example, e-mail or mobile phone).   # noqa: E501

        :param to_principal_type: The to_principal_type of this TransactionView.  # noqa: E501
        :type: EntityReference
        """

        self._to_principal_type = to_principal_type

    @property
    def to_principal_value(self):
        """Gets the to_principal_value of this TransactionView.  # noqa: E501

        Only returned if the `kind` is `externalPayment`. Is the user identification value for this external payment (for example, the e-mail or mobile phone values).   # noqa: E501

        :return: The to_principal_value of this TransactionView.  # noqa: E501
        :rtype: str
        """
        return self._to_principal_value

    @to_principal_value.setter
    def to_principal_value(self, to_principal_value):
        """Sets the to_principal_value of this TransactionView.

        Only returned if the `kind` is `externalPayment`. Is the user identification value for this external payment (for example, the e-mail or mobile phone values).   # noqa: E501

        :param to_principal_value: The to_principal_value of this TransactionView.  # noqa: E501
        :type: str
        """

        self._to_principal_value = to_principal_value

    @property
    def ticket_status(self):
        """Gets the ticket_status of this TransactionView.  # noqa: E501

        The status of a ticket Possible values are: * approved: The ticket was approved by the payer and is waiting to be processed by the receiver to generate the payment * canceled: The ticket was canceled by the receiver before being approved * expired: The ticket has expired without being approved by a payer or canceled by the receiver until the expiration date * open: The ticket was created, but not approved yet * processed: The ticket was approved and processed and the payment was generated   # noqa: E501

        :return: The ticket_status of this TransactionView.  # noqa: E501
        :rtype: TicketStatusEnum
        """
        return self._ticket_status

    @ticket_status.setter
    def ticket_status(self, ticket_status):
        """Sets the ticket_status of this TransactionView.

        The status of a ticket Possible values are: * approved: The ticket was approved by the payer and is waiting to be processed by the receiver to generate the payment * canceled: The ticket was canceled by the receiver before being approved * expired: The ticket has expired without being approved by a payer or canceled by the receiver until the expiration date * open: The ticket was created, but not approved yet * processed: The ticket was approved and processed and the payment was generated   # noqa: E501

        :param ticket_status: The ticket_status of this TransactionView.  # noqa: E501
        :type: TicketStatusEnum
        """

        self._ticket_status = ticket_status

    @property
    def payer_principal(self):
        """Gets the payer_principal of this TransactionView.  # noqa: E501

        Only returned if the `kind` is `ticket`, the ticket status is `open` and there is a fixed payer. Is the principal (for example, login name or e-mail) which can be used to login the user, so he can accept the ticket.   # noqa: E501

        :return: The payer_principal of this TransactionView.  # noqa: E501
        :rtype: str
        """
        return self._payer_principal

    @payer_principal.setter
    def payer_principal(self, payer_principal):
        """Sets the payer_principal of this TransactionView.

        Only returned if the `kind` is `ticket`, the ticket status is `open` and there is a fixed payer. Is the principal (for example, login name or e-mail) which can be used to login the user, so he can accept the ticket.   # noqa: E501

        :param payer_principal: The payer_principal of this TransactionView.  # noqa: E501
        :type: str
        """

        self._payer_principal = payer_principal

    @property
    def cancel_url(self):
        """Gets the cancel_url of this TransactionView.  # noqa: E501

        Only returned if the `kind` is `ticket`. The URL to redirect when canceling the ticket.   # noqa: E501

        :return: The cancel_url of this TransactionView.  # noqa: E501
        :rtype: str
        """
        return self._cancel_url

    @cancel_url.setter
    def cancel_url(self, cancel_url):
        """Sets the cancel_url of this TransactionView.

        Only returned if the `kind` is `ticket`. The URL to redirect when canceling the ticket.   # noqa: E501

        :param cancel_url: The cancel_url of this TransactionView.  # noqa: E501
        :type: str
        """

        self._cancel_url = cancel_url

    @property
    def success_url(self):
        """Gets the success_url of this TransactionView.  # noqa: E501

        Only returned if the `kind` is `ticket`. The URL to redirect after successfully accepting a ticket   # noqa: E501

        :return: The success_url of this TransactionView.  # noqa: E501
        :rtype: str
        """
        return self._success_url

    @success_url.setter
    def success_url(self, success_url):
        """Sets the success_url of this TransactionView.

        Only returned if the `kind` is `ticket`. The URL to redirect after successfully accepting a ticket   # noqa: E501

        :param success_url: The success_url of this TransactionView.  # noqa: E501
        :type: str
        """

        self._success_url = success_url

    @property
    def preview(self):
        """Gets the preview of this TransactionView.  # noqa: E501

        Only returned if the `kind` is `ticket` and the ticket can be accepted. Is the payment preview if accepting the ticket. The preview will never contain a confirmation password input, because this object already contains it on the `confirmationPasswordInput` property, neither a payment to be sent back, as this payment is supposed to be confirmed by accepting the ticket. Also, the preview's currency is never sent, as it is the same one of the ticket.   # noqa: E501

        :return: The preview of this TransactionView.  # noqa: E501
        :rtype: PaymentPreview
        """
        return self._preview

    @preview.setter
    def preview(self, preview):
        """Sets the preview of this TransactionView.

        Only returned if the `kind` is `ticket` and the ticket can be accepted. Is the payment preview if accepting the ticket. The preview will never contain a confirmation password input, because this object already contains it on the `confirmationPasswordInput` property, neither a payment to be sent back, as this payment is supposed to be confirmed by accepting the ticket. Also, the preview's currency is never sent, as it is the same one of the ticket.   # noqa: E501

        :param preview: The preview of this TransactionView.  # noqa: E501
        :type: PaymentPreview
        """

        self._preview = preview

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TransactionView, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TransactionView):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TransactionView):
            return True

        return self.to_dict() != other.to_dict()
