# coding: utf-8

"""
    Cyclos 4.11.5 API

    The REST API for Cyclos 4.11.5  # noqa: E501

    OpenAPI spec version: 4.11.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class TicketsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def accept_ticket(self, ticket, **kwargs):  # noqa: E501
        """This operation is deprecated, use `POST /tickets/{ticket}/approve` instead.  # noqa: E501

        After a successful acceptance a new direct payment from the logged user (i.e the payer) to the user who generated the ticket will be generated ONLY if the ticket doesn't have a `successUrl` nor `successWebhook`. Otherwise the ticket goes to the `approved` status and no  payment is generated.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accept_ticket(ticket, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ticket: The ticket number (required)
        :param list[str] fields: Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`).  
        :param str confirmation_password: The password used to confirm this action, if needed. The actual password type, if any, depends on the Cyclos configuration for the current channel. 
        :return: Transaction
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.accept_ticket_with_http_info(ticket, **kwargs)  # noqa: E501
        else:
            (data) = self.accept_ticket_with_http_info(ticket, **kwargs)  # noqa: E501
            return data

    def accept_ticket_with_http_info(self, ticket, **kwargs):  # noqa: E501
        """This operation is deprecated, use `POST /tickets/{ticket}/approve` instead.  # noqa: E501

        After a successful acceptance a new direct payment from the logged user (i.e the payer) to the user who generated the ticket will be generated ONLY if the ticket doesn't have a `successUrl` nor `successWebhook`. Otherwise the ticket goes to the `approved` status and no  payment is generated.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accept_ticket_with_http_info(ticket, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ticket: The ticket number (required)
        :param list[str] fields: Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`).  
        :param str confirmation_password: The password used to confirm this action, if needed. The actual password type, if any, depends on the Cyclos configuration for the current channel. 
        :return: Transaction
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ticket', 'fields', 'confirmation_password']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accept_ticket" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ticket' is set
        if self.api_client.client_side_validation and ('ticket' not in params or
                                                       params['ticket'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `ticket` when calling `accept_ticket`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ticket' in params:
            path_params['ticket'] = params['ticket']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'multi'  # noqa: E501

        header_params = {}
        if 'confirmation_password' in params:
            header_params['confirmationPassword'] = params['confirmation_password']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['accessClient', 'basic', 'session']  # noqa: E501

        return self.api_client.call_api(
            '/tickets/{ticket}/accept', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Transaction',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def approve_ticket(self, ticket, **kwargs):  # noqa: E501
        """Approves a ticket by the payer.  # noqa: E501

        After a successful approval, a new direct payment from the logged user (i.e the payer) to the user who created the ticket will be generated ONLY if the ticket doesn't have a defined `successUrl` nor `successWebhook`, in that case the ticket goes to `processed` status. Otherwise the ticket just goes to the `approved` status and the corresponding payment will be generated only after the ticket is processed by the receiver.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.approve_ticket(ticket, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ticket: The ticket number (required)
        :param list[str] fields: Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`).  
        :param str confirmation_password: The password used to confirm this action, if needed. The actual password type, if any, depends on the Cyclos configuration for the current channel. 
        :return: TicketApprovalResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.approve_ticket_with_http_info(ticket, **kwargs)  # noqa: E501
        else:
            (data) = self.approve_ticket_with_http_info(ticket, **kwargs)  # noqa: E501
            return data

    def approve_ticket_with_http_info(self, ticket, **kwargs):  # noqa: E501
        """Approves a ticket by the payer.  # noqa: E501

        After a successful approval, a new direct payment from the logged user (i.e the payer) to the user who created the ticket will be generated ONLY if the ticket doesn't have a defined `successUrl` nor `successWebhook`, in that case the ticket goes to `processed` status. Otherwise the ticket just goes to the `approved` status and the corresponding payment will be generated only after the ticket is processed by the receiver.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.approve_ticket_with_http_info(ticket, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ticket: The ticket number (required)
        :param list[str] fields: Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`).  
        :param str confirmation_password: The password used to confirm this action, if needed. The actual password type, if any, depends on the Cyclos configuration for the current channel. 
        :return: TicketApprovalResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ticket', 'fields', 'confirmation_password']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method approve_ticket" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ticket' is set
        if self.api_client.client_side_validation and ('ticket' not in params or
                                                       params['ticket'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `ticket` when calling `approve_ticket`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ticket' in params:
            path_params['ticket'] = params['ticket']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'multi'  # noqa: E501

        header_params = {}
        if 'confirmation_password' in params:
            header_params['confirmationPassword'] = params['confirmation_password']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['accessClient', 'basic', 'session']  # noqa: E501

        return self.api_client.call_api(
            '/tickets/{ticket}/approve', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TicketApprovalResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cancel_ticket(self, ticket, **kwargs):  # noqa: E501
        """Cancels a ticket by the receiver.  # noqa: E501

        Cancels a ticket by the receiver before being approved by the payer. The  logged user must be the ticket's owner.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cancel_ticket(ticket, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ticket: The ticket number (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cancel_ticket_with_http_info(ticket, **kwargs)  # noqa: E501
        else:
            (data) = self.cancel_ticket_with_http_info(ticket, **kwargs)  # noqa: E501
            return data

    def cancel_ticket_with_http_info(self, ticket, **kwargs):  # noqa: E501
        """Cancels a ticket by the receiver.  # noqa: E501

        Cancels a ticket by the receiver before being approved by the payer. The  logged user must be the ticket's owner.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cancel_ticket_with_http_info(ticket, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ticket: The ticket number (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ticket']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cancel_ticket" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ticket' is set
        if self.api_client.client_side_validation and ('ticket' not in params or
                                                       params['ticket'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `ticket` when calling `cancel_ticket`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ticket' in params:
            path_params['ticket'] = params['ticket']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['accessClient', 'basic', 'session']  # noqa: E501

        return self.api_client.call_api(
            '/tickets/{ticket}/cancel', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def data_for_new_ticket(self, **kwargs):  # noqa: E501
        """Returns data for create a new ticket for the logged user.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.data_for_new_ticket(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] fields: Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`).  
        :param str type: The payment type id or qualified internal name (in the form `fromAccountType.paymentType`). If no payment type is provided, the possible types will be returned, so the payer can choose. 
        :param str payer: Will only be used if no specific payment type is given. An identification for the user which will pay the ticket. Is optional, and in most cases, should be left empty. If specified, the returned payment types will take into account those that can be paid by the given user.   
        :return: DataForTransaction
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.data_for_new_ticket_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.data_for_new_ticket_with_http_info(**kwargs)  # noqa: E501
            return data

    def data_for_new_ticket_with_http_info(self, **kwargs):  # noqa: E501
        """Returns data for create a new ticket for the logged user.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.data_for_new_ticket_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] fields: Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`).  
        :param str type: The payment type id or qualified internal name (in the form `fromAccountType.paymentType`). If no payment type is provided, the possible types will be returned, so the payer can choose. 
        :param str payer: Will only be used if no specific payment type is given. An identification for the user which will pay the ticket. Is optional, and in most cases, should be left empty. If specified, the returned payment types will take into account those that can be paid by the given user.   
        :return: DataForTransaction
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['fields', 'type', 'payer']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method data_for_new_ticket" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'multi'  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'payer' in params:
            query_params.append(('payer', params['payer']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/tickets/data-for-new', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DataForTransaction',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_data_for_easy_invoice(self, user, **kwargs):  # noqa: E501
        """Returns data for an easy invoice to the given user   # noqa: E501

        An easy invoice is a pre-filled payment to an user. Other users can use this for a payment template to that user, with pre-filled data. If an amount is specified, then either there must be only payment types of a single currency to the given user, or either a payment type or currency must be informed.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_data_for_easy_invoice(user, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: Can be one of: * a user identification value, such as id, username, e-mail, phone, etc.   Id is always allowed, others depend on Cyclos configuration. Note that   a valid numeric value is always considered as id. For example, when   using another identification method that can be numeric only, prefix   the value with a single quote (like in Excel spreadsheets), for   example, `'1234567890`;     * `self` for the currently authenticated user.  (required)
        :param list[str] fields: Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`).  
        :param BigDecimal amount: The easy invoice amount. If provided and the user has multiple currencies, either `type` or `currency` is required. 
        :param str type: The payment type id or qualified internal name (in the form `fromAccountType.paymentType`). Either this or `currency` should be informed if an `amount` was given and the user has multiple currencies. 
        :param str currency: The currency id or internal name. Either this or `type` should be informed if an `amount` was given and the user has multiple currencies. 
        :param list[str] custom_fields: Custom field values. Is a comma-separated array, where each part consists in two parts: the internal name (or custom field id) of the field, and a value, both separated by : (colon). For example, `customFields=field1:value1,field2:value2`. Sometimes multiple values are accepted. In this case, the multiple values are separated by pipes. For example, profileFields=field1:valueA|valueB. Enumerated fields accept multiple values, while numeric and date fields also accept ranges, which are two values, pipe-separated. For example, `customFields=rank:bronze|silver,birthDate:2000-01-01|2001-12-31` would match results whose custom field with internal name `rank` is either bronze or silver, and whose `birthDate` is between January 1, 2000 and December 31, 2001. To specify a single bound in ranges (like birth dates before December 31, 2001), use a pipe in one of the values, like `customFields=birthDate:|2001-12-31`.       
        :return: DataForEasyInvoice
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_data_for_easy_invoice_with_http_info(user, **kwargs)  # noqa: E501
        else:
            (data) = self.get_data_for_easy_invoice_with_http_info(user, **kwargs)  # noqa: E501
            return data

    def get_data_for_easy_invoice_with_http_info(self, user, **kwargs):  # noqa: E501
        """Returns data for an easy invoice to the given user   # noqa: E501

        An easy invoice is a pre-filled payment to an user. Other users can use this for a payment template to that user, with pre-filled data. If an amount is specified, then either there must be only payment types of a single currency to the given user, or either a payment type or currency must be informed.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_data_for_easy_invoice_with_http_info(user, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: Can be one of: * a user identification value, such as id, username, e-mail, phone, etc.   Id is always allowed, others depend on Cyclos configuration. Note that   a valid numeric value is always considered as id. For example, when   using another identification method that can be numeric only, prefix   the value with a single quote (like in Excel spreadsheets), for   example, `'1234567890`;     * `self` for the currently authenticated user.  (required)
        :param list[str] fields: Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`).  
        :param BigDecimal amount: The easy invoice amount. If provided and the user has multiple currencies, either `type` or `currency` is required. 
        :param str type: The payment type id or qualified internal name (in the form `fromAccountType.paymentType`). Either this or `currency` should be informed if an `amount` was given and the user has multiple currencies. 
        :param str currency: The currency id or internal name. Either this or `type` should be informed if an `amount` was given and the user has multiple currencies. 
        :param list[str] custom_fields: Custom field values. Is a comma-separated array, where each part consists in two parts: the internal name (or custom field id) of the field, and a value, both separated by : (colon). For example, `customFields=field1:value1,field2:value2`. Sometimes multiple values are accepted. In this case, the multiple values are separated by pipes. For example, profileFields=field1:valueA|valueB. Enumerated fields accept multiple values, while numeric and date fields also accept ranges, which are two values, pipe-separated. For example, `customFields=rank:bronze|silver,birthDate:2000-01-01|2001-12-31` would match results whose custom field with internal name `rank` is either bronze or silver, and whose `birthDate` is between January 1, 2000 and December 31, 2001. To specify a single bound in ranges (like birth dates before December 31, 2001), use a pipe in one of the values, like `customFields=birthDate:|2001-12-31`.       
        :return: DataForEasyInvoice
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user', 'fields', 'amount', 'type', 'currency', 'custom_fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_data_for_easy_invoice" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user' is set
        if self.api_client.client_side_validation and ('user' not in params or
                                                       params['user'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user` when calling `get_data_for_easy_invoice`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user' in params:
            path_params['user'] = params['user']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'multi'  # noqa: E501
        if 'amount' in params:
            query_params.append(('amount', params['amount']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'currency' in params:
            query_params.append(('currency', params['currency']))  # noqa: E501
        if 'custom_fields' in params:
            query_params.append(('customFields', params['custom_fields']))  # noqa: E501
            collection_formats['customFields'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/tickets/data-for-easy-invoice/{user}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DataForEasyInvoice',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_easy_invoice_qr_code(self, user, **kwargs):  # noqa: E501
        """Returns a QR-code image with the URL for an easy invoice confirmation   # noqa: E501

        The generated QR-code image contains an URL in the form: `<root>/pay?to=<user>&amount=<amount>...`   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_easy_invoice_qr_code(user, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: The user which will receive the easy invoice. Unlike other cases of user reference, in this case `self` cannot be used, because the URL URL may be shared with others, hence, `self` makes no sense.  (required)
        :param BigDecimal amount: The easy invoice amount. If provided and the user has multiple currencies, either `type` or `currency` is required. 
        :param str type: The payment type id or qualified internal name (in the form `fromAccountType.paymentType`). Either this or `currency` should be informed if an `amount` was given and the user has multiple currencies. 
        :param str currency: The currency id or internal name. Either this or `type` should be informed if an `amount` was given and the user has multiple currencies. 
        :param str description: The easy invoice description
        :param str size: The possible sizes of images. The actual pixel size depends on the configuration in Cyclos Possible values are: * large: Full image size * medium: Medium thumbnail * small: Small thumbnail 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_easy_invoice_qr_code_with_http_info(user, **kwargs)  # noqa: E501
        else:
            (data) = self.get_easy_invoice_qr_code_with_http_info(user, **kwargs)  # noqa: E501
            return data

    def get_easy_invoice_qr_code_with_http_info(self, user, **kwargs):  # noqa: E501
        """Returns a QR-code image with the URL for an easy invoice confirmation   # noqa: E501

        The generated QR-code image contains an URL in the form: `<root>/pay?to=<user>&amount=<amount>...`   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_easy_invoice_qr_code_with_http_info(user, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: The user which will receive the easy invoice. Unlike other cases of user reference, in this case `self` cannot be used, because the URL URL may be shared with others, hence, `self` makes no sense.  (required)
        :param BigDecimal amount: The easy invoice amount. If provided and the user has multiple currencies, either `type` or `currency` is required. 
        :param str type: The payment type id or qualified internal name (in the form `fromAccountType.paymentType`). Either this or `currency` should be informed if an `amount` was given and the user has multiple currencies. 
        :param str currency: The currency id or internal name. Either this or `type` should be informed if an `amount` was given and the user has multiple currencies. 
        :param str description: The easy invoice description
        :param str size: The possible sizes of images. The actual pixel size depends on the configuration in Cyclos Possible values are: * large: Full image size * medium: Medium thumbnail * small: Small thumbnail 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user', 'amount', 'type', 'currency', 'description', 'size']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_easy_invoice_qr_code" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user' is set
        if self.api_client.client_side_validation and ('user' not in params or
                                                       params['user'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user` when calling `get_easy_invoice_qr_code`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user' in params:
            path_params['user'] = params['user']  # noqa: E501

        query_params = []
        if 'amount' in params:
            query_params.append(('amount', params['amount']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'currency' in params:
            query_params.append(('currency', params['currency']))  # noqa: E501
        if 'description' in params:
            query_params.append(('description', params['description']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'image/jpeg', 'image/gif', 'image/png'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/tickets/easy-invoice-qr-code/{user}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_ticket_qr_code(self, ticket, **kwargs):  # noqa: E501
        """Returns the QR-code image for the given ticket only if its status is `open`   # noqa: E501

        This request will return the image contents as expected but our api  documentation page (or any other usage of an &lt;img&gt; tag), created  using swagger-ui, generates a second request to include the image in the page. This new (GET) request won't send the authentication parameters and  as this path requires authentication the image will be shown as broken. Optionally, to solve the problem described above and to allow authenticate the user when using sessions, a `sessionToken` or `accessClientToken`  query parameter could be specified.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ticket_qr_code(ticket, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ticket: The ticket number. (required)
        :param str size: The possible sizes of images. The actual pixel size depends on the configuration in Cyclos Possible values are: * large: Full image size * medium: Medium thumbnail * small: Small thumbnail 
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_ticket_qr_code_with_http_info(ticket, **kwargs)  # noqa: E501
        else:
            (data) = self.get_ticket_qr_code_with_http_info(ticket, **kwargs)  # noqa: E501
            return data

    def get_ticket_qr_code_with_http_info(self, ticket, **kwargs):  # noqa: E501
        """Returns the QR-code image for the given ticket only if its status is `open`   # noqa: E501

        This request will return the image contents as expected but our api  documentation page (or any other usage of an &lt;img&gt; tag), created  using swagger-ui, generates a second request to include the image in the page. This new (GET) request won't send the authentication parameters and  as this path requires authentication the image will be shown as broken. Optionally, to solve the problem described above and to allow authenticate the user when using sessions, a `sessionToken` or `accessClientToken`  query parameter could be specified.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ticket_qr_code_with_http_info(ticket, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ticket: The ticket number. (required)
        :param str size: The possible sizes of images. The actual pixel size depends on the configuration in Cyclos Possible values are: * large: Full image size * medium: Medium thumbnail * small: Small thumbnail 
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ticket', 'size']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_ticket_qr_code" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ticket' is set
        if self.api_client.client_side_validation and ('ticket' not in params or
                                                       params['ticket'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `ticket` when calling `get_ticket_qr_code`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ticket' in params:
            path_params['ticket'] = params['ticket']  # noqa: E501

        query_params = []
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'image/jpeg', 'image/gif', 'image/png'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/tickets/{ticket}/qr-code', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='file',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def new_ticket(self, ticket, **kwargs):  # noqa: E501
        """Creates a new ticket with status `open` for the logged user.   # noqa: E501

        The logged user will be the ticket's owner and then the receiver of the  payment generated after processing the ticket only if was previously approved by the payer.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.new_ticket(ticket, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TicketNew ticket: The data to create the new ticket (required)
        :param list[str] fields: Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`).  
        :return: Transaction
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.new_ticket_with_http_info(ticket, **kwargs)  # noqa: E501
        else:
            (data) = self.new_ticket_with_http_info(ticket, **kwargs)  # noqa: E501
            return data

    def new_ticket_with_http_info(self, ticket, **kwargs):  # noqa: E501
        """Creates a new ticket with status `open` for the logged user.   # noqa: E501

        The logged user will be the ticket's owner and then the receiver of the  payment generated after processing the ticket only if was previously approved by the payer.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.new_ticket_with_http_info(ticket, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TicketNew ticket: The data to create the new ticket (required)
        :param list[str] fields: Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`).  
        :return: Transaction
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ticket', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method new_ticket" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ticket' is set
        if self.api_client.client_side_validation and ('ticket' not in params or
                                                       params['ticket'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `ticket` when calling `new_ticket`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'ticket' in params:
            body_params = params['ticket']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['accessClient', 'basic', 'session']  # noqa: E501

        return self.api_client.call_api(
            '/tickets', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Transaction',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def preview_ticket(self, ticket, **kwargs):  # noqa: E501
        """Previews the payment generated by the ticket.   # noqa: E501

        Previews the payment that will be generated if the ticket is approved by a user (i.e the payer). The ticket status must be  `open` and `successUrl` null or  `approved`. The actual balance checking is not  performed in the preview.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.preview_ticket(ticket, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ticket: The ticket number (required)
        :param list[str] fields: Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`).  
        :return: TicketPreview
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.preview_ticket_with_http_info(ticket, **kwargs)  # noqa: E501
        else:
            (data) = self.preview_ticket_with_http_info(ticket, **kwargs)  # noqa: E501
            return data

    def preview_ticket_with_http_info(self, ticket, **kwargs):  # noqa: E501
        """Previews the payment generated by the ticket.   # noqa: E501

        Previews the payment that will be generated if the ticket is approved by a user (i.e the payer). The ticket status must be  `open` and `successUrl` null or  `approved`. The actual balance checking is not  performed in the preview.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.preview_ticket_with_http_info(ticket, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ticket: The ticket number (required)
        :param list[str] fields: Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`).  
        :return: TicketPreview
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ticket', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method preview_ticket" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ticket' is set
        if self.api_client.client_side_validation and ('ticket' not in params or
                                                       params['ticket'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `ticket` when calling `preview_ticket`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ticket' in params:
            path_params['ticket'] = params['ticket']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['accessClient', 'basic', 'session']  # noqa: E501

        return self.api_client.call_api(
            '/tickets/{ticket}/preview', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TicketPreview',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def process_ticket(self, ticket, **kwargs):  # noqa: E501
        """Processes a ticket by the receiver.  # noqa: E501

        Processes an already approved ticket generating a new direct payment from the user who approve the ticket to the logged user (i.e the ticket's creator). A ticket can be processed only if its status is `approved` and the `orderId` (if any) matches the one given at ticket creation. After successfully processing it goes to the final status:  `processed`.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.process_ticket(ticket, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ticket: The ticket number (required)
        :param list[str] fields: Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`).  
        :param str order_id: The order id given at ticket creation. Must be specified only if an `orderId` was given when the ticket was created.   
        :return: TicketProcessResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.process_ticket_with_http_info(ticket, **kwargs)  # noqa: E501
        else:
            (data) = self.process_ticket_with_http_info(ticket, **kwargs)  # noqa: E501
            return data

    def process_ticket_with_http_info(self, ticket, **kwargs):  # noqa: E501
        """Processes a ticket by the receiver.  # noqa: E501

        Processes an already approved ticket generating a new direct payment from the user who approve the ticket to the logged user (i.e the ticket's creator). A ticket can be processed only if its status is `approved` and the `orderId` (if any) matches the one given at ticket creation. After successfully processing it goes to the final status:  `processed`.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.process_ticket_with_http_info(ticket, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ticket: The ticket number (required)
        :param list[str] fields: Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`).  
        :param str order_id: The order id given at ticket creation. Must be specified only if an `orderId` was given when the ticket was created.   
        :return: TicketProcessResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ticket', 'fields', 'order_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method process_ticket" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ticket' is set
        if self.api_client.client_side_validation and ('ticket' not in params or
                                                       params['ticket'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `ticket` when calling `process_ticket`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ticket' in params:
            path_params['ticket'] = params['ticket']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'multi'  # noqa: E501
        if 'order_id' in params:
            query_params.append(('orderId', params['order_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['accessClient', 'basic', 'session']  # noqa: E501

        return self.api_client.call_api(
            '/tickets/{ticket}/process', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TicketProcessResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def view_ticket(self, ticket, **kwargs):  # noqa: E501
        """Returns details about a ticket by ticket number  # noqa: E501

        Returns details about a ticket by ticket number.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.view_ticket(ticket, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ticket: The ticket number (required)
        :param list[str] fields: Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`).  
        :return: TransactionView
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.view_ticket_with_http_info(ticket, **kwargs)  # noqa: E501
        else:
            (data) = self.view_ticket_with_http_info(ticket, **kwargs)  # noqa: E501
            return data

    def view_ticket_with_http_info(self, ticket, **kwargs):  # noqa: E501
        """Returns details about a ticket by ticket number  # noqa: E501

        Returns details about a ticket by ticket number.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.view_ticket_with_http_info(ticket, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ticket: The ticket number (required)
        :param list[str] fields: Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`).  
        :return: TransactionView
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ticket', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method view_ticket" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ticket' is set
        if self.api_client.client_side_validation and ('ticket' not in params or
                                                       params['ticket'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `ticket` when calling `view_ticket`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ticket' in params:
            path_params['ticket'] = params['ticket']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/tickets/{ticket}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TransactionView',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
