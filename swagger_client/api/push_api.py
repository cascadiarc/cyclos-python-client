# coding: utf-8

"""
    Cyclos 4.11.5 API

    The REST API for Cyclos 4.11.5  # noqa: E501

    OpenAPI spec version: 4.11.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class PushApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def subscribe_for_push_notifications(self, client_id, kinds, **kwargs):  # noqa: E501
        """Subscribes for receiving push notifications of specific types  # noqa: E501

        Returns an event stream of server-sent events  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.subscribe_for_push_notifications(client_id, kinds, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: An id generated by the client. This id is valid for the authenticated used, indicating a single session. As event streams can timeout and be reconnected, subsequent subscriptions with the same user and client id are considered the same subscription, and missed events since the last timeout will be immediately delivered. Missed events are enqueued up to a few minutes after the connection timeout. After that window, any enqueued events are discarded.  (required)
        :param list[str] kinds: The event kinds for which the client desires to subscribe Possible values for each array element are: * accountStatus: The account status (balance, reserved amount, etc) has changed * loggedOut: The current session has been invalidated * newMessage: New message on the user's inbox * newNotification: New received notification * ticket: A ticket status has changed  (required)
        :param list[str] account_ids: When subscribing to `accountStatus` events, this parameter must be informed to select the accounts to be watched for. 
        :param str ticket_number: When subscribing to `ticket` events, this parameter can be used to filter which ticket to monitor. 
        :param str last_event_id: The last received event id, in case of reconnections. May also be passed as the standard header `Last-Event-ID`. 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.subscribe_for_push_notifications_with_http_info(client_id, kinds, **kwargs)  # noqa: E501
        else:
            (data) = self.subscribe_for_push_notifications_with_http_info(client_id, kinds, **kwargs)  # noqa: E501
            return data

    def subscribe_for_push_notifications_with_http_info(self, client_id, kinds, **kwargs):  # noqa: E501
        """Subscribes for receiving push notifications of specific types  # noqa: E501

        Returns an event stream of server-sent events  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.subscribe_for_push_notifications_with_http_info(client_id, kinds, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: An id generated by the client. This id is valid for the authenticated used, indicating a single session. As event streams can timeout and be reconnected, subsequent subscriptions with the same user and client id are considered the same subscription, and missed events since the last timeout will be immediately delivered. Missed events are enqueued up to a few minutes after the connection timeout. After that window, any enqueued events are discarded.  (required)
        :param list[str] kinds: The event kinds for which the client desires to subscribe Possible values for each array element are: * accountStatus: The account status (balance, reserved amount, etc) has changed * loggedOut: The current session has been invalidated * newMessage: New message on the user's inbox * newNotification: New received notification * ticket: A ticket status has changed  (required)
        :param list[str] account_ids: When subscribing to `accountStatus` events, this parameter must be informed to select the accounts to be watched for. 
        :param str ticket_number: When subscribing to `ticket` events, this parameter can be used to filter which ticket to monitor. 
        :param str last_event_id: The last received event id, in case of reconnections. May also be passed as the standard header `Last-Event-ID`. 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['client_id', 'kinds', 'account_ids', 'ticket_number', 'last_event_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method subscribe_for_push_notifications" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'client_id' is set
        if self.api_client.client_side_validation and ('client_id' not in params or
                                                       params['client_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `client_id` when calling `subscribe_for_push_notifications`")  # noqa: E501
        # verify the required parameter 'kinds' is set
        if self.api_client.client_side_validation and ('kinds' not in params or
                                                       params['kinds'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `kinds` when calling `subscribe_for_push_notifications`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'client_id' in params:
            query_params.append(('clientId', params['client_id']))  # noqa: E501
        if 'kinds' in params:
            query_params.append(('kinds', params['kinds']))  # noqa: E501
            collection_formats['kinds'] = 'csv'  # noqa: E501
        if 'account_ids' in params:
            query_params.append(('accountIds', params['account_ids']))  # noqa: E501
            collection_formats['accountIds'] = 'csv'  # noqa: E501
        if 'ticket_number' in params:
            query_params.append(('ticketNumber', params['ticket_number']))  # noqa: E501

        header_params = {}
        if 'last_event_id' in params:
            header_params['lastEventId'] = params['last_event_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/event-stream'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/push/subscribe', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
