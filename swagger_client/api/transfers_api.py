# coding: utf-8

"""
    Cyclos 4.11.5 API

    The REST API for Cyclos 4.11.5  # noqa: E501

    OpenAPI spec version: 4.11.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class TransfersApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def chargeback_transfer(self, key, **kwargs):  # noqa: E501
        """Perform the chargeback of a transfer  # noqa: E501

        The chargeback generates a new transaction with `kind` = `chargeback`. A new transfer is generated with the same from / to, and negative amount. This will effectively return the amount to the original account. Only top-level transfers can be charged back. For example, a transfer used to charge a fee cannot be charged back. Also, the hability to chargeback a transfer depends on permissions and configuration like the maximum allowed time for the chargeback.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.chargeback_transfer(key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str key: Either the id or transaction number (required)
        :param str confirmation_password: The password used to confirm this action, if needed. The actual password type, if any, depends on the Cyclos configuration for the current channel. 
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.chargeback_transfer_with_http_info(key, **kwargs)  # noqa: E501
        else:
            (data) = self.chargeback_transfer_with_http_info(key, **kwargs)  # noqa: E501
            return data

    def chargeback_transfer_with_http_info(self, key, **kwargs):  # noqa: E501
        """Perform the chargeback of a transfer  # noqa: E501

        The chargeback generates a new transaction with `kind` = `chargeback`. A new transfer is generated with the same from / to, and negative amount. This will effectively return the amount to the original account. Only top-level transfers can be charged back. For example, a transfer used to charge a fee cannot be charged back. Also, the hability to chargeback a transfer depends on permissions and configuration like the maximum allowed time for the chargeback.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.chargeback_transfer_with_http_info(key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str key: Either the id or transaction number (required)
        :param str confirmation_password: The password used to confirm this action, if needed. The actual password type, if any, depends on the Cyclos configuration for the current channel. 
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['key', 'confirmation_password']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method chargeback_transfer" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'key' is set
        if self.api_client.client_side_validation and ('key' not in params or
                                                       params['key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `key` when calling `chargeback_transfer`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'key' in params:
            path_params['key'] = params['key']  # noqa: E501

        query_params = []

        header_params = {}
        if 'confirmation_password' in params:
            header_params['confirmationPassword'] = params['confirmation_password']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = ['accessClient', 'basic', 'session']  # noqa: E501

        return self.api_client.call_api(
            '/transfers/{key}/chargeback', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_transfer_data_for_search(self, **kwargs):  # noqa: E501
        """Returns data for searching transfers over multiple accounts  # noqa: E501

        Returns configuration data for searching transfers over multiple accounts. This operation can only be performed by administrators or brokers over managed users.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_transfer_data_for_search(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] fields: Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`).  
        :return: TransferDataForSearch
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_transfer_data_for_search_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_transfer_data_for_search_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_transfer_data_for_search_with_http_info(self, **kwargs):  # noqa: E501
        """Returns data for searching transfers over multiple accounts  # noqa: E501

        Returns configuration data for searching transfers over multiple accounts. This operation can only be performed by administrators or brokers over managed users.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_transfer_data_for_search_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] fields: Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`).  
        :return: TransferDataForSearch
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_transfer_data_for_search" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['accessClient', 'basic', 'session']  # noqa: E501

        return self.api_client.call_api(
            '/transfers/data-for-search', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TransferDataForSearch',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def search_transfers(self, **kwargs):  # noqa: E501
        """Searches for transfers over multiple accounts  # noqa: E501

        Searches for transfers over multiple accounts. This operation can only be performed by administrators or brokers over managed users.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_transfers(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] fields: Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`).  
        :param list[str] access_clients: References to access clients (id or token) used to perform / receive the  transfer. 
        :param list[BigDecimal] amount_range: The minimum / maximum amount. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. 
        :param str broker: Reference to the broker of users involved in transfers. Is only taken into account if authenticated as administrator. 
        :param str by: Reference to the user that was authenticated when the transfer was performed. Is only taken into account if authenticated as administrator. 
        :param list[str] channels: Reference to the channel used to perform / receive the transfer. Only taken into account if authenticated as administrator. 
        :param bool charged_back: When set to either `true` will only return transfers that were charged-back. When set to `false`, will only return transfers that were not charged-back. When left blank will not filter by this creterion. 
        :param str currency: Either id or internal name of the currency 
        :param list[datetime] date_period: The minimum / maximum transfer date. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. 
        :param list[str] excluded_ids: List of transfers ids to be excluded from the result. 
        :param str from_account_type: Either id or internal name of the origin account type 
        :param bool from_current_access_client: Flag indicating whether to include only transfers by the current access client. 
        :param list[str] groups: Reference to the user group used to perform / receive the transfer. Only taken into account if authenticated as administrator. 
        :param bool include_generated_by_access_client: Flag indicating whether to include or not the generated transfer. Only valid if there is at least one access client specified. For example if a `ticket` or `paymentRequest` was processed then a new transfer will be generated. 
        :param str order_by: Contains the possible 'order by' values when searching for transfers  Possible values are: * amountAsc: The result is ordered by amount descendant * amountDesc: The result is ordered by amount descendant * dateAsc: The result is ordered by date ascendant * dateDesc: The result is ordered by date descendant 
        :param int page: The page number (zero-based) of the search. The default value is zero. 
        :param int page_size: The maximum number of records that will be returned on the search. The default value is 40. The maximum number of returned results is configured in Cyclos, and even if more than that is requested, it will be limited by that setting. 
        :param list[str] statuses: Transfer statuses used as search criteria. Each array element should be either the identifier or the status qualified internal name, composed by flow internal name, a dot, and the status internal name. For example, `loan.open` would be a valid internal name. 
        :param str to_account_type: Either id or internal name of the destination account type 
        :param str transaction_number: The transaction number of the matching transfer 
        :param list[str] transfer_filters: Reference to the transfer filters, which filters transfers by type. May be either the internal id or qualified transfer filter internal name, in the format `accountType.transferFilter`. 
        :param list[str] transfer_kinds: Indicates the reason the transfer was created Possible values for each array element are: * accountFee: A transfer generated by an account fee charge * chargeback: A transfer which is a chargeback of another transfer * import: An imported transfer * initialCredit: A transfer which is the initial credit for a newly created account * payment: A transfer generated by a direct payment or accepting a webshop order * recurringPayment: A transfer generated when processing a recurring payment * scheduledPaymentInstallment: A transfer generated when processing a scheduled payment installment * transferFee: A transfer generated by a transfer fee charge 
        :param list[str] transfer_types: Reference to the transfer types for filter. May be either the internal id or qualified transfer type internal name, in the format `accountType.transferType`. 
        :param str user: Reference a user that should have either received / performed the transfer. 
        :return: list[TransferResult]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.search_transfers_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.search_transfers_with_http_info(**kwargs)  # noqa: E501
            return data

    def search_transfers_with_http_info(self, **kwargs):  # noqa: E501
        """Searches for transfers over multiple accounts  # noqa: E501

        Searches for transfers over multiple accounts. This operation can only be performed by administrators or brokers over managed users.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_transfers_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] fields: Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`).  
        :param list[str] access_clients: References to access clients (id or token) used to perform / receive the  transfer. 
        :param list[BigDecimal] amount_range: The minimum / maximum amount. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. 
        :param str broker: Reference to the broker of users involved in transfers. Is only taken into account if authenticated as administrator. 
        :param str by: Reference to the user that was authenticated when the transfer was performed. Is only taken into account if authenticated as administrator. 
        :param list[str] channels: Reference to the channel used to perform / receive the transfer. Only taken into account if authenticated as administrator. 
        :param bool charged_back: When set to either `true` will only return transfers that were charged-back. When set to `false`, will only return transfers that were not charged-back. When left blank will not filter by this creterion. 
        :param str currency: Either id or internal name of the currency 
        :param list[datetime] date_period: The minimum / maximum transfer date. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. 
        :param list[str] excluded_ids: List of transfers ids to be excluded from the result. 
        :param str from_account_type: Either id or internal name of the origin account type 
        :param bool from_current_access_client: Flag indicating whether to include only transfers by the current access client. 
        :param list[str] groups: Reference to the user group used to perform / receive the transfer. Only taken into account if authenticated as administrator. 
        :param bool include_generated_by_access_client: Flag indicating whether to include or not the generated transfer. Only valid if there is at least one access client specified. For example if a `ticket` or `paymentRequest` was processed then a new transfer will be generated. 
        :param str order_by: Contains the possible 'order by' values when searching for transfers  Possible values are: * amountAsc: The result is ordered by amount descendant * amountDesc: The result is ordered by amount descendant * dateAsc: The result is ordered by date ascendant * dateDesc: The result is ordered by date descendant 
        :param int page: The page number (zero-based) of the search. The default value is zero. 
        :param int page_size: The maximum number of records that will be returned on the search. The default value is 40. The maximum number of returned results is configured in Cyclos, and even if more than that is requested, it will be limited by that setting. 
        :param list[str] statuses: Transfer statuses used as search criteria. Each array element should be either the identifier or the status qualified internal name, composed by flow internal name, a dot, and the status internal name. For example, `loan.open` would be a valid internal name. 
        :param str to_account_type: Either id or internal name of the destination account type 
        :param str transaction_number: The transaction number of the matching transfer 
        :param list[str] transfer_filters: Reference to the transfer filters, which filters transfers by type. May be either the internal id or qualified transfer filter internal name, in the format `accountType.transferFilter`. 
        :param list[str] transfer_kinds: Indicates the reason the transfer was created Possible values for each array element are: * accountFee: A transfer generated by an account fee charge * chargeback: A transfer which is a chargeback of another transfer * import: An imported transfer * initialCredit: A transfer which is the initial credit for a newly created account * payment: A transfer generated by a direct payment or accepting a webshop order * recurringPayment: A transfer generated when processing a recurring payment * scheduledPaymentInstallment: A transfer generated when processing a scheduled payment installment * transferFee: A transfer generated by a transfer fee charge 
        :param list[str] transfer_types: Reference to the transfer types for filter. May be either the internal id or qualified transfer type internal name, in the format `accountType.transferType`. 
        :param str user: Reference a user that should have either received / performed the transfer. 
        :return: list[TransferResult]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['fields', 'access_clients', 'amount_range', 'broker', 'by', 'channels', 'charged_back', 'currency', 'date_period', 'excluded_ids', 'from_account_type', 'from_current_access_client', 'groups', 'include_generated_by_access_client', 'order_by', 'page', 'page_size', 'statuses', 'to_account_type', 'transaction_number', 'transfer_filters', 'transfer_kinds', 'transfer_types', 'user']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_transfers" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'multi'  # noqa: E501
        if 'access_clients' in params:
            query_params.append(('accessClients', params['access_clients']))  # noqa: E501
            collection_formats['accessClients'] = 'csv'  # noqa: E501
        if 'amount_range' in params:
            query_params.append(('amountRange', params['amount_range']))  # noqa: E501
            collection_formats['amountRange'] = 'csv'  # noqa: E501
        if 'broker' in params:
            query_params.append(('broker', params['broker']))  # noqa: E501
        if 'by' in params:
            query_params.append(('by', params['by']))  # noqa: E501
        if 'channels' in params:
            query_params.append(('channels', params['channels']))  # noqa: E501
            collection_formats['channels'] = 'csv'  # noqa: E501
        if 'charged_back' in params:
            query_params.append(('chargedBack', params['charged_back']))  # noqa: E501
        if 'currency' in params:
            query_params.append(('currency', params['currency']))  # noqa: E501
        if 'date_period' in params:
            query_params.append(('datePeriod', params['date_period']))  # noqa: E501
            collection_formats['datePeriod'] = 'csv'  # noqa: E501
        if 'excluded_ids' in params:
            query_params.append(('excludedIds', params['excluded_ids']))  # noqa: E501
            collection_formats['excludedIds'] = 'csv'  # noqa: E501
        if 'from_account_type' in params:
            query_params.append(('fromAccountType', params['from_account_type']))  # noqa: E501
        if 'from_current_access_client' in params:
            query_params.append(('fromCurrentAccessClient', params['from_current_access_client']))  # noqa: E501
        if 'groups' in params:
            query_params.append(('groups', params['groups']))  # noqa: E501
            collection_formats['groups'] = 'csv'  # noqa: E501
        if 'include_generated_by_access_client' in params:
            query_params.append(('includeGeneratedByAccessClient', params['include_generated_by_access_client']))  # noqa: E501
        if 'order_by' in params:
            query_params.append(('orderBy', params['order_by']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))  # noqa: E501
        if 'statuses' in params:
            query_params.append(('statuses', params['statuses']))  # noqa: E501
            collection_formats['statuses'] = 'csv'  # noqa: E501
        if 'to_account_type' in params:
            query_params.append(('toAccountType', params['to_account_type']))  # noqa: E501
        if 'transaction_number' in params:
            query_params.append(('transactionNumber', params['transaction_number']))  # noqa: E501
        if 'transfer_filters' in params:
            query_params.append(('transferFilters', params['transfer_filters']))  # noqa: E501
            collection_formats['transferFilters'] = 'csv'  # noqa: E501
        if 'transfer_kinds' in params:
            query_params.append(('transferKinds', params['transfer_kinds']))  # noqa: E501
            collection_formats['transferKinds'] = 'csv'  # noqa: E501
        if 'transfer_types' in params:
            query_params.append(('transferTypes', params['transfer_types']))  # noqa: E501
            collection_formats['transferTypes'] = 'csv'  # noqa: E501
        if 'user' in params:
            query_params.append(('user', params['user']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['accessClient', 'basic', 'session']  # noqa: E501

        return self.api_client.call_api(
            '/transfers', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[TransferResult]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def view_transfer(self, key, **kwargs):  # noqa: E501
        """Returns details about a transfer  # noqa: E501

        Returns details about a transfer.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.view_transfer(key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str key: Either the id or transaction number (required)
        :param list[str] fields: Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`).  
        :return: TransferView
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.view_transfer_with_http_info(key, **kwargs)  # noqa: E501
        else:
            (data) = self.view_transfer_with_http_info(key, **kwargs)  # noqa: E501
            return data

    def view_transfer_with_http_info(self, key, **kwargs):  # noqa: E501
        """Returns details about a transfer  # noqa: E501

        Returns details about a transfer.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.view_transfer_with_http_info(key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str key: Either the id or transaction number (required)
        :param list[str] fields: Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`).  
        :return: TransferView
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['key', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method view_transfer" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'key' is set
        if self.api_client.client_side_validation and ('key' not in params or
                                                       params['key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `key` when calling `view_transfer`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'key' in params:
            path_params['key'] = params['key']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['accessClient', 'basic', 'session']  # noqa: E501

        return self.api_client.call_api(
            '/transfers/{key}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TransferView',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
