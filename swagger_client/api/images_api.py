# coding: utf-8

"""
    Cyclos 4.11.5 API

    The REST API for Cyclos 4.11.5  # noqa: E501

    OpenAPI spec version: 4.11.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class ImagesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_image(self, id_or_key, **kwargs):  # noqa: E501
        """Removes an image by id or key  # noqa: E501

        Removes the image with the given internal id or key. Any image kind can be removed using this operation, but the authenticated user needs the appropriate permission to do so.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_image(id_or_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_or_key: The image id or file name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_image_with_http_info(id_or_key, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_image_with_http_info(id_or_key, **kwargs)  # noqa: E501
            return data

    def delete_image_with_http_info(self, id_or_key, **kwargs):  # noqa: E501
        """Removes an image by id or key  # noqa: E501

        Removes the image with the given internal id or key. Any image kind can be removed using this operation, but the authenticated user needs the appropriate permission to do so.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_image_with_http_info(id_or_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_or_key: The image id or file name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_or_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_image" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id_or_key' is set
        if self.api_client.client_side_validation and ('id_or_key' not in params or
                                                       params['id_or_key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id_or_key` when calling `delete_image`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_or_key' in params:
            path_params['idOrKey'] = params['id_or_key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/images/{idOrKey}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_ad_images_list_data(self, ad, **kwargs):  # noqa: E501
        """Returns the images of an advertisement, plus additional permissions and data    # noqa: E501

        Returns the images of an advertisement. Additional data, such as the maximum images and whether the images can be managed by the authenticated user are also returned.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ad_images_list_data(ad, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ad: Can be either the advertisement internal identifier or, in case of webshop advertisements, can be the product number (if the owner is the logged user) or a string in the form `productNumber@user`, with the user identifier as well.       (required)
        :param list[str] fields: Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`).  
        :return: ImagesListData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_ad_images_list_data_with_http_info(ad, **kwargs)  # noqa: E501
        else:
            (data) = self.get_ad_images_list_data_with_http_info(ad, **kwargs)  # noqa: E501
            return data

    def get_ad_images_list_data_with_http_info(self, ad, **kwargs):  # noqa: E501
        """Returns the images of an advertisement, plus additional permissions and data    # noqa: E501

        Returns the images of an advertisement. Additional data, such as the maximum images and whether the images can be managed by the authenticated user are also returned.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ad_images_list_data_with_http_info(ad, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ad: Can be either the advertisement internal identifier or, in case of webshop advertisements, can be the product number (if the owner is the logged user) or a string in the form `productNumber@user`, with the user identifier as well.       (required)
        :param list[str] fields: Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`).  
        :return: ImagesListData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ad', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_ad_images_list_data" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ad' is set
        if self.api_client.client_side_validation and ('ad' not in params or
                                                       params['ad'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `ad` when calling `get_ad_images_list_data`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ad' in params:
            path_params['ad'] = params['ad']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['accessClient', 'basic', 'session']  # noqa: E501

        return self.api_client.call_api(
            '/marketplace/{ad}/images/list-data', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ImagesListData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_image_content(self, id_or_key, **kwargs):  # noqa: E501
        """Returns an image content by id or key  # noqa: E501

        Returns the content of an image, given the image identifier or key. When neither `width` nor `height` are specified, returns the original content. The original ratio is always maintained. When only of one of  the dimensions is specified, it is used as maximum, and the other is calculated. When both are informed, the maximum size with the original ratio that fits both dimensions is used.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_image_content(id_or_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_or_key: The image id or file name (required)
        :param int width: The requested image width
        :param int height: The requested file height
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_image_content_with_http_info(id_or_key, **kwargs)  # noqa: E501
        else:
            (data) = self.get_image_content_with_http_info(id_or_key, **kwargs)  # noqa: E501
            return data

    def get_image_content_with_http_info(self, id_or_key, **kwargs):  # noqa: E501
        """Returns an image content by id or key  # noqa: E501

        Returns the content of an image, given the image identifier or key. When neither `width` nor `height` are specified, returns the original content. The original ratio is always maintained. When only of one of  the dimensions is specified, it is used as maximum, and the other is calculated. When both are informed, the maximum size with the original ratio that fits both dimensions is used.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_image_content_with_http_info(id_or_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_or_key: The image id or file name (required)
        :param int width: The requested image width
        :param int height: The requested file height
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_or_key', 'width', 'height']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_image_content" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id_or_key' is set
        if self.api_client.client_side_validation and ('id_or_key' not in params or
                                                       params['id_or_key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id_or_key` when calling `get_image_content`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_or_key' in params:
            path_params['idOrKey'] = params['id_or_key']  # noqa: E501

        query_params = []
        if 'width' in params:
            query_params.append(('width', params['width']))  # noqa: E501
        if 'height' in params:
            query_params.append(('height', params['height']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'image/jpeg', 'image/gif', 'image/png'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/images/content/{idOrKey}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='file',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_image_content_by_id(self, id, **kwargs):  # noqa: E501
        """(deprecated) Returns an image content by id  # noqa: E501

        Returns the content of an image, given the image id. When neither `width` nor `height` are specified, returns the original content. The original ratio is always maintained. When only of one of  the dimensions is specified, it is used as maximum, and the other is calculated. When both are informed, the maximum size with the original ratio that fits both dimensions is used.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_image_content_by_id(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The object identification (required)
        :param int width: The requested image width
        :param int height: The requested file height
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_image_content_by_id_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_image_content_by_id_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_image_content_by_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """(deprecated) Returns an image content by id  # noqa: E501

        Returns the content of an image, given the image id. When neither `width` nor `height` are specified, returns the original content. The original ratio is always maintained. When only of one of  the dimensions is specified, it is used as maximum, and the other is calculated. When both are informed, the maximum size with the original ratio that fits both dimensions is used.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_image_content_by_id_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The object identification (required)
        :param int width: The requested image width
        :param int height: The requested file height
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'width', 'height']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_image_content_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `get_image_content_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'width' in params:
            query_params.append(('width', params['width']))  # noqa: E501
        if 'height' in params:
            query_params.append(('height', params['height']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'image/jpeg', 'image/gif', 'image/png'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/images/{id}/content', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='file',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_image_content_deprecated(self, kind, file, **kwargs):  # noqa: E501
        """Returns an image content  # noqa: E501

        (deprecated) Returns the content of an image, given the image kind and key. When neither `width` nor `height` are specified, returns the original content. The original ratio is always maintained. When only of one of  the dimensions is specified, it is used as maximum, and the other is calculated. When both are informed, the maximum size with the original ratio that fits both dimensions is used.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_image_content_deprecated(kind, file, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str kind: Determines the kind of an image Possible values are: * contactInfo: An image of an additional contact information * customFieldValue: An image used as custom field value * marketplace: Advertisement images are associated with an advertisement, be it simple or for web shop. * marketplaceCategory: An image of an advertisement (simple or webshop) * profile: User profile images are those associated with the user profile. The first profile image is used to depict the user on search results. * systemCustom: System custom images are additional images an administrator that can be used on rich text contents. * temp: A temporary image which can upload for later associating with an entity being registered (for example, user or advertisement). * userCustom: User custom images are additional images that can be used on rich text contents. * voucherType: An image of a voucher type  (required)
        :param str file: The file name. This is not the original uploaded file name, but a generated one.  (required)
        :param int width: The requested image width
        :param int height: The requested file height
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_image_content_deprecated_with_http_info(kind, file, **kwargs)  # noqa: E501
        else:
            (data) = self.get_image_content_deprecated_with_http_info(kind, file, **kwargs)  # noqa: E501
            return data

    def get_image_content_deprecated_with_http_info(self, kind, file, **kwargs):  # noqa: E501
        """Returns an image content  # noqa: E501

        (deprecated) Returns the content of an image, given the image kind and key. When neither `width` nor `height` are specified, returns the original content. The original ratio is always maintained. When only of one of  the dimensions is specified, it is used as maximum, and the other is calculated. When both are informed, the maximum size with the original ratio that fits both dimensions is used.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_image_content_deprecated_with_http_info(kind, file, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str kind: Determines the kind of an image Possible values are: * contactInfo: An image of an additional contact information * customFieldValue: An image used as custom field value * marketplace: Advertisement images are associated with an advertisement, be it simple or for web shop. * marketplaceCategory: An image of an advertisement (simple or webshop) * profile: User profile images are those associated with the user profile. The first profile image is used to depict the user on search results. * systemCustom: System custom images are additional images an administrator that can be used on rich text contents. * temp: A temporary image which can upload for later associating with an entity being registered (for example, user or advertisement). * userCustom: User custom images are additional images that can be used on rich text contents. * voucherType: An image of a voucher type  (required)
        :param str file: The file name. This is not the original uploaded file name, but a generated one.  (required)
        :param int width: The requested image width
        :param int height: The requested file height
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['kind', 'file', 'width', 'height']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_image_content_deprecated" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'kind' is set
        if self.api_client.client_side_validation and ('kind' not in params or
                                                       params['kind'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `kind` when calling `get_image_content_deprecated`")  # noqa: E501
        # verify the required parameter 'file' is set
        if self.api_client.client_side_validation and ('file' not in params or
                                                       params['file'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `file` when calling `get_image_content_deprecated`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'kind' in params:
            path_params['kind'] = params['kind']  # noqa: E501
        if 'file' in params:
            path_params['file'] = params['file']  # noqa: E501

        query_params = []
        if 'width' in params:
            query_params.append(('width', params['width']))  # noqa: E501
        if 'height' in params:
            query_params.append(('height', params['height']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'image/jpeg', 'image/gif', 'image/png'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/images/{kind}/{file}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='file',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_user_images_list_data(self, user, **kwargs):  # noqa: E501
        """Returns either `profile` or `custom` images for a given user, plus additional permissions and data    # noqa: E501

        Returns either `profile` or `custom` images for the given user. For `profile`, the user must be visible by the authenticated user. For `custom`, the authenticated user must either be the owner or a manager (administrator or broker). Custom images are used in rich text content, not images for custom fields. Additional data, such as the maximum images and whether the images can be managed by the authenticated user are also returned.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_images_list_data(user, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: Can be one of: * a user identification value, such as id, username, e-mail, phone, etc.   Id is always allowed, others depend on Cyclos configuration. Note that   a valid numeric value is always considered as id. For example, when   using another identification method that can be numeric only, prefix   the value with a single quote (like in Excel spreadsheets), for   example, `'1234567890`;     * `self` for the currently authenticated user.  (required)
        :param list[str] fields: Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`).  
        :param str kind: The kind of images to be returned.   The default value is `profile` Possible values are: * custom: User custom images are additional images that can be used on rich text contents. * profile: User profile images are those associated with the user profile. The first profile image is used to depict the user on search results. 
        :return: ImagesListData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_user_images_list_data_with_http_info(user, **kwargs)  # noqa: E501
        else:
            (data) = self.get_user_images_list_data_with_http_info(user, **kwargs)  # noqa: E501
            return data

    def get_user_images_list_data_with_http_info(self, user, **kwargs):  # noqa: E501
        """Returns either `profile` or `custom` images for a given user, plus additional permissions and data    # noqa: E501

        Returns either `profile` or `custom` images for the given user. For `profile`, the user must be visible by the authenticated user. For `custom`, the authenticated user must either be the owner or a manager (administrator or broker). Custom images are used in rich text content, not images for custom fields. Additional data, such as the maximum images and whether the images can be managed by the authenticated user are also returned.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_images_list_data_with_http_info(user, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: Can be one of: * a user identification value, such as id, username, e-mail, phone, etc.   Id is always allowed, others depend on Cyclos configuration. Note that   a valid numeric value is always considered as id. For example, when   using another identification method that can be numeric only, prefix   the value with a single quote (like in Excel spreadsheets), for   example, `'1234567890`;     * `self` for the currently authenticated user.  (required)
        :param list[str] fields: Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`).  
        :param str kind: The kind of images to be returned.   The default value is `profile` Possible values are: * custom: User custom images are additional images that can be used on rich text contents. * profile: User profile images are those associated with the user profile. The first profile image is used to depict the user on search results. 
        :return: ImagesListData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user', 'fields', 'kind']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_user_images_list_data" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user' is set
        if self.api_client.client_side_validation and ('user' not in params or
                                                       params['user'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user` when calling `get_user_images_list_data`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user' in params:
            path_params['user'] = params['user']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'multi'  # noqa: E501
        if 'kind' in params:
            query_params.append(('kind', params['kind']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['accessClient', 'basic', 'session']  # noqa: E501

        return self.api_client.call_api(
            '/{user}/images/list-data', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ImagesListData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_ad_images(self, ad, **kwargs):  # noqa: E501
        """Lists the images of an advertisement   # noqa: E501

        Returns the images of an advertisement.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_ad_images(ad, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ad: Can be either the advertisement internal identifier or, in case of webshop advertisements, can be the product number (if the owner is the logged user) or a string in the form `productNumber@user`, with the user identifier as well.       (required)
        :param list[str] fields: Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`).  
        :return: list[Image]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_ad_images_with_http_info(ad, **kwargs)  # noqa: E501
        else:
            (data) = self.list_ad_images_with_http_info(ad, **kwargs)  # noqa: E501
            return data

    def list_ad_images_with_http_info(self, ad, **kwargs):  # noqa: E501
        """Lists the images of an advertisement   # noqa: E501

        Returns the images of an advertisement.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_ad_images_with_http_info(ad, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ad: Can be either the advertisement internal identifier or, in case of webshop advertisements, can be the product number (if the owner is the logged user) or a string in the form `productNumber@user`, with the user identifier as well.       (required)
        :param list[str] fields: Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`).  
        :return: list[Image]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ad', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_ad_images" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ad' is set
        if self.api_client.client_side_validation and ('ad' not in params or
                                                       params['ad'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `ad` when calling `list_ad_images`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ad' in params:
            path_params['ad'] = params['ad']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['accessClient', 'basic', 'session']  # noqa: E501

        return self.api_client.call_api(
            '/marketplace/{ad}/images', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Image]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_temp_images(self, **kwargs):  # noqa: E501
        """Lists temporary images related to the currently authenticated user or guest   # noqa: E501

        Returns all uploaded temporary images by the current user, or guest key. If the current request is as guest and no guest key is given, the IP address is used to match images. Using a key is recommended, because clients that move between WiFi and mobile connection or if the client is in a network with multiple outbound IP addresses, images won't be correctly matched without a key.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_temp_images(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] fields: Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`).  
        :param str target: The possible targets for a temporary image Possible values are: * advertisement: The image will be used for an advertisement of a specific user * contactInfo: The image will be used for an additional contact information of a specific user * customValue: The image will be used for a value of a specific custom field * userProfile: The image will be used as a profile image for an existing user * userRegistration: The image will be used as a profile image for a newly registered user 
        :param str guest_key: This parameter is only taken into account if the current request is running as guest. It is the key passed by the client when uploading images. If no key is given, images are matched by remote address. 
        :param str user: If the target is `userProfile` or `advertisement`, must be either the id or an identification method of the target user (or advertisement owner). 
        :param str custom_field: If the temp image will be used as the value of a custom field of type image then the corresponding custom field must be given (id or internal name). Otherwise this paremeter will be ignored.  
        :param str custom_field_kind: If a custom field is given then its kind must be given too to allow find it.  Possible values are: * contact: Contact fields. * contactInfo: Additional contact information fields. * custom_operation: Custom operation fields. * document: Document fields. * marketplace: Advertisements field. * record: Record fields. * transaction: Transaction fields. * user: User profile fields. 
        :return: list[Image]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_temp_images_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_temp_images_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_temp_images_with_http_info(self, **kwargs):  # noqa: E501
        """Lists temporary images related to the currently authenticated user or guest   # noqa: E501

        Returns all uploaded temporary images by the current user, or guest key. If the current request is as guest and no guest key is given, the IP address is used to match images. Using a key is recommended, because clients that move between WiFi and mobile connection or if the client is in a network with multiple outbound IP addresses, images won't be correctly matched without a key.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_temp_images_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] fields: Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`).  
        :param str target: The possible targets for a temporary image Possible values are: * advertisement: The image will be used for an advertisement of a specific user * contactInfo: The image will be used for an additional contact information of a specific user * customValue: The image will be used for a value of a specific custom field * userProfile: The image will be used as a profile image for an existing user * userRegistration: The image will be used as a profile image for a newly registered user 
        :param str guest_key: This parameter is only taken into account if the current request is running as guest. It is the key passed by the client when uploading images. If no key is given, images are matched by remote address. 
        :param str user: If the target is `userProfile` or `advertisement`, must be either the id or an identification method of the target user (or advertisement owner). 
        :param str custom_field: If the temp image will be used as the value of a custom field of type image then the corresponding custom field must be given (id or internal name). Otherwise this paremeter will be ignored.  
        :param str custom_field_kind: If a custom field is given then its kind must be given too to allow find it.  Possible values are: * contact: Contact fields. * contactInfo: Additional contact information fields. * custom_operation: Custom operation fields. * document: Document fields. * marketplace: Advertisements field. * record: Record fields. * transaction: Transaction fields. * user: User profile fields. 
        :return: list[Image]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['fields', 'target', 'guest_key', 'user', 'custom_field', 'custom_field_kind']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_temp_images" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'multi'  # noqa: E501
        if 'target' in params:
            query_params.append(('target', params['target']))  # noqa: E501
        if 'guest_key' in params:
            query_params.append(('guestKey', params['guest_key']))  # noqa: E501
        if 'user' in params:
            query_params.append(('user', params['user']))  # noqa: E501
        if 'custom_field' in params:
            query_params.append(('customField', params['custom_field']))  # noqa: E501
        if 'custom_field_kind' in params:
            query_params.append(('customFieldKind', params['custom_field_kind']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/images/temp', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Image]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_user_images(self, user, **kwargs):  # noqa: E501
        """Lists either `profile` or `custom` images for a given user    # noqa: E501

        Returns either `profile` or `custom` images for the given user. For `profile`, the user  must be visible by the authenticated user. Custom images are used in rich text content, not images for custom fields. For `custom`, the authenticated user must either be the owner or a manager (administrator or broker).   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_user_images(user, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: Can be one of: * a user identification value, such as id, username, e-mail, phone, etc.   Id is always allowed, others depend on Cyclos configuration. Note that   a valid numeric value is always considered as id. For example, when   using another identification method that can be numeric only, prefix   the value with a single quote (like in Excel spreadsheets), for   example, `'1234567890`;     * `self` for the currently authenticated user.  (required)
        :param list[str] fields: Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`).  
        :param str kind: The kind of images to be returned.   The default value is `profile` Possible values are: * custom: User custom images are additional images that can be used on rich text contents. * profile: User profile images are those associated with the user profile. The first profile image is used to depict the user on search results. 
        :return: list[Image]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_user_images_with_http_info(user, **kwargs)  # noqa: E501
        else:
            (data) = self.list_user_images_with_http_info(user, **kwargs)  # noqa: E501
            return data

    def list_user_images_with_http_info(self, user, **kwargs):  # noqa: E501
        """Lists either `profile` or `custom` images for a given user    # noqa: E501

        Returns either `profile` or `custom` images for the given user. For `profile`, the user  must be visible by the authenticated user. Custom images are used in rich text content, not images for custom fields. For `custom`, the authenticated user must either be the owner or a manager (administrator or broker).   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_user_images_with_http_info(user, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: Can be one of: * a user identification value, such as id, username, e-mail, phone, etc.   Id is always allowed, others depend on Cyclos configuration. Note that   a valid numeric value is always considered as id. For example, when   using another identification method that can be numeric only, prefix   the value with a single quote (like in Excel spreadsheets), for   example, `'1234567890`;     * `self` for the currently authenticated user.  (required)
        :param list[str] fields: Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`).  
        :param str kind: The kind of images to be returned.   The default value is `profile` Possible values are: * custom: User custom images are additional images that can be used on rich text contents. * profile: User profile images are those associated with the user profile. The first profile image is used to depict the user on search results. 
        :return: list[Image]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user', 'fields', 'kind']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_user_images" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user' is set
        if self.api_client.client_side_validation and ('user' not in params or
                                                       params['user'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user` when calling `list_user_images`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user' in params:
            path_params['user'] = params['user']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'multi'  # noqa: E501
        if 'kind' in params:
            query_params.append(('kind', params['kind']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['accessClient', 'basic', 'session']  # noqa: E501

        return self.api_client.call_api(
            '/{user}/images', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Image]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def reorder_ad_images(self, ad, ids, **kwargs):  # noqa: E501
        """Changes the order of the images of an advertisement    # noqa: E501

        The new order is defined by the list of ids, so that images appear in the same order as the ids.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reorder_ad_images(ad, ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ad: Can be either the advertisement internal identifier or, in case of webshop advertisements, can be the product number (if the owner is the logged user) or a string in the form `productNumber@user`, with the user identifier as well.       (required)
        :param list[str] ids: The array of ids (comma-separated) reflecting the desired order (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.reorder_ad_images_with_http_info(ad, ids, **kwargs)  # noqa: E501
        else:
            (data) = self.reorder_ad_images_with_http_info(ad, ids, **kwargs)  # noqa: E501
            return data

    def reorder_ad_images_with_http_info(self, ad, ids, **kwargs):  # noqa: E501
        """Changes the order of the images of an advertisement    # noqa: E501

        The new order is defined by the list of ids, so that images appear in the same order as the ids.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reorder_ad_images_with_http_info(ad, ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ad: Can be either the advertisement internal identifier or, in case of webshop advertisements, can be the product number (if the owner is the logged user) or a string in the form `productNumber@user`, with the user identifier as well.       (required)
        :param list[str] ids: The array of ids (comma-separated) reflecting the desired order (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ad', 'ids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reorder_ad_images" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ad' is set
        if self.api_client.client_side_validation and ('ad' not in params or
                                                       params['ad'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `ad` when calling `reorder_ad_images`")  # noqa: E501
        # verify the required parameter 'ids' is set
        if self.api_client.client_side_validation and ('ids' not in params or
                                                       params['ids'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `ids` when calling `reorder_ad_images`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ad' in params:
            path_params['ad'] = params['ad']  # noqa: E501

        query_params = []
        if 'ids' in params:
            query_params.append(('ids', params['ids']))  # noqa: E501
            collection_formats['ids'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['accessClient', 'basic', 'session']  # noqa: E501

        return self.api_client.call_api(
            '/marketplace/{ad}/images/order', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def reorder_profile_images(self, user, ids, **kwargs):  # noqa: E501
        """Changes the order of a user's profile images    # noqa: E501

        The new order is defined by the list of ids, so that images appear in the same order as the ids.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reorder_profile_images(user, ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: Can be one of: * a user identification value, such as id, username, e-mail, phone, etc.   Id is always allowed, others depend on Cyclos configuration. Note that   a valid numeric value is always considered as id. For example, when   using another identification method that can be numeric only, prefix   the value with a single quote (like in Excel spreadsheets), for   example, `'1234567890`;     * `self` for the currently authenticated user.  (required)
        :param list[str] ids: The array of ids (comma-separated) reflecting the desired order (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.reorder_profile_images_with_http_info(user, ids, **kwargs)  # noqa: E501
        else:
            (data) = self.reorder_profile_images_with_http_info(user, ids, **kwargs)  # noqa: E501
            return data

    def reorder_profile_images_with_http_info(self, user, ids, **kwargs):  # noqa: E501
        """Changes the order of a user's profile images    # noqa: E501

        The new order is defined by the list of ids, so that images appear in the same order as the ids.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reorder_profile_images_with_http_info(user, ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: Can be one of: * a user identification value, such as id, username, e-mail, phone, etc.   Id is always allowed, others depend on Cyclos configuration. Note that   a valid numeric value is always considered as id. For example, when   using another identification method that can be numeric only, prefix   the value with a single quote (like in Excel spreadsheets), for   example, `'1234567890`;     * `self` for the currently authenticated user.  (required)
        :param list[str] ids: The array of ids (comma-separated) reflecting the desired order (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user', 'ids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reorder_profile_images" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user' is set
        if self.api_client.client_side_validation and ('user' not in params or
                                                       params['user'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user` when calling `reorder_profile_images`")  # noqa: E501
        # verify the required parameter 'ids' is set
        if self.api_client.client_side_validation and ('ids' not in params or
                                                       params['ids'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `ids` when calling `reorder_profile_images`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user' in params:
            path_params['user'] = params['user']  # noqa: E501

        query_params = []
        if 'ids' in params:
            query_params.append(('ids', params['ids']))  # noqa: E501
            collection_formats['ids'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['accessClient', 'basic', 'session']  # noqa: E501

        return self.api_client.call_api(
            '/{user}/images/order', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def upload_ad_image(self, ad, image, **kwargs):  # noqa: E501
        """Adds a new image for the given advertisement.   # noqa: E501

        Uploads a new image for the given advertisement.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upload_ad_image(ad, image, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ad: Can be either the advertisement internal identifier or, in case of webshop advertisements, can be the product number (if the owner is the logged user) or a string in the form `productNumber@user`, with the user identifier as well.       (required)
        :param file image: The image being uploaded (required)
        :param str name: The name for the new image. If not informed will fall back to the original file name in the form data 
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.upload_ad_image_with_http_info(ad, image, **kwargs)  # noqa: E501
        else:
            (data) = self.upload_ad_image_with_http_info(ad, image, **kwargs)  # noqa: E501
            return data

    def upload_ad_image_with_http_info(self, ad, image, **kwargs):  # noqa: E501
        """Adds a new image for the given advertisement.   # noqa: E501

        Uploads a new image for the given advertisement.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upload_ad_image_with_http_info(ad, image, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ad: Can be either the advertisement internal identifier or, in case of webshop advertisements, can be the product number (if the owner is the logged user) or a string in the form `productNumber@user`, with the user identifier as well.       (required)
        :param file image: The image being uploaded (required)
        :param str name: The name for the new image. If not informed will fall back to the original file name in the form data 
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ad', 'image', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method upload_ad_image" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ad' is set
        if self.api_client.client_side_validation and ('ad' not in params or
                                                       params['ad'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `ad` when calling `upload_ad_image`")  # noqa: E501
        # verify the required parameter 'image' is set
        if self.api_client.client_side_validation and ('image' not in params or
                                                       params['image'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `image` when calling `upload_ad_image`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ad' in params:
            path_params['ad'] = params['ad']  # noqa: E501

        query_params = []
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'image' in params:
            local_var_files['image'] = params['image']  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['accessClient', 'basic', 'session']  # noqa: E501

        return self.api_client.call_api(
            '/marketplace/{ad}/images', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def upload_contact_info_image(self, id, image, **kwargs):  # noqa: E501
        """Uploads a new image for the given additional contact information.   # noqa: E501

        Saves the given image for the additional contact information. If the given additional contact information already has an image, the old one is removed, and the current image is saved in its place.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upload_contact_info_image(id, image, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The object identification (required)
        :param file image: The image being uploaded (required)
        :param str name: The name for the new image. If not informed will fall back to the original file name in the form data 
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.upload_contact_info_image_with_http_info(id, image, **kwargs)  # noqa: E501
        else:
            (data) = self.upload_contact_info_image_with_http_info(id, image, **kwargs)  # noqa: E501
            return data

    def upload_contact_info_image_with_http_info(self, id, image, **kwargs):  # noqa: E501
        """Uploads a new image for the given additional contact information.   # noqa: E501

        Saves the given image for the additional contact information. If the given additional contact information already has an image, the old one is removed, and the current image is saved in its place.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upload_contact_info_image_with_http_info(id, image, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The object identification (required)
        :param file image: The image being uploaded (required)
        :param str name: The name for the new image. If not informed will fall back to the original file name in the form data 
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'image', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method upload_contact_info_image" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `upload_contact_info_image`")  # noqa: E501
        # verify the required parameter 'image' is set
        if self.api_client.client_side_validation and ('image' not in params or
                                                       params['image'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `image` when calling `upload_contact_info_image`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'image' in params:
            local_var_files['image'] = params['image']  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['accessClient', 'basic', 'session']  # noqa: E501

        return self.api_client.call_api(
            '/contact-infos/{id}/image', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def upload_contact_info_image_deprecated(self, id, image, **kwargs):  # noqa: E501
        """This operation is deprecated, use `POST /contact-infos/{id}/image` instead.  # noqa: E501

        Saves the given image for the additional contact information. If the given additional contact information already has an image, the old one is removed, and the current image is saved in its place.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upload_contact_info_image_deprecated(id, image, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The object identification (required)
        :param file image: The image being uploaded (required)
        :param str name: The name for the new image. If not informed will fall back to the original file name in the form data 
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.upload_contact_info_image_deprecated_with_http_info(id, image, **kwargs)  # noqa: E501
        else:
            (data) = self.upload_contact_info_image_deprecated_with_http_info(id, image, **kwargs)  # noqa: E501
            return data

    def upload_contact_info_image_deprecated_with_http_info(self, id, image, **kwargs):  # noqa: E501
        """This operation is deprecated, use `POST /contact-infos/{id}/image` instead.  # noqa: E501

        Saves the given image for the additional contact information. If the given additional contact information already has an image, the old one is removed, and the current image is saved in its place.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upload_contact_info_image_deprecated_with_http_info(id, image, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The object identification (required)
        :param file image: The image being uploaded (required)
        :param str name: The name for the new image. If not informed will fall back to the original file name in the form data 
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'image', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method upload_contact_info_image_deprecated" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `upload_contact_info_image_deprecated`")  # noqa: E501
        # verify the required parameter 'image' is set
        if self.api_client.client_side_validation and ('image' not in params or
                                                       params['image'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `image` when calling `upload_contact_info_image_deprecated`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'image' in params:
            local_var_files['image'] = params['image']  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['accessClient', 'basic', 'session']  # noqa: E501

        return self.api_client.call_api(
            '/contactInfos/{id}/image', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def upload_temp_image(self, image, **kwargs):  # noqa: E501
        """Adds a new temporary image for the currently authenticated user or guest.   # noqa: E501

        Uploads a new temporary image. A temporary image should be given a target, which can be: - `userRegistration`: The image will be used as a profile image for a newly registered user; - `userProfile`: The image will be used as a profile image for an existing user; - `advertisement`: The image will be used for an advertisement of a specific user; - `customValue`: The image will be used for a value of a specific custom field. Temporary images won't be immediately associated to the next registered model, but its `id`, which is returned by this operation, must be explicitly passed in, either as the `images` field (for profile or advertisement images) or in the `customValues` field of the model that has custom values (multiple ids can be passed-in as pipe-separated). Images as guest can only be uploaded if on the destination group products the image profile field is allowed at registrations. Users may upload images if they can register new users or create advertisements.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upload_temp_image(image, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param file image: The image being uploaded (required)
        :param str name: The name for the new image. If not informed will fall back to the original file name in the form data 
        :param str target: The possible targets for a temporary image Possible values are: * advertisement: The image will be used for an advertisement of a specific user * contactInfo: The image will be used for an additional contact information of a specific user * customValue: The image will be used for a value of a specific custom field * userProfile: The image will be used as a profile image for an existing user * userRegistration: The image will be used as a profile image for a newly registered user 
        :param str guest_key: This parameter is only taken into account if the current request is running as guest. It should be a reasonably unique key (for example, an UUID, device identifier or a reasonably large random string) which uniquely identifies the uploaded image as belonging to this \"session\". If no key is given, images uploaded as guest are matched by IP address. Using a key is recommended, because clients that move between WiFi and mobile connection or if the client is in a network with multiple outbound IP addresses, images won't be correctly matched without a key. 
        :param str user: If the target is `userProfile` or `advertisement`, must be either the id or an identification method of the target user (or advertisement owner). 
        :param str custom_field: If the temp image will be used as the value of a custom field of type image then the corresponding custom field must be given (id or internal name). Otherwise this paremeter will be ignored.  
        :param str custom_field_kind: If a custom field is given then its kind must be given too to allow find it. Possible values are: * contact: Contact fields. * contactInfo: Additional contact information fields. * custom_operation: Custom operation fields. * document: Document fields. * marketplace: Advertisements field. * record: Record fields. * transaction: Transaction fields. * user: User profile fields. 
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.upload_temp_image_with_http_info(image, **kwargs)  # noqa: E501
        else:
            (data) = self.upload_temp_image_with_http_info(image, **kwargs)  # noqa: E501
            return data

    def upload_temp_image_with_http_info(self, image, **kwargs):  # noqa: E501
        """Adds a new temporary image for the currently authenticated user or guest.   # noqa: E501

        Uploads a new temporary image. A temporary image should be given a target, which can be: - `userRegistration`: The image will be used as a profile image for a newly registered user; - `userProfile`: The image will be used as a profile image for an existing user; - `advertisement`: The image will be used for an advertisement of a specific user; - `customValue`: The image will be used for a value of a specific custom field. Temporary images won't be immediately associated to the next registered model, but its `id`, which is returned by this operation, must be explicitly passed in, either as the `images` field (for profile or advertisement images) or in the `customValues` field of the model that has custom values (multiple ids can be passed-in as pipe-separated). Images as guest can only be uploaded if on the destination group products the image profile field is allowed at registrations. Users may upload images if they can register new users or create advertisements.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upload_temp_image_with_http_info(image, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param file image: The image being uploaded (required)
        :param str name: The name for the new image. If not informed will fall back to the original file name in the form data 
        :param str target: The possible targets for a temporary image Possible values are: * advertisement: The image will be used for an advertisement of a specific user * contactInfo: The image will be used for an additional contact information of a specific user * customValue: The image will be used for a value of a specific custom field * userProfile: The image will be used as a profile image for an existing user * userRegistration: The image will be used as a profile image for a newly registered user 
        :param str guest_key: This parameter is only taken into account if the current request is running as guest. It should be a reasonably unique key (for example, an UUID, device identifier or a reasonably large random string) which uniquely identifies the uploaded image as belonging to this \"session\". If no key is given, images uploaded as guest are matched by IP address. Using a key is recommended, because clients that move between WiFi and mobile connection or if the client is in a network with multiple outbound IP addresses, images won't be correctly matched without a key. 
        :param str user: If the target is `userProfile` or `advertisement`, must be either the id or an identification method of the target user (or advertisement owner). 
        :param str custom_field: If the temp image will be used as the value of a custom field of type image then the corresponding custom field must be given (id or internal name). Otherwise this paremeter will be ignored.  
        :param str custom_field_kind: If a custom field is given then its kind must be given too to allow find it. Possible values are: * contact: Contact fields. * contactInfo: Additional contact information fields. * custom_operation: Custom operation fields. * document: Document fields. * marketplace: Advertisements field. * record: Record fields. * transaction: Transaction fields. * user: User profile fields. 
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['image', 'name', 'target', 'guest_key', 'user', 'custom_field', 'custom_field_kind']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method upload_temp_image" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'image' is set
        if self.api_client.client_side_validation and ('image' not in params or
                                                       params['image'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `image` when calling `upload_temp_image`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'target' in params:
            query_params.append(('target', params['target']))  # noqa: E501
        if 'guest_key' in params:
            query_params.append(('guestKey', params['guest_key']))  # noqa: E501
        if 'user' in params:
            query_params.append(('user', params['user']))  # noqa: E501
        if 'custom_field' in params:
            query_params.append(('customField', params['custom_field']))  # noqa: E501
        if 'custom_field_kind' in params:
            query_params.append(('customFieldKind', params['custom_field_kind']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'image' in params:
            local_var_files['image'] = params['image']  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/images/temp', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def upload_user_image(self, user, image, **kwargs):  # noqa: E501
        """Adds a new image for the given user. The image kind is either  `profile` or `custom`.   # noqa: E501

        Uploads a new image, either `profile` (by default) or `custom`, for the given user. Custom images are used in rich text content, not images for custom fields. For uploading images for custom field values, see the documentation for the operation at `POST /images/temp`.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upload_user_image(user, image, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: Can be one of: * a user identification value, such as id, username, e-mail, phone, etc.   Id is always allowed, others depend on Cyclos configuration. Note that   a valid numeric value is always considered as id. For example, when   using another identification method that can be numeric only, prefix   the value with a single quote (like in Excel spreadsheets), for   example, `'1234567890`;     * `self` for the currently authenticated user.  (required)
        :param file image: The image being uploaded (required)
        :param str kind: The kind of images to be returned.   The default value is `profile` Possible values are: * custom: User custom images are additional images that can be used on rich text contents. * profile: User profile images are those associated with the user profile. The first profile image is used to depict the user on search results. 
        :param str name: The name for the new image. If not informed will fall back to the original file name in the form data 
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.upload_user_image_with_http_info(user, image, **kwargs)  # noqa: E501
        else:
            (data) = self.upload_user_image_with_http_info(user, image, **kwargs)  # noqa: E501
            return data

    def upload_user_image_with_http_info(self, user, image, **kwargs):  # noqa: E501
        """Adds a new image for the given user. The image kind is either  `profile` or `custom`.   # noqa: E501

        Uploads a new image, either `profile` (by default) or `custom`, for the given user. Custom images are used in rich text content, not images for custom fields. For uploading images for custom field values, see the documentation for the operation at `POST /images/temp`.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upload_user_image_with_http_info(user, image, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: Can be one of: * a user identification value, such as id, username, e-mail, phone, etc.   Id is always allowed, others depend on Cyclos configuration. Note that   a valid numeric value is always considered as id. For example, when   using another identification method that can be numeric only, prefix   the value with a single quote (like in Excel spreadsheets), for   example, `'1234567890`;     * `self` for the currently authenticated user.  (required)
        :param file image: The image being uploaded (required)
        :param str kind: The kind of images to be returned.   The default value is `profile` Possible values are: * custom: User custom images are additional images that can be used on rich text contents. * profile: User profile images are those associated with the user profile. The first profile image is used to depict the user on search results. 
        :param str name: The name for the new image. If not informed will fall back to the original file name in the form data 
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user', 'image', 'kind', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method upload_user_image" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user' is set
        if self.api_client.client_side_validation and ('user' not in params or
                                                       params['user'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user` when calling `upload_user_image`")  # noqa: E501
        # verify the required parameter 'image' is set
        if self.api_client.client_side_validation and ('image' not in params or
                                                       params['image'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `image` when calling `upload_user_image`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user' in params:
            path_params['user'] = params['user']  # noqa: E501

        query_params = []
        if 'kind' in params:
            query_params.append(('kind', params['kind']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'image' in params:
            local_var_files['image'] = params['image']  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['accessClient', 'basic', 'session']  # noqa: E501

        return self.api_client.call_api(
            '/{user}/images', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def view_image(self, id_or_key, **kwargs):  # noqa: E501
        """Returns an image details by id or key  # noqa: E501

        Returns metadata about an image given its identifier or key  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.view_image(id_or_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_or_key: The image id or file name (required)
        :param list[str] fields: Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`).  
        :return: ImageView
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.view_image_with_http_info(id_or_key, **kwargs)  # noqa: E501
        else:
            (data) = self.view_image_with_http_info(id_or_key, **kwargs)  # noqa: E501
            return data

    def view_image_with_http_info(self, id_or_key, **kwargs):  # noqa: E501
        """Returns an image details by id or key  # noqa: E501

        Returns metadata about an image given its identifier or key  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.view_image_with_http_info(id_or_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_or_key: The image id or file name (required)
        :param list[str] fields: Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`).  
        :return: ImageView
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_or_key', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method view_image" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id_or_key' is set
        if self.api_client.client_side_validation and ('id_or_key' not in params or
                                                       params['id_or_key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id_or_key` when calling `view_image`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_or_key' in params:
            path_params['idOrKey'] = params['id_or_key']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/images/{idOrKey}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ImageView',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
