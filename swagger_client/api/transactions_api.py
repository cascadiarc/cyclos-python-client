# coding: utf-8

"""
    Cyclos 4.11.5 API

    The REST API for Cyclos 4.11.5  # noqa: E501

    OpenAPI spec version: 4.11.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class TransactionsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_transactions_data_for_search(self, owner, **kwargs):  # noqa: E501
        """Returns data for searching transactions of an account owner  # noqa: E501

        Returns data which can be used to filter a transaction search  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_transactions_data_for_search(owner, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner: Can be one of: * a user identification value, such as id, username, e-mail, phone, etc.   Id is always allowed, others depend on Cyclos configuration. Note that   a valid numeric value is always considered as id. For example, when   using another identification method that can be numeric only, prefix   the value with a single quote (like in Excel spreadsheets), for   example, `'1234567890`;     * `self` for the currently authenticated user; * `system` for data that belongs to the system.  (required)
        :param list[str] fields: Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`).  
        :return: TransactionDataForSearch
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_transactions_data_for_search_with_http_info(owner, **kwargs)  # noqa: E501
        else:
            (data) = self.get_transactions_data_for_search_with_http_info(owner, **kwargs)  # noqa: E501
            return data

    def get_transactions_data_for_search_with_http_info(self, owner, **kwargs):  # noqa: E501
        """Returns data for searching transactions of an account owner  # noqa: E501

        Returns data which can be used to filter a transaction search  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_transactions_data_for_search_with_http_info(owner, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner: Can be one of: * a user identification value, such as id, username, e-mail, phone, etc.   Id is always allowed, others depend on Cyclos configuration. Note that   a valid numeric value is always considered as id. For example, when   using another identification method that can be numeric only, prefix   the value with a single quote (like in Excel spreadsheets), for   example, `'1234567890`;     * `self` for the currently authenticated user; * `system` for data that belongs to the system.  (required)
        :param list[str] fields: Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`).  
        :return: TransactionDataForSearch
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_transactions_data_for_search" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner' is set
        if self.api_client.client_side_validation and ('owner' not in params or
                                                       params['owner'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `owner` when calling `get_transactions_data_for_search`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner' in params:
            path_params['owner'] = params['owner']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['accessClient', 'basic', 'session']  # noqa: E501

        return self.api_client.call_api(
            '/{owner}/transactions/data-for-search', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TransactionDataForSearch',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def search_transactions(self, owner, **kwargs):  # noqa: E501
        """Searches transactions of an account owner  # noqa: E501

        Returns the transactions of a given account owner that match the specified criteria. Each result will will be relative to this owner. The amount may be positive or negative, depending on whether this owner has performed or received the transaction.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_transactions(owner, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner: Can be one of: * a user identification value, such as id, username, e-mail, phone, etc.   Id is always allowed, others depend on Cyclos configuration. Note that   a valid numeric value is always considered as id. For example, when   using another identification method that can be numeric only, prefix   the value with a single quote (like in Excel spreadsheets), for   example, `'1234567890`;     * `self` for the currently authenticated user; * `system` for data that belongs to the system.  (required)
        :param list[str] fields: Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`).  
        :param list[str] access_clients: References to access clients (id or token) used to perform / receive the  transfer. 
        :param list[str] account_types: The account types 
        :param list[BigDecimal] amount_range: The minimum / maximum amount. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. 
        :param list[str] authorization_statuses: The status regarding authorization a transaction is in. If configured, transactions can require one or more levels of authorization in order to be processed. If a transaction has the this status null, it means it never went through the authorization process.  Possible values for each array element are: * authorized: The transaction was fully authorized and is processed * canceled: The authorization submission was canceled by the submitter * denied: The authorization was denied * pending: The transaction is pending authorization 
        :param str broker: Reference to the broker of users involved in transfers. Is only taken into account if authenticated as administrator. 
        :param str by: Reference to the user that was authenticated when the transfer was performed. Is only taken into account if authenticated as administrator. 
        :param list[str] channels: Reference to the channel used to perform / receive the transfer. Only taken into account if authenticated as administrator. 
        :param list[datetime] date_period: The minimum / maximum transfer date. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. 
        :param str direction: Indicates whether from an account POV a transfer is a credit or debit Possible values are: * credit: The transfer impacts the balance positively * debit: The transfer impacts the balance negatively 
        :param list[str] excluded_ids: List of transfers ids to be excluded from the result. 
        :param list[str] external_payment_statuses: The status of an external payment Possible values for each array element are: * canceled: The external payment was canceled * expired: The external payment has expired without the destination user activation * failed: The external payment has failed processing * pending: The external payment is pending, awaiting the destination user to be activated in Cyclos * processed: The external payment was processed, and the destination payment was created 
        :param bool from_current_access_client: Flag indicating whether to include only transfers by the current access client. 
        :param list[str] groups: Reference to the user group used to perform / receive the transfer. Only taken into account if authenticated as administrator. 
        :param bool include_generated_by_access_client: Flag indicating whether to include or not the generated transfer. Only valid if there is at least one access client specified. For example if a `ticket` or `paymentRequest` was processed then a new transfer will be generated. 
        :param list[str] kinds: The kind of a transaction  Possible values for each array element are: * chargeback: Chargeback of a given transfer * externalPayment: A payment to an external user * import: An imported transaction * order: Transaction generated by confirming an order * payment: A direct payment * paymentRequest: A request for another user to accept a payment  * recurringPayment: A payment which is processed again periodically * scheduledPayment: A scheduled payment which is either a payment scheduled for a future date or has multiple installments * ticket: A payment whose the payer is unknown 
        :param int page: The page number (zero-based) of the search. The default value is zero. 
        :param int page_size: The maximum number of records that will be returned on the search. The default value is 40. The maximum number of returned results is configured in Cyclos, and even if more than that is requested, it will be limited by that setting. 
        :param list[str] payment_request_statuses: The status of a payment request Possible values for each array element are: * canceled: The payment request was canceled * denied: The payment request was denied by the receiver * expired: The payment request has expired - the received did not respond until the expiration date * open: The payment request is open and can be accepted * processed: The payment request was processed, and either a direct or scheduled payment was created from it * scheduled: The payment request has been accepted, and scheduled for processing on a future date 
        :param list[str] recurring_payment_statuses: The status of a recurring payment Possible values for each array element are: * canceled: The recurring payment was manually canceled * closed: The recurring payment is closed, as the last scheduled occurrence was processed * open: The recurring payment is open, as there are more future occurrences 
        :param list[str] scheduled_payment_statuses: The status of a scheduled payment Possible values for each array element are: * blocked: The scheduled payment is blocked - won't have any installment processed until being unblocked again * canceled: The scheduled payment, as well as all open installments were canceled * closed: The scheduled payment is closed * open: The scheduled payment has open installments 
        :param list[str] ticket_statuses: The status of a ticket Possible values for each array element are: * approved: The ticket was approved by the payer and is waiting to be processed by the receiver to generate the payment * canceled: The ticket was canceled by the receiver before being approved * expired: The ticket has expired without being approved by a payer or canceled by the receiver until the expiration date * open: The ticket was created, but not approved yet * processed: The ticket was approved and processed and the payment was generated 
        :param str transaction_number: The transaction number of the matching transfer 
        :param list[str] transfer_filters: Reference to the transfer filters, which filters transfers by type. May be either the internal id or qualified transfer filter internal name, in the format `accountType.transferFilter`. 
        :param list[str] transfer_types: Reference to the transfer types for filter. May be either the internal id or qualified transfer type internal name, in the format `accountType.transferType`. 
        :param str user: Reference a user that should have either received / performed the transfer. 
        :return: list[TransactionResult]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.search_transactions_with_http_info(owner, **kwargs)  # noqa: E501
        else:
            (data) = self.search_transactions_with_http_info(owner, **kwargs)  # noqa: E501
            return data

    def search_transactions_with_http_info(self, owner, **kwargs):  # noqa: E501
        """Searches transactions of an account owner  # noqa: E501

        Returns the transactions of a given account owner that match the specified criteria. Each result will will be relative to this owner. The amount may be positive or negative, depending on whether this owner has performed or received the transaction.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_transactions_with_http_info(owner, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner: Can be one of: * a user identification value, such as id, username, e-mail, phone, etc.   Id is always allowed, others depend on Cyclos configuration. Note that   a valid numeric value is always considered as id. For example, when   using another identification method that can be numeric only, prefix   the value with a single quote (like in Excel spreadsheets), for   example, `'1234567890`;     * `self` for the currently authenticated user; * `system` for data that belongs to the system.  (required)
        :param list[str] fields: Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`).  
        :param list[str] access_clients: References to access clients (id or token) used to perform / receive the  transfer. 
        :param list[str] account_types: The account types 
        :param list[BigDecimal] amount_range: The minimum / maximum amount. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. 
        :param list[str] authorization_statuses: The status regarding authorization a transaction is in. If configured, transactions can require one or more levels of authorization in order to be processed. If a transaction has the this status null, it means it never went through the authorization process.  Possible values for each array element are: * authorized: The transaction was fully authorized and is processed * canceled: The authorization submission was canceled by the submitter * denied: The authorization was denied * pending: The transaction is pending authorization 
        :param str broker: Reference to the broker of users involved in transfers. Is only taken into account if authenticated as administrator. 
        :param str by: Reference to the user that was authenticated when the transfer was performed. Is only taken into account if authenticated as administrator. 
        :param list[str] channels: Reference to the channel used to perform / receive the transfer. Only taken into account if authenticated as administrator. 
        :param list[datetime] date_period: The minimum / maximum transfer date. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. 
        :param str direction: Indicates whether from an account POV a transfer is a credit or debit Possible values are: * credit: The transfer impacts the balance positively * debit: The transfer impacts the balance negatively 
        :param list[str] excluded_ids: List of transfers ids to be excluded from the result. 
        :param list[str] external_payment_statuses: The status of an external payment Possible values for each array element are: * canceled: The external payment was canceled * expired: The external payment has expired without the destination user activation * failed: The external payment has failed processing * pending: The external payment is pending, awaiting the destination user to be activated in Cyclos * processed: The external payment was processed, and the destination payment was created 
        :param bool from_current_access_client: Flag indicating whether to include only transfers by the current access client. 
        :param list[str] groups: Reference to the user group used to perform / receive the transfer. Only taken into account if authenticated as administrator. 
        :param bool include_generated_by_access_client: Flag indicating whether to include or not the generated transfer. Only valid if there is at least one access client specified. For example if a `ticket` or `paymentRequest` was processed then a new transfer will be generated. 
        :param list[str] kinds: The kind of a transaction  Possible values for each array element are: * chargeback: Chargeback of a given transfer * externalPayment: A payment to an external user * import: An imported transaction * order: Transaction generated by confirming an order * payment: A direct payment * paymentRequest: A request for another user to accept a payment  * recurringPayment: A payment which is processed again periodically * scheduledPayment: A scheduled payment which is either a payment scheduled for a future date or has multiple installments * ticket: A payment whose the payer is unknown 
        :param int page: The page number (zero-based) of the search. The default value is zero. 
        :param int page_size: The maximum number of records that will be returned on the search. The default value is 40. The maximum number of returned results is configured in Cyclos, and even if more than that is requested, it will be limited by that setting. 
        :param list[str] payment_request_statuses: The status of a payment request Possible values for each array element are: * canceled: The payment request was canceled * denied: The payment request was denied by the receiver * expired: The payment request has expired - the received did not respond until the expiration date * open: The payment request is open and can be accepted * processed: The payment request was processed, and either a direct or scheduled payment was created from it * scheduled: The payment request has been accepted, and scheduled for processing on a future date 
        :param list[str] recurring_payment_statuses: The status of a recurring payment Possible values for each array element are: * canceled: The recurring payment was manually canceled * closed: The recurring payment is closed, as the last scheduled occurrence was processed * open: The recurring payment is open, as there are more future occurrences 
        :param list[str] scheduled_payment_statuses: The status of a scheduled payment Possible values for each array element are: * blocked: The scheduled payment is blocked - won't have any installment processed until being unblocked again * canceled: The scheduled payment, as well as all open installments were canceled * closed: The scheduled payment is closed * open: The scheduled payment has open installments 
        :param list[str] ticket_statuses: The status of a ticket Possible values for each array element are: * approved: The ticket was approved by the payer and is waiting to be processed by the receiver to generate the payment * canceled: The ticket was canceled by the receiver before being approved * expired: The ticket has expired without being approved by a payer or canceled by the receiver until the expiration date * open: The ticket was created, but not approved yet * processed: The ticket was approved and processed and the payment was generated 
        :param str transaction_number: The transaction number of the matching transfer 
        :param list[str] transfer_filters: Reference to the transfer filters, which filters transfers by type. May be either the internal id or qualified transfer filter internal name, in the format `accountType.transferFilter`. 
        :param list[str] transfer_types: Reference to the transfer types for filter. May be either the internal id or qualified transfer type internal name, in the format `accountType.transferType`. 
        :param str user: Reference a user that should have either received / performed the transfer. 
        :return: list[TransactionResult]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner', 'fields', 'access_clients', 'account_types', 'amount_range', 'authorization_statuses', 'broker', 'by', 'channels', 'date_period', 'direction', 'excluded_ids', 'external_payment_statuses', 'from_current_access_client', 'groups', 'include_generated_by_access_client', 'kinds', 'page', 'page_size', 'payment_request_statuses', 'recurring_payment_statuses', 'scheduled_payment_statuses', 'ticket_statuses', 'transaction_number', 'transfer_filters', 'transfer_types', 'user']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_transactions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner' is set
        if self.api_client.client_side_validation and ('owner' not in params or
                                                       params['owner'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `owner` when calling `search_transactions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner' in params:
            path_params['owner'] = params['owner']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'multi'  # noqa: E501
        if 'access_clients' in params:
            query_params.append(('accessClients', params['access_clients']))  # noqa: E501
            collection_formats['accessClients'] = 'csv'  # noqa: E501
        if 'account_types' in params:
            query_params.append(('accountTypes', params['account_types']))  # noqa: E501
            collection_formats['accountTypes'] = 'csv'  # noqa: E501
        if 'amount_range' in params:
            query_params.append(('amountRange', params['amount_range']))  # noqa: E501
            collection_formats['amountRange'] = 'csv'  # noqa: E501
        if 'authorization_statuses' in params:
            query_params.append(('authorizationStatuses', params['authorization_statuses']))  # noqa: E501
            collection_formats['authorizationStatuses'] = 'csv'  # noqa: E501
        if 'broker' in params:
            query_params.append(('broker', params['broker']))  # noqa: E501
        if 'by' in params:
            query_params.append(('by', params['by']))  # noqa: E501
        if 'channels' in params:
            query_params.append(('channels', params['channels']))  # noqa: E501
            collection_formats['channels'] = 'csv'  # noqa: E501
        if 'date_period' in params:
            query_params.append(('datePeriod', params['date_period']))  # noqa: E501
            collection_formats['datePeriod'] = 'csv'  # noqa: E501
        if 'direction' in params:
            query_params.append(('direction', params['direction']))  # noqa: E501
        if 'excluded_ids' in params:
            query_params.append(('excludedIds', params['excluded_ids']))  # noqa: E501
            collection_formats['excludedIds'] = 'csv'  # noqa: E501
        if 'external_payment_statuses' in params:
            query_params.append(('externalPaymentStatuses', params['external_payment_statuses']))  # noqa: E501
            collection_formats['externalPaymentStatuses'] = 'csv'  # noqa: E501
        if 'from_current_access_client' in params:
            query_params.append(('fromCurrentAccessClient', params['from_current_access_client']))  # noqa: E501
        if 'groups' in params:
            query_params.append(('groups', params['groups']))  # noqa: E501
            collection_formats['groups'] = 'csv'  # noqa: E501
        if 'include_generated_by_access_client' in params:
            query_params.append(('includeGeneratedByAccessClient', params['include_generated_by_access_client']))  # noqa: E501
        if 'kinds' in params:
            query_params.append(('kinds', params['kinds']))  # noqa: E501
            collection_formats['kinds'] = 'csv'  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))  # noqa: E501
        if 'payment_request_statuses' in params:
            query_params.append(('paymentRequestStatuses', params['payment_request_statuses']))  # noqa: E501
            collection_formats['paymentRequestStatuses'] = 'csv'  # noqa: E501
        if 'recurring_payment_statuses' in params:
            query_params.append(('recurringPaymentStatuses', params['recurring_payment_statuses']))  # noqa: E501
            collection_formats['recurringPaymentStatuses'] = 'csv'  # noqa: E501
        if 'scheduled_payment_statuses' in params:
            query_params.append(('scheduledPaymentStatuses', params['scheduled_payment_statuses']))  # noqa: E501
            collection_formats['scheduledPaymentStatuses'] = 'csv'  # noqa: E501
        if 'ticket_statuses' in params:
            query_params.append(('ticketStatuses', params['ticket_statuses']))  # noqa: E501
            collection_formats['ticketStatuses'] = 'csv'  # noqa: E501
        if 'transaction_number' in params:
            query_params.append(('transactionNumber', params['transaction_number']))  # noqa: E501
        if 'transfer_filters' in params:
            query_params.append(('transferFilters', params['transfer_filters']))  # noqa: E501
            collection_formats['transferFilters'] = 'csv'  # noqa: E501
        if 'transfer_types' in params:
            query_params.append(('transferTypes', params['transfer_types']))  # noqa: E501
            collection_formats['transferTypes'] = 'csv'  # noqa: E501
        if 'user' in params:
            query_params.append(('user', params['user']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['accessClient', 'basic', 'session']  # noqa: E501

        return self.api_client.call_api(
            '/{owner}/transactions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[TransactionResult]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def view_transaction(self, key, **kwargs):  # noqa: E501
        """Returns details about a transaction  # noqa: E501

        Returns details about a transaction.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.view_transaction(key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str key: Either the id or transaction number (required)
        :param list[str] fields: Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`).  
        :return: TransactionView
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.view_transaction_with_http_info(key, **kwargs)  # noqa: E501
        else:
            (data) = self.view_transaction_with_http_info(key, **kwargs)  # noqa: E501
            return data

    def view_transaction_with_http_info(self, key, **kwargs):  # noqa: E501
        """Returns details about a transaction  # noqa: E501

        Returns details about a transaction.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.view_transaction_with_http_info(key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str key: Either the id or transaction number (required)
        :param list[str] fields: Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`).  
        :return: TransactionView
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['key', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method view_transaction" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'key' is set
        if self.api_client.client_side_validation and ('key' not in params or
                                                       params['key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `key` when calling `view_transaction`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'key' in params:
            path_params['key'] = params['key']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['accessClient', 'basic', 'session']  # noqa: E501

        return self.api_client.call_api(
            '/transactions/{key}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TransactionView',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
